start_at = bedroom
loading_screen = off_season
start_theme = main_theme

// Zildud Henderson.  Lvl 1 MEI employee.  Orc.  50 XP.  10-20 gold.

locations {

//   winter_truck : location "Uncle Carroll has been working on the engine of his truck for the past few weeks.  He keeps saying something about increasing the light years per dream."
//      header = "Back woods"
//      graphic = "winter_truck"
//      {on_command {
//         : match "enter _; go truck" {
//            : print "Maybe you'll even try driving it once the engine's rebuilt.";
//            }
//         }
//      }

   winter_house : location "It's kind of a gray winter morning, and it must have snowed a bit overnight.  The world is cold and fresh."
      header = "House"
      graphic = "winter_house"
      {on_command {
         : match "enter _" {
            : print "You just had a nice chat with your mother.  You should get to work.";
            }
         }
      }
      
   winter_road : location "Maybe your uncle was right, kook that he is.  About the way it's up to you to create your own world."
      header = "Road"
      graphic = "winter_road"
      {on_command {
         : match "x road; x tracks" {
            : print "A few tire tracks run through the snow.";
            }
         }
      }
      
   winter_carriage : location "That doesn't mean you don't miss your father every day, of course."
      header = "Uncle Carroll's house"
      graphic = "winter_carriage"
      {on_command {
         : match "x house; x carroll; x uncle; x carriage; x door" {
               : print "Even your uncle's house looks pretty.";
         }
         : match "enter _" {
            : print "You've got plans to talk with Uncle Carroll tomorrow.  Right now you should get to work.";
            }
         }
      }
      
   winter_clearing : location "Still, you're grateful that this clearing is now just a pretty place at the edge of the woods, not the site of whatever happened before."
      header = "Clearing"
      graphic = "winter_clearing"
      {on_command {
         : match "n _" {
            : add var = "score" value = "1";
            : gosub "the_end";
            }
         : match "wait _" {
            : print "Thankfully, you don't have to battle adventurers anymore.";
            : done;
            }
         : match "x clearing" {
            : print "Snowy and still.";
         }
         }
      }
      
   final_1 : location "This ... doesn't look like your normal Dream.  The hallways seem to go on forever.  And now you have to use the stupid regular compass directions again?"
      header = "Dungeon"
      graphic = "final1"
      {on_command {
         : match "s _; e _; w _" {
            : gosub "wrong_way_final";
            }
         : if (is_go_right || is_go_left) {
            : print "You can only go north, south, east, or west.";
            : done;
            } 
         : match "f _; go forward; turn _" {
            : print "You can only go north, south, east, or west.";
            : done;
            }
         }
      }
      
   final_2 : location "What are those shapes?"
      header = "Dungeon"
      graphic = "final2"
      {on_command {
         : match "s _; e _; w _" {
            : gosub "wrong_way_final";
            }
         : if (is_go_right || is_go_left) {
            : print "You can only go north, south, east, or west.";
            : done;
            } 
         : match "f _; go forward; turn _" {
            : print "You can only go north, south, east, or west.";
            : done;
            }            
         }
      }

   final_3 : location "What's going on?"
      header = "Dungeon"
      graphic = "final3"
      {on_command {
         : match "s _; e _; n _" {
            : gosub "wrong_way_final";
            }
         : if (is_go_right || is_go_left) {
            : print "You can only go north, south, east, or west.";
            : done;
            } 
         : match "f _; go forward; turn _" {
            : print "You can only go north, south, east, or west.";
            : done;
            }            
         }
      }

   final_4 : location "Something is ... very much wrong."
      header = "Dungeon"
      graphic = "final4"
      {on_command {
         : match "w _; e _; n _" {
            : gosub "wrong_way_final";
            }
         : if (is_go_right || is_go_left) {
            : print "You can only go north, south, east, or west.";
            : done;
            } 
         : match "f _; go forward; turn _" {
            : print "You can only go north, south, east, or west.";
            : done;
            }            
         }
      }

   final_5 : location "You feel like your Dream is ... disintegrating, like you're ... pricked with a million needles ..."
      header = "Dungeon"
      graphic = "final5"
      {on_command {
         : match "w _; e _; n _" {
            : gosub "wrong_way_final";
            }
         : if (is_go_right || is_go_left) {
            : print "You can only go north, south, east, or west.";
            : done;
            } 
         : match "f _; go forward; turn _" {
            : print "You can only go north, south, east, or west.";
            : done;
            }            
         }
      }
      
   final_6 : location "Or maybe ... brain ... huge thunderheads ... fuzz ..."
      header = "Dungeon"
      graphic = "final6"
      {on_command {
         : match "w _" {
            : print "You follow the corridor and stumble on something unseen.  Your body stiffens as the floor disappears, then you tumble and slide down a cylindrical chute, hurtling through blackness.  You feel like you'll never breathe again, bruising and banging and falling ever faster, until you crash to the ground of a place that looks approximately familiar ...";
            : press_any_key;
            : create "club" target = "clearing_3";
            : set_string var = "dungeon_header" {("Dream clearing")};
            : goto "clearing_3";
            : redescribe;
            }
         : match "north _; south _; east _" {
            : gosub "wrong_way_final";
            }
         : if (is_go_right || is_go_left) {
            : print "You can only go north, south, east, or west.";
            : done;
            } 
         : match "f _; go forward; turn _" {
            : print "You can only go north, south, east, or west.";
            : done;
            }            
         }
      }
      
   clearing_3 : location "It's a grotesquely colored version of the clearing where you typically battle.  Now what?"
      header = "Dream clearing"
      graphic = "clearing_alter"
      {on_command {
         : match "wait _; battle _; attack _; fight _; parry _; spell _" {
            : print "You do what you guess you'd normally do, which is wait around for someone else to show up.  Instantly, a bright figure emerges from the magenta trees ...";
            : press_any_key;
            : set_string var = "dungeon_header" {("The Boss")};
            : goto "boss_talk_final";
            : set_theme "dungeon_theme";
            : redescribe;
            }
         : match "take club" {
            : print "You pick up your club.  It feels lighter and more dangerous here.  Instantly, a bright figure emerges from the magenta trees ...";
            : press_any_key;
            : goto "boss_talk_final";
            : set_theme "dungeon_theme";
            : pocket "club";
            : redescribe;
            }
         : match "x clearing; x trees; x ground" {
            : print "Everything here is hideous.  What happened to your usual Dream?";
            }
         }
      }

   boss_talk_final : location
      header = "The Boss"
      graphic = "boss_alter";

   boss_battle : location;

   bedroom_3 : location "You stand yet again in your bedroom with all its typical things.  The straw mattress.  The crinkled boar skin on the floor.  The windowpane made of smelted faerie wings.  Typical.   Your kitchen is to the west."
      header = "Your bedroom"
      graphic = "bed_small"
      {on_command {
         : match "open door" {
            : print "There's no door to open.  Just type WEST to go to the kitchen.";
            }
         : match "close door; x frame" {
            : print "There's no door, just a frame between your room and the kitchen.";
            : done;
            }
         : match "x wings; x faerie" {
            : print "The window shimmers with iridescence.";
            }
         : match "take wings; take faerie" {
            : print "You can't take the window.";
            : done;
            }
         : match "sleep _;wait _;go *; lie bed; lie down" {
            : if (battle_number == 1) {
               : print "You're not feeling especially tired, but after all your battle losses you figure there's nothing wrong with recuperating a bit more.  Pretty soon you're back in your Dream.";
               : press_any_key;
               : set_theme "dungeon_theme";
               : goto "d1";
               : set_true "is_in_dungeon";
               : set_false "can_sleep";
//               : destroy "note";
               : redescribe;
               }               
            : else_if (battle_won || battle_lost) {
               : print "Yeah, you're kinda tired, but you should probably report the results of your battle back to Jonathan at the MEI office first.";
               }
            : else_if (!can_sleep) {
               : print "You're not feeling especially tired.  You haven't even fought a battle yet today.";
               : done;
               }
            : else {
               : print "Might as well.  It's not like there's anything else that great to do today.";
               : press_any_key;
               : set_theme "dungeon_theme";
               : goto "d1";
               : set_true "is_in_dungeon";
               : set_false "can_sleep";
               : redescribe;
               }
            }
         }
      }
   
   kitchen_3 : location "{kitchen_sponge}"
      graphic = "kitchen"
      header = " Kitchen"
      {on_command {
         : match "x pot; x jars; x ladle" {
            : print "Your mother must have put everything away after she finished cooking yesterday.";
         }
         : match "x counter; x countertop" {
            : if (has_not_created "sponge") {
               : print "A basic counter with a sink set in it.  There's something on top of the sink.";
               }
            : else {
               : print "A basic counter with a sink set in it.";
               }
            }
         : match "x sink" {
            : if (has_not_created "sponge") {
               : print "Looks like your mother left a dish sponge lying atop the sink.";
               : create "sponge" target = "kitchen_3";
               : set_string var = "kitchen_sponge" {("Your kitchen is nice enough, you guess.  It's got a stove and a sink and a microwave where you heat up your frozen rat burritos.  Your bedroom is to the east, and you can exit your house.")};
               }
            }
         : match "take note" {
            : print "Once you've read it, there's not much else to do with it.";
            : done;
            }
         : match "leave _; go outside" {
            : goto "house_3";
            : redescribe;
            }
         : match "open cabinets" {
            : print "There's nothing you need in them.";
            }
         }
      }
   
   pond : location "{pond_descr}"
      graphic = "pond"
      header = "Pond"
      {on_command {
         : match "sail boat; float boat; put boat; drop boat" {
            : if (is_carried "toy_boat") {
               : print "You don't want the boat to drift on the pond beyond your reach.  You decide to keep it.";
               : done;
            }
         }
         : match "go swamp; cross bridge" {
            : print "You've got no interest in going to the swamp and trudging through cattails and waist-deep muck.";
            }
         : match "be -; just be" {
            : print "For a few moments, you are.";
            }
         : match "swim _; go pond; go water" {
            : print "The pond is kinda gross, with leaves and mud and stuff, and this might be the rare case where bathing in water leaves you dirtier rather than cleaner.  You decide to stay on land.";
            }
         : match "take stone; take stones" {
            : print "The stones that comprise the path are pretty big, and you've got no use for them.";
            : done;
            }
         : match "x bridge;go bridge" {
            : if (has_not_created "glass_bottle") {
               : print "The bridge is wooden and painted red.  It's more ornamental than anything, crossing a very small portion of the pond.  You walk out on it and notice something glistening in the water beneath it.  It looks like a glass bottle.";
               : create "glass_bottle" target = "pond";
               : set_string var = "pond_descr" {("You're at a pleasant little pond beside a much larger swamp.  There's a little stone path that leads to a small bridge.  Sometimes you like to come here and just be, away from other monsters and other adventurers and those who overlap in those categories.")};
               : set_string var = "small_pond_descr" {("The pond is small and dotted with fallen leaves.")};
               }
            : else {
               : print "The bridge is wooden and painted red.  It's more ornamental than anything, crossing a very small portion of the pond.";
               }
            }
         : match "x light; x glint" {
            : if (has_not_created "glass_bottle") {
               : print "Something keeps glinting from under the bridge.  Maybe it's worth looking there.";
               }
            : else {
               : print "The light reflects off the pond pleasantly.";
               }
            }
         : match "x leaves" {
            : print "Orange and gold fleck the pond.";
            }
         : match "take leaves" {
            : print "You have no use for a mass of wet leaves.";
            : done;
            }
         }
      }
   
   southroad : location "This long, straight road is cut through an old orchard.  It leads west and eventually to the clearing and your assigned battle location.  To the east is the road back to your house.  A forgotten farmstead is to the north."
      graphic = "southroad"
      header = "South road";
      
   
   northroad : location "You're on a thankfully straight road between the MEI office to the west and Uncle Carroll's house to the east."
      header = "North road"
      graphic = "northroad";
   
   carriage : location "{carriage_descr}"
      header = "Uncle Carroll's house"
      graphic = "carriage"
      {on_pre_describe {
         : set_integer var = "carriage_visits" {(carriage_visits + 1)};
         : if (carriage_visits >= 3) {
            : if (has_visited "sewer") {
               : set_string var = "carriage_descr" value = "You're outside Uncle Carroll's house, and you can go in if you must.  The road to the MEI office goes west, your uncle's back woods is to the north, that weird sewer pipe is eastward, and the road to your house is south from here.";
                  }
            : else {
               : set_string var = "carriage_descr" value = "You're outside Uncle Carroll's house, and you can go in if you must.  The road to the MEI office goes west, your uncle's back woods is to the north, and the road to your house is south from here.  There's also a path that leads eastward.";
                  }
               }
            }

      on_command {
         : match "x house; x carriage" {
            : print "It's nicer than a barn, you guess, but not by much.";
            }
         : match "open door" {
            : if (battle_number < 5) {
               : print "Type ENTER to enter your uncle's house.";
               : done;
               }
            }
         : match "enter _; open door; x door" {
            : if (battle_number == 5 && battle_won && has_all_spells) {
               : print "You knock on the door, but your uncle doesn't answer.  Then you try to open the door and it's locked.  He must be elsewhere.  That's okay, you guess.  You're pretty tired and wouldn't mind getting some sleep at home.";
               : done;
               }
            }
         }
      }
   
   windmill_top : location "You stand on a crosspiece of the windmill near its top.  From here, an orc might be able to see a fair distance into the fields that stretch out until they meet the forest.  But in your case, you're clinging desperately to the rusty metal, reminded of how heights terrify you.  The only place to go is down--a reality of which you're acutely aware."
      header = "Up the windmill"
      graphic = "windmill"
      {on_command {
         : match "x windmill; x metal" {
            : set_sentence "x crosspiece";
         }
         : match "open umbrella;fly _;go _;close umbrella;climb _;slide _;down _" {
            : if (is_carried "slippers") {
               : print "The umbrella bears your weight until about five feet from the ground, when three of its ribs snap, inelegantly dropping you on your rear.  You get up, brush yourself off, and throw the broken umbrella into some tall grass.";
               : destroy "umbrella";
               : press_any_key;
               }
            : else {
               : print "You very carefully descend the windmill.";
               : press_any_key;
            }
            : goto "farm";
            : redescribe;
            }
         }
      }
   
   farm : location "{farm_descr}"
      header = "Abandoned farm"
      graphic = "farm"
      {on_command {
         : match "take weeds" {
            : print "They're useless. You decide to leave them.";
            }
         : match "take windmill" {
            : print "You can't. The windmill is just a bit too big to fit into any of your tunic's pockets.";
            }
         : match "x turnip; take turnip; eat turnip; x crop; x crops" {
            : print "This farm doesn't grow anything anymore besides weeds.";
         }
         : match "water _;open bottle;empty bottle;drop bottle;pour bottle;put bottle; pour water; open water; drop water; put water" {
            : if (is_beside "planted_seeds" && is_carried "full_bottle") {
               : print "You open the bottle and pour water over the seeds.  It pours out quickly and some of the seeds seem to wash away.  But then from the ground springs a complete head of cabbage.\n(Your score has gone up by two points.)";
               : add var = "score" value = "2";
               : create "cabbage" target = "farm";
               : set_string var = "dirt_descr" {("The dirt has served its purpose.  There's nothing else to do with it.")};
               : swap o1 = "full_bottle" o2 = "glass_bottle";
//               : create "cork" target = "glass_bottle";
               : destroy "planted_seeds";
               : if (!has_visited "windmill_top") {
                  : set_string var = "farm_descr" {("Whatever farm was here has been lost to time.  The only structure that remains is a broken windmill overrun with vines--though there maybe seems to be something else at its top.  Some scraggly weeds are at the base of it.  The main road is back to the south.")};
                  }
               : else {
                  : set_string var = "farm_descr" {("Whatever farm was here has been lost to time.  The only structure that remains is a broken windmill overrun with vines.  Some scraggly weeds are at the base of it.  The main road is back to the south.")};
                  }
               }
            : else_if (is_beside "planted_seeds" && is_carried "glass_bottle") {
               : print "That's a good idea, but right now the bottle you're carrying is empty.";
               }
            : else_if (is_beside "dirt" && is_carried "full_bottle") {
               : print "That's a good idea, but you have no use for mud right now.  Maybe there's something you could put in the dirt first.";
               : done;
               }
            : else_if (!has_not_created "cabbage" && is_carried "full_bottle") {
               : print "You've already grown one head of cabbage, and as far as you're concerned that's one head too many.";
               }
            : else_if (verb_is "water" || verb_is "pour") {
               : print "An interesting thought, but it doesn't seem like you've got any water.";
               }
            : else_if (is_carried "lightning_bottle") {
               : print "You open the bottle and release the lightning, where it flits away like a firefly.  You once again have an empty bottle.";
               : swap o1 = "lightning_bottle" o2 = "glass_bottle";
//               : create "cork" target = "glass_bottle";
               : done;
               }
            : else_if (!is_carried "full_bottle" && !is_carried "glass_bottle" && !is_carried "lightning_bottle") {
               : print "That doesn't work here.";
               }
            : else {
               : print "That doesn't work here.";
               }
            : done;
            }
      
         : match "dig _;open dirt;take dirt; hoe _" {
            : if (is_beside "dirt") {
               : print "Of the many things you're not interested in, backbreaking farm labor is one.  But if you had something that would go in the dirt, you suppose you could put it there.";
               : done;
               }
            : else {
               : print "You've already planted the cabbage seeds.  You've got nothing else to do with the dirt.";
               : done;
               }
               
            }
         : match "x dirt" {
            : if (!is_beside "dirt" && has_not_created "cabbage") {
               : print "Some dirt with cabbage seeds planted in it.  It's pretty dry.";
               }
            : else {
               : print "{dirt_descr}";
               }
            }
         : match "take vines" {
            : print "You try to gather a few of the vines, but down here they're brittle.  Some snap, and the rest are entangled with the windmill.  You give up.";
            : done;
            }
         : match "climb vines; go vines; pull vines" {
            : print "You tug on a few of the vines to see if they'll bear your weight.  Most of them snap.  Looks like you'll have to find a different way to get up there.";
            : done;
            }
         : match "up _; fly _; climb _; go _; scale _; open umbrella" {
            : if (is_carried "umbrella") {
               : if (!has_flown_once) {
                  : print "You feel ridiculous, but you open the umbrella and hold it at arm's length like you're Mary Poppins or something.  And, just like Mary Poppins, you're suddenly a lot higher in the air than you used to be.\n(Your score has gone up by two points.)";
                  : set_true var = "has_flown_once";
                  : add var = "score" value = "2";
                  }
               : else {
                  : print "Okay, if you must.  You close your eyes, open the umbrella, and once again have the sensation of your feet leaving the earth.";
                  }
                  
               : if (!has_not_created "cabbage") {
                  : set_string var = "farm_descr" {("Whatever farm was here has been lost to time.  The only structure that remains is a broken windmill overrun with vines.  Some scraggly weeds are at the base of it.  The main road is back to the south.")};
                  }
               
               : if (has_not_created "cabbage") {
                  : set_string var = "farm_descr" {("Whatever farm was here has been lost to time.  The only structure that remains is a broken windmill overrun with vines.  Some scraggly weeds are at the base of it.  You've planted some seeds in the dirt here.  The main road is back to the south.")};
                  }
               : if (has_not_created "planted_seeds") {
                  : set_string var = "farm_descr" {("Whatever farm was here has been lost to time.  The only structure that remains is a broken windmill overrun with vines.  Some scraggly weeds are at the base of it, next to a bare patch of dirt.  The main road is back to the south.")};
                  }
               : goto "windmill_top";
               : press_any_key;
               : redescribe;
               
               }
            : else_if (is_beside "umbrella") {
               : print "That's a good idea, but maybe the umbrella could help.";
               }
            : else {
               : if (has_visited "windmill_top") {
                  : print "Without your propeller-umbrella, you can't return to the top, which is just fine with you.";
                  }
               : else {
                  : print "You'd like to get a better view of the world from the top of the windmill, but how would you get up there?  There's no ladder or anything.";
                  }
               }
            }
         : match "put seeds;plant _;drop seeds; sow _; open seeds" {
            : if (is_carried "seeds") {
               : print "You scratch and poke at the dirt a bit and drop the cabbage seeds into a few of the holes you've made.  You set the packet down as you begin to create one final hole, but a gust of wind blows the packet somewhere into the tall grass.  Guess you've planted enough.";
               : destroy "seeds";
               : create "planted_seeds";
               : destroy "dirt";
               : if (!has_visited "windmill_top") {
                  : set_string var = "farm_descr" {("Whatever farm was here has been lost to time.  The only structure that remains is a broken windmill overrun with vines--though there maybe seems to be something else at its top.  Some scraggly weeds are at the base of it.  You've planted some seeds in the dirt here.  The main road is back to the south.")};
                  }
               : else {
                  : set_string var = "farm_descr" {("Whatever farm was here has been lost to time.  The only structure that remains is a broken windmill overrun with vines.  Some scraggly weeds are at the base of it.  You've planted some seeds in the dirt here.  The main road is back to the south.")};
                  }
               : done;
               }
            : else_if (is_beside "planted_seeds") {
               : print "You've already planted the cabbage seeds.";
               }
            : else {
               : print "You don't have anything to plant.";
               }
            }
         : match "take seeds" {
            : if (is_beside "planted_seeds") {
               : print "You've planted them in the dirt.  There's no reason to take them.";
               : done;
               }
            }
         }
      }
   
   sewer : location "{sewer_descr}"
      header = "Sewer pipe in woods"
      graphic = "sewer"
      {on_command {
         : match "x hill; x hillside" {
            : print "The pipe is buried in the hillside.  It's not clear when the pipe was put in, but it seems like it's been there a while.";
         }
         : match "enter _;crawl _;go sewer;go pipe;climb _;down _" {
            : if (battle_number == 5 && battle_won && has_all_spells) {
               : print "You try to crawl into the pipe, but someone has installed a thick metal grating about two feet inside.  The grating prevents you from going forward, and you crawl back out.  You're getting pretty tired, anyway.  Maybe it's time to head back home and sleep.";
               : create "grating" target = "sewer";
               }
            : else {
               : print "You take a deep breath, bend down, then crawl into the darkness of the pipe.";
               : if (!has_visited_sewer) {
                  : add var = "score" value = "1";
                  : print "(Your score has gone up by one point.)";
                  : set_true "has_visited_sewer";
                  }
               : press_any_key;
               : set_theme "dungeon_theme";
               : goto "d1";
               : set_true "is_in_dungeon";
               : set_true "from_pipe";
               : redescribe;
               }
            }
         }
      }
   
   truck : location "The woods behind your uncle's house is pretty with its yellow trees and fallen leaves.  This is where he keeps his 1940s truck--not that he could keep it anywhere else, as it's sunk into the ground to its bumpers and has no semblance of an engine.  You can enter it if you feel like risking tetanus."
      header = "Back woods"
      graphic = "truck";
   
   in_truck : location "You sit in the shell of your uncle's old truck; a cracked tire now serves as a seat.  The interior is filled with leaves and bits of rusted metal.  The steering wheel is the only thing that seems to have weathered fairly well, although it's certainly useless."
      graphic = "in_truck"
      header = "In the old truck"
      {on_command {
         : match "x rust; x metal" {
            : print "Pretty much all of the metal here is covered in orange dust.";
         }
         : match "x leaves; x leaf" {
            : print "Some yellow, some orange, some brown.";
            : done;
            }
         : match "x box; x glove; x door; x glovebox; x hole" {
            : if (!has_not_created "ceiling_wax") {
               : print "Since the door dissolved into rust, the glove box isn't anything besides one more hole in the truck.";
               }
            }
         : match "open box;open door;take door" {
            : if (has_not_created "ceiling_wax") {
               : print "You carefully open the glove box and find a weird little jar inside, which you take.  Then you try to close the glove box but its door dissolves into a powdery rust, leaving just one more open hole in the truck.";
               : create "ceiling_wax" target = "inventory";
               : destroy "glove_box";
               }
            : else {
               : print "You already got the jar of ceiling wax from the glove box, and then the door fell off into a pile of rust.  There's nothing else to do with it.";
               }
            }
         : match "close box; close door" {
            : if (has_not_created "ceiling_wax") {
               : print "The door to the glove box is already closed.";
               }
            : else {
               : print "You already got the jar of ceiling wax from the glove box, and then the door fell off into a pile of rust.  There's nothing else to do with it.";
               }
            }
         : match "drive _; start _" {
            : print "Sure.  The world is full of possible impossibilities, or whatever ridiculous thing your uncle would say about this.  So you drive to St. Louis and back, though it just feels like you sit in an abandoned truck for ten minutes.";
            }
         : match "x wheel;x steering;turn steering; turn wheel" {
            : print "The steering wheel is pretty big.  It doesn't turn and is firmly affixed to the rest of the truck.";
            }
         : match "take wheel; take steering" {
            : print "The steering wheel is firmly affixed to the steering column which is firmly affixed to the body of the truck which is firmly affixed to the earth.";
            : done;
            }
         : match "stop truck" {
            : print "You are certain it can't be stopped any more than it already is.";
            }
         }
      }
            
   
   carroll : location "{carroll_descr}"
      header = "Uncle Carroll's house"
      graphic = "uncle_carroll"
      {on_pre_describe {
         : set_integer var = "carroll_visits" {(carroll_visits + 1)};
         : if (carroll_visits >= 3) {
            : set_string var = "carroll_descr" value = "Your Uncle Carroll sits amongst the wreckage of his house, staring out a window, probably thinking of the next crazy thing to say.";
                  }
            }
      on_command {
         : match "open window" {
            : print "Uncle Carroll seems content enough with it closed.";
         }
         : match "close window" {
            : print "It's already closed.";
            }
         : match "x ceiling" {
            : if (!is_carried "ceiling_wax") {
               : print "Your uncle's ceiling looks shiny enough to you, although admittedly you've never considered the shininess of any ceiling before.";
               : done;
            }
         }
         : match "talk _; say _; ask _; tell _" {
            : if (!has_uncle_talked) {
               : gosub "uncle_talk_1";
               : set_true "has_uncle_talked";
               : destroy "note";
               }
            : else {
               : gosub "uncle_talk_2";
               }
            }
         : match "give _; drop _" {

            : if (!has_uncle_talked) {
               : print "Maybe you should talk to your uncle first to see what he might want.";
               }

            : else_if (((noun1_is "boat" && noun2_is "uncle") || (noun2_is "boat" && noun1_is "uncle") || (noun1_is "boat" && noun2_is "")) && is_carried "toy_boat") {
               : gosub "give_boat";
               }
            : else_if (((noun1_is "wax" && noun2_is "uncle") || (noun2_is "wax" && noun1_is "uncle") || (noun1_is "wax" && noun2_is "")) && is_carried "ceiling_wax") {
               : gosub "give_wax";
               }
            : else_if (((noun1_is "cabbage" && noun2_is "uncle") || (noun2_is "cabbage" && noun1_is "uncle") || (noun1_is "cabbage" && noun2_is "")) && is_carried "cabbage") {
               : gosub "give_cabbage";
               }
            : else_if (((noun1_is "king" && noun2_is "uncle") || (noun2_is "king" && noun1_is "uncle") || (noun1_is "king" && noun2_is "")) && is_carried "playing_card") {
               : gosub "give_king";
               }               
            : else_if (((noun1_is "slippers" && noun2_is "uncle") || (noun2_is "slippers" && noun1_is "uncle") || (noun1_is "slippers" && noun2_is "")) && is_carried "slippers") {
               : gosub "give_shoes";
               }
            : else_if (((noun1_is "seeds" && noun2_is "uncle") || (noun2_is "seeds" && noun1_is "uncle") || (noun1_is "seeds" && noun2_is "")) && is_carried "seeds") {
               : if (!uncle_seeds) {
                  : print "\"Here, I think you'll want these,\" you say, sliding the packet of seeds across your uncle's desk.";
                  : print "He picks the packet up, glances at it, then slides it back to you.  \"These are cabbage seeds, nephew Zildud,\" he says. \"The song clearly calls for cabbages.  Like Orc Twain once said, that's like the difference between a monster and a monster truck.\"";
                  : set_true "uncle_seeds";
                  }
               : else {
                  : print "He seemed pretty clear that the seeds won't be enough on their own.";
                  }
               }
            : else_if (((noun1_is "scroll" && noun2_is "uncle") || (noun2_is "scroll" && noun1_is "uncle") || (noun1_is "scroll" && noun2_is "")) && is_carried "spell_scroll") {
               : print "Uncle Carroll gave the spell scroll to you, and he said you should keep it. If you've got something you think could be an ingredient for a spell, try giving that to him instead.";
               }
            : else {
               : print "It's not clear why your uncle would want that.";
               }
         }
         : match "x books;x manuscripts;x shelves;x bookshelves;x baubles;x gizmos;x camera;x backdrop;x papers;x proofs;x flasks;x liquids;x bones;x feathers;x detritus;x gramophone;x wreckage;x quill;x pen;x inkwell;x paper" {
            : print "There is just so much stuff here that it's hard to make sense out of any of it.";
            }
         : match "take books;take manuscripts;take shelves;take bookshelves;take baubles;take gizmos;take camera; take backdrop;take papers;take proofs;take flasks;take liquids;take bones;take feathers;take detritus;take gramophone;take wreckage;take quill; take pen; take inkwell; take paper" {
            : print "All of the stuff in this room is Uncle Carroll's, and you're happy to have it remain that way.";
            : done;
            }
         }
      }
   
   house_3 : location "{house_descr}"
      graphic = "house"
      header = "Outside your house"
      {on_pre_describe {
         : set_integer var = "house_visits" {(house_visits + 1)};
         : if (house_visits >= 3) {
            : set_string var = "house_descr" value = "You're in front of your same old house, which you could enter.  Otherwise, the road elsewhere is to the west.";
                  }
            }

      on_command {
         : match "x door; open door" {
               : print "Type ENTER or IN to go inside your house.";
               : done;
               }
         : match "x wheel" {
            : if (has_not_created "wheel") {
               : print "It's about the size of a dinner plate and has a bunch of wooden spokes emanating from its hub.  It still seems sturdy, despite its age.";
               }
            }      
         : match "take wheel" {
            : if (has_not_created "wheel") {
               : print "You take the wheel.";
               : pocket "wheel";
               : done;
               }
            }
         : match "in -" {
            : if (battle_number == 5 && battle_won) {
               : goto "kitchen_4";
               : redescribe;
               }
            : else {
               : goto "kitchen_3";
               : redescribe;
               }
            }
         }
      }
   
   road_2 : location  "{road_descr}"
      header = "Road"
      graphic = "road"
      {on_pre_describe {
         : set_integer var = "road_visits" {(road_visits + 1)};
         : if (road_visits >= 3) {
            : set_string var = "road_descr" value = "You're on the road near your house.  Your house is east, Uncle Carroll's house is north, the road to the clearing is west, and the pond is south.";
                  }
            }
         }
   
   clearing_2 : location "{clearing_2_descr}"
      header = "Clearing"
      graphic = "clearing";
   
   office_2 : location "You're outside the local MEI office in a still-green part of the forest.  It's a log-cabin affair with a sign hanging from its roof.  The road to Uncle Carroll's house is to the east, and the clearing is to the south."
      header = "MEI office"
      graphic = "office"
      {on_command {
         : match "open door; x door" {
            : print "Type ENTER to enter the office.";
         }
         : match "x office;x building;x log;x cabin" {
            : print "A midtown skyscraper it ain't.";
            }
         : match "take office;take building;take log;take cabin" {
            : print "You attempt to lift up the building from its southeast corner.  It doesn't move.";
            : done;
            }
         : match "enter _" {
            : if (battle_number == 5 && battle_won) {
               : print "That's weird.  The front door is locked.  You peer into some of the windows, and you see the office is completely dark--there isn't its typical dimness or the light from Jonathan's computer.  Guess it's closed for the day, though that seems unusual.  Oh well.  You've been feeling kinda tired anyway.  Maybe it's best to go home and sleep.  You can check in with MEI tomorrow.";
               : create "windows" target = "office_2";
               : create "door" target = "office_2";
               }
            : else {
               : goto "reception_2";
               : redescribe;
               }
            }
         : match "open door;open lock;unlock door;unlock lock" {
            : if (battle_number == 5 && battle_won) {
               : print "The door is locked tight, and there seems to be no way to open or unlock it.";
               }
            }
         : match "break door; break lock" {
            : if (battle_number == 5 && battle_won) {
               : print "That seems needlessly destructive.  The office is probably just closed.  You can check back tomorrow.";
               }
            }
         }
      }

   d1 : location "{d1_descr}" 
      graphic = "d1water"
         {on_command {
         : match "f _; go forward" {
            : goto "d2";
            : set_string var = "d1_descr" {("Exits: Forward, turn around\nYou enter the dungeon of your Dream yet again.")};
            : redescribe;
            }
         : match "t _; turn around; around _" {
            : goto "d13";
            : redescribe;
            }
         : if (is_go_right || is_go_left) {
            : print "You can't go that way.  Type LOOK while in your Dream to list the possible exits.";
            }
         : match "out _; leave _" {
            : if (from_pipe) {
               : print "The tunnel narrows down, fusing into the sewer pipe you entered.  You get down on your hands and knees and crawl back out, blinking the bright light away.";
               : press_any_key;
               : set_false "is_in_dungeon";
               : set_theme "main_theme";
               : set_false "from_pipe";
               : set_true "has_been_in_sewer";
               : goto "sewer";
               : redescribe;               
               }
            : else {   
               : print "You toss and turn for a bit, and slowly your eyes open to another morning.";
               : press_any_key;
               : set_false "is_in_dungeon";
               : set_theme "main_theme";
               : goto "bedroom_3";
               : redescribe;
               }
            }
         }
      };
      
   d2 : location "Exits: Forward, left, right, turn around"
      graphic = "d2water"
      {on_command {
         : if (is_go_left) {
            : goto "d9";
            : redescribe;
            : done;
            }
         : match "f _; go forward" {
            : goto "d3";
            : redescribe;
            }
         : match "t _; around _; turn around" {
            : goto "d13";
            : redescribe;
            }
         : if (is_go_right) {
            : goto "d6";
            : redescribe;
            }

         }
      }
   d3 : location "Exits: Forward, right, turn around"
      graphic = "d3water"
      {on_command {
         : if (is_go_left) {
            : print "You can't go that way.  Type LOOK while in your Dream to list the possible exits.";
            }
         : match "f _; go forward" {
            : goto "d4";
            : redescribe;
            }
         : if (is_go_right) {
            : goto "d14";
            : redescribe;
            }
         : match "t _; turn around; around _" {
            : goto "d12";
            : redescribe;
            }
         }
      }   
   
   
   d4 : location graphic = "d4water"
      "{d4_descr}"
      {on_command {
         : match "x ice" {
            : print "The water isn't frozen, but it certainly feels that way.";
         }
         : match "swim _; go water; enter water; cross water" {
            : print "The water is absolutely freezing, and hypothermia is not one of your few hobbies.";
            }
         : match "t _; turn around; around _" {
            : goto "d11";
            : redescribe;
            }
         : match "f _; go forward" {
            : print "You can't go that way.  Type LOOK while in your Dream to list the possible exits.";
            }
         : if (is_go_left || is_go_right) {
            : print "You can't go that way.  Type LOOK while in your Dream to list the possible exits.";
            }
         : match "take boat" {
            : if (is_beside "full_sponge" && is_beside "toy_boat" && !is_worn "oven_mitts") {
               : print "You climb down the side of what used to be the pool of water.  You cross the room, avoiding small puddles on the floor, and take the toy boat.";
               : pocket "toy_boat";
               : set_graphic graphic = "d4empty" target = "d4";
               : update_graphic graphic = "d4empty";
               : done;
               }
            : else_if (is_beside "dungeon_water") {
               : print "There's no way to reach it.  The water is icy and deep.";
               : done;
               }
            }
         }
      }
            
   d5 : location "Exits: Turn around"
      graphic = "d5"
      {on_command {
         : match "take umbrella" {
            : if (is_beside "umbrella") {
               : if (!is_worn "oven_mitts") {
                  : set_graphic graphic = "d5empty" target = "d5";
                  : update_graphic graphic = "d5empty";
                  : get "umbrella";
                  }
               : else {
                  : print "It's pretty tough to handle most things when you're wearing oven mitts.  Maybe take them off first.";
                  : done;
                  }
               }
            }
         : match "t _; turn around; around _" {
            : goto "d10";
            : redescribe;
            }
         : match "f _; go forward" {
            : print "You can't go that way.  Type LOOK while in your Dream to list the possible exits.";
            }
         : if (is_go_left || is_go_right) {
            : print "You can't go that way.  Type LOOK while in your Dream to list the possible exits.";
            }
         }
      }
   
   d6 : location "Exits: Turn around"
      graphic = "d6"
      {on_command {
         : match "take seeds" {
            : if ((is_beside "seeds") && (!is_worn "oven_mitts")) {
               : set_graphic graphic = "d6empty" target = "d6";
               : update_graphic graphic = "d6empty";
               : get "seeds";
               }
            }
         : match "t _; turn around; around _" {
            : goto "d8";
            : redescribe;
            }
         : match "f _; go forward" {
            : print "You can't go that way.  Type LOOK while in your Dream to list the possible exits.";
            }
         : if (is_go_left || is_go_right) {
            : print "You can't go that way.  Type LOOK while in your Dream to list the possible exits.";
            }
         }
      }

   d7 : location "Exits: Forward, left, right, turn around"
      graphic = "d7"
      {on_command {
         : if (is_go_left) {
            : goto "d3";
            : redescribe;
            : done;
            }
         : match "f _; go forward" {
            : goto "d6";
            : redescribe;
            }
         : match "t _; turn around; around _" {
            : goto "d9";
            : redescribe;
            }
         : if (is_go_right) {
            : goto "d13";
            : redescribe;
            }

         }
      }
   
   
   
   d8 : location "Exits: Forward, left, right, turn around"
      graphic = "d8"
      {on_command {
         : if (is_go_left) {
            : goto "d13";
            : redescribe;
            : done;
            }
         : match "f _; go forward" {
            : goto "d9";
            : redescribe;
            }
         : match "t _; turn around; around _" {
            : goto "d6";
            : redescribe;
            }
         : if (is_go_right) {
            : goto "d3";
            : redescribe;
            }

         }
      }
   
   d9 : location "Exits: Turn around"
      graphic = "d9"
      {on_command {
         : match "t _; turn around; around _" {
            : goto "d7";
            : redescribe;
            }
         : match "f _; go forward" {
            : print "You can't go that way.  Type LOOK while in your Dream to list the possible exits.";
            }
         : if (is_go_left || is_go_right) {
            : print "You can't go that way.  Type LOOK while in your Dream to list the possible exits.";
            }
         : match "talk _; ask _; say _; tell _" {
            : if (has_not_created "playing_card") {
               : print "The snake is a fat, awful green, and it's wrapped around the pedestal upon which a deck of cards sits. \"Pick a card,\" it hisses, even though it's not a terribly sibilant phrase.  You can see its fangs glisten even from across the room.";
               }
            : else {
               : print "There's no one else to talk to other than yourself, and you're not that interesting of a conversationalist.";
               }
            }
         : match "take snake" {
            : if (!has_not_created "playing_card") {
               : print "The snake and the pedestal disappeared in green smoke after you successfully took a card.";
               : done;
               }
            : else {
               : print "Yeah, because carrying around a nightmare snake is a great idea.";
               }
            }
         : match "take pedestal; push pedestal; pull pedestal; move pedestal" {
            : if (!has_not_created "playing_card") {
               : print "The snake and the pedestal disappeared in green smoke after you successfully took a card.";
               : done;
               }
            : else {
               : print "It won't budge, even if it would look nice in your bedroom.  The snake would look less nice there.";
               }
            }
         : match "x snake;x pedestal;x fangs;x fang" {
            : if (!has_not_created "playing_card") {
               : print "The snake and the pedestal disappeared in green smoke after you successfully took a card.";
               }
            }
         : match "take deck; take card" {
            : if (is_worn "oven_mitts" && has_not_created "playing_card") {
               : print "You reach toward the pedestal to take a card.  The snake hisses and lunges, attempting to strike.  Instead, it sinks its fangs into the oven mitt you're wearing on your left hand.  It twists and eventually frees itself, spitting out a mouthful of cotton.  By then, you've fumbled enough with the deck with your other hand to pick up a card.  The snake, defeated, dissipates into a curl of green smoke, and the pedestal and the rest of the deck soon follow.\n(Your score has gone up by two points.)";
               : add var = "score" value = "2";
               : set_graphic graphic = "d9orig" target = "d9";
               : update_graphic graphic = "d9orig";
               : destroy "snake";
               : destroy "cards";
               : destroy "pedestal";
               : create "playing_card" target = "inventory";
               }
            : else_if (!is_beside "snake") {
               : print "You took a card; the rest disappeared into green smoke, along with the snake and pedestal.";
               }
            : else {   
               : print "You reach toward the pedestal, attempting to take a card.  The snake hisses and lunges, hoping to sink its fangs into your green flesh.  In the normal world, you'd be bit and poisoned, but here you pull your hands away in a flash of speed.  Maybe if you had some gauntlets or something.";
               }
            }
         }
      }
   
   d10 : location "Exits: Left, right, turn around"
      graphic = "d10"
      {on_command {
         : if (is_go_left) {
            : goto "d12";
            : redescribe;
            : done;
            }
         : match "f _; go forward" {
               : print "You can't go that way.  Type LOOK while in your Dream to list the possible exits.";
            }

         : match "t _; turn _; around _" {
            : if (destroyed_lightning) {
               : goto "d5";
               : redescribe;
               }
            : else {
               : goto "d14";
               : redescribe;
            }
            }
         : if (is_go_right) {
            : goto "d4";
            : redescribe;
            }         }
      }

   d11 : location "Exits: Forward, left, turn around"
      graphic = "d11"
      {on_command {
         : if (is_go_left) {
            : goto "d14";
            : redescribe;
            : done;
            }
         : match "f _; go forward" {
            : goto "d12";
            : redescribe;
            }
         : match "t _; turn around; around _" {
            : goto "d4";
            : redescribe;
            }
         : if (is_go_right) {
               : print "You can't go that way.  Type LOOK while in your Dream to list the possible exits.";
            }

         }
      }   
   
   d12 : location "Exits: Forward, left, right, turn around"
      graphic = "d12"
      {on_command {
         : if (is_go_left) {
            : goto "d6";
            : redescribe;
            : done;
            }
         : match "f _; go forward" {
            : goto "d13";
            : redescribe;
            }
         : match "t _; turn around; around _" {
            : goto "d3";
            : redescribe;
            }
         : if (is_go_right) {
               : goto "d9";
               : redescribe;
            }

         }
      }   
   
   d13 : location "Exits: Forward, turn around\nThis tunnel leads out of your Dream, and back into the land of the waking.  You sometimes wonder which is preferable." 
      graphic = "d13"
      {on_command {
         : match "t _; turn around; around _" {
            : goto "d2";
            : redescribe;
            }
         : if (is_go_right || is_go_left) {
            : print "You can't go that way.  Type LOOK while in your Dream to list the possible exits.";
            : done;
            }
         : match "south -; out-; f _; go forward" {
            : if (from_pipe) {
               : print "The tunnel narrows down, fusing into the sewer pipe you entered.  You get down on your hands and knees and crawl back out, blinking the bright light away.";
               : press_any_key;
               : set_false "is_in_dungeon";
               : set_theme "main_theme";
               : set_false "from_pipe";
               : set_true "has_been_in_sewer";
               : goto "sewer";
               : redescribe;               
               }
            : else {   
               : print "You toss and turn for a bit, and slowly your eyes open to another morning.";
               : press_any_key;
               : set_false "is_in_dungeon";
               : set_theme "main_theme";
               : goto "bedroom_3";
               : redescribe;
               }
            }
         }
      };
      
   d14 : location "{d14_descr}"
      graphic = "d14"
      {on_command {
         : match "empty bottle; throw water; douse lightning; pour water" {
            : if (is_carried "full_bottle") {
               : print "You pour the water out of the bottle onto the lightning, and the water evaporates with a hiss.  Your bottle is empty again, but maybe that can be useful?";
               : destroy "full_bottle";
               : pocket "glass_bottle";
               : done;
            }
         }
         : match "bottle lightning" {
            : if (is_carried "glass_bottle" || is_carried "full_bottle") {
              : set_sentence "take lightning";
              }
          }
         : match "throw bottle" {
            : if (is_carried "glass_bottle" || is_carried "full_bottle") {
              : set_sentence "take lightning";
              }
          }
         : match "put lightning" {
            : if (is_carried "glass_bottle" || is_carried "full_bottle") {
              : set_sentence "take lightning";
              }
          }
         : match "f _; go forward" {
            : if (destroyed_lightning) {
               : goto "d5";
               : redescribe;
               }
            : else {
               : print "You're not certain about how electricity works, but you're pretty sure you shouldn't walk directly through it.";
               }
            }
         : match "t _; turn around; around _" {
            : goto "d10";
            : redescribe;
            }
         : if (is_go_right || is_go_left) {
            : print "You can't go that way.  Type LOOK while in your Dream to list the possible exits.";
            : done;
            }
         : match "take lightning; catch lightning; put lightning; fill bottle; open bottle; fill lightning; capture lightning" {
            : if (is_carried "glass_bottle") {
               : print "Uff.  Sure, what could go wrong by trying something potentially lethal in a Dream?  But you uncork the bottle and swing it at the lightning bolt.  Miraculously, the lightning seems to swirl and shrink as it enters the top of the bottle until it becomes weaker than candle flame.  You can now go forward.\n(Your score has gone up by two points.)";
               : add var = "score" value = "2";
               : swap o1 = "glass_bottle" o2 = "lightning_bottle";
//               : create "cork" target = "lightning_bottle";
               : destroy "lightning";
               : set_true "destroyed_lightning";
               : set_string var = "d14_descr" {("Exits: Forward, turn around")};
               : set_graphic graphic = "d14orig" target = "d14" immediate = "true";
               : done;
               }
            : else_if (is_carried "full_bottle") {
               : print "Uff.  Sure, what could go wrong by trying something potentially lethal in a Dream?  But you uncork the bottle, dump about half of the water out, then swing it at the lightning bolt.  Miraculously, the lightning hisses as the water evaporates, and it swirls and shrinks in the bottle until it becomes weaker than candle flame.  You can now go forward.\n(Your score has gone up by two points.)";
               : add var = "score" value = "2";
               : swap o1 = "full_bottle" o2 = "lightning_bottle";
               : set_true "destroyed_lightning";
               : destroy "lightning";
               : set_string var = "d14_descr" {("Exits: Forward, turn around")};
               : set_graphic graphic = "d14orig" target = "d14" immediate = "true";
               : done;
               }
            : else_if (is_worn "oven_mitts" && !is_carried "lightning_bottle") {
               : print "Even though you've got your oven mitts on, the lightning is likely tens of thousands of degrees hotter than whatever they're rated for.  Maybe there's a way to contain it instead.";
               }
            : else {
               : if (!is_carried "lightning_bottle") {
                  : print "You know that trying to catch the lightning with your bare hands would be one of the lesser intelligent things you've tried.  Maybe there's a way to contain it instead?";
                  }
               }
            }
         }
      }
      
      
   d15 : location "Dummy exit";

   bedroom : location "You stand yet again in your bedroom with all its typical things.  The bed and its straw mattress.  The crinkled boar skin on the floor.  The windowpane made of smelted faerie wings.  Typical.   Your kitchen is to the west."
      graphic = "bed_small"
      header = "Your bedroom"
      {on_command {
         : match "n _; ne _; e _ ; se _; s_ ; sw _; nw _" {
            : print "You can only go west to the kitchen.";
            : done;
         }
         : match "sleep _; lie bed; lie down" {
            : print "You're not really tired.  Besides, you have to get to work.";
            }
         : match "x wings; x faerie" {
            : print "The window shimmers with iridescence.";
            }
         : match "take wings; take faerie" {
            : print "You can't take the window.";
            : done;
            }
         : match "x kitchen" {
            : print "Your kitchen is to the west.";
         }
         : match "leave _; out _; go kitchen; enter _" {
            : print "Type WEST to go to the kitchen.";
            }
         : match "open door" {
            : print "There's no door to open.  Just type WEST to go to the kitchen.";
            }
         : match "close door; x frame" {
            : print "There's no door, just a frame between your room and the kitchen.";
            : done;
            }
         : match "talk mother; call mother" {
            : print "She's in the kitchen.  You'll have to go there to talk to her.";
            }
         : match "west _" {
            : if (!is_worn "nametag") {
               : if (!nametag_warn) {
                  : print "You need to find your stupid nametag before you leave.  Did you fall asleep with it on again?";
                  : set_true var = "nametag_warn";
                  }
               : else {
                  : print "Yeah, you really need your nametag.  The Boss is pretty insistent about that.  You should probably check your bed.";
                  }
               }
            }
         }
      }
   
   kitchen : location "Your kitchen is nice enough, you guess.  It's got a stove and a sink and a microwave where you heat up your frozen rat burritos.  Your bedroom is to the east, and you can exit your house.\nYour mother is here, cooking something in a cauldron on the stove."
      graphic = "kitchen"
      header = " Kitchen"
      {
      on_tick {
         : if (!verb_is "talk") {
         : cycle key = "kitchen_events" predictable_order = "true" skip_interval = "1"  {
            : print "Your mother stirs whatever she's making." ;
            : print "\"Too bad we're out of newt legs,\" your mother says to herself." ;
            : print "Your mother rummages around the cabinets for a newt leg substitute." ;
            : print "Your mother sprinkles some insect eyes into whatever she's cooking on the cauldron." ;
            : print "Your mother dips a ladle into the cauldron, then samples whatever's in it.  She seems reasonably satisfied.";
            : print "Your mother hums a sea shanty as she stirs the cauldron.";
            : print "\"Sailing the seas of blood, right before the flood,\" your mother sings.  Your mother can be pretty weird sometimes.";
            : print "Your mother scrutinizes whatever's in the cauldron.";
            : print "Your mother adjusts the heat on the stove just a bit.";
            : print "Your mother reaches for a jar of dehydrated bat wings, but then doesn't open it. She sets the jar back down.";
            : print "Your mother rinses her ladle in the sink.";
            : print "Your mother dips the clean ladle back into the cauldron. She removes it, blows on whatever's she's pulled out, and tastes it. She seems less satisfied than before.";
            }
         }
      }
      on_command {
         : match "n _; s _; in _; go bedroom; go bed; w _; ne _; nw _; se _; sw _" {
            : print "Type EXIT to leave your house or EAST to go back to your bedroom.";
            }

         : match "taste cauldron; taste ladle; taste soup; x food; taste food" {
            : print "Whatever's in the cauldron is boiling and not ready to eat.";
            }
      
         : match "x counter; x countertop" {
            : print "A basic counter with a sink set in it.";
            }
         : match "give _" {
            : print "Try TALK TO MOTHER instead.";
            }
         : match "eat _; eat *" {
            : print "Whatever your mother is making isn't ready, and you're not hungry for anything else.";
            }
         : match "leave _; go outside" {
            : goto "house";
            : redescribe;
            }
         : match "take mother" {
            : print "You have little interest in having your mother fight your battles for you, figuratively as well as literally.";
            }
         : match "take ladle; take ladel" {
            : print "Your mother is using it and you have no use for it.";
            }
         : match "open cabinets" {
            : print "There's nothing you need in them.  It's probably better to stay out of your mother's way.";
            }
         : match "empty cauldron" {
            : print "Your mother's cooking something in it, and whatever's in it isn't ready to it.";
            }
         : match "fill cauldron" {
            : print "You don't have time to help your mother cook right now.";
            }
         : match "take jars; take jar" {
            : print "You have little interest in cooking.";
            : done;
         }
         : match "open jars; open jar" {
            : print "There's nothing in them you need.";
            : done;
         }
         : match "x oven" {
            : print "A basic oven painted with white enamel.";
         }
         : match "put *" {
            : if (noun2_is "cauldron" && s1() != "unknown" && is_present {(s1())}) {
               : print "Your mother's the one doing the cooking right now, and you're fairly positive that wouldn't help.";
               }
            : else_if (s1() == "unknown") {
               : print {(sys(1740))};
               : done;
            }
            }
         }
   }
   
   house_2 : location "Home again, home again, after another great day doing fieldwork.  Finally, you can go back inside."
      graphic = "house"
      header = "Outside your house"
      {on_command {
         : match "open door" {
            : print "Type ENTER or IN to go inside your house.";
         }
         : match "x *" {
            : print "You're not really interested in looking at things right now.";
            : done;
            }
         }
      }
      
   kitchen_2 : location "Your mother seems to be gone.  Maybe she works again tonight?  Your schedules often conflict and it can be hard to keep them straight.  Your bedroom is to the east."
      graphic = "kitchen"
      header = "Kitchen"
      {on_command {
         : match "x *" {
            : print "You're pretty sure whatever was here earlier is still here.  You're not really interested in looking around right now.";
            : done;
            }
         : match "take *" {
            : print "You're pretty tired.  There's nothing here you want right now.";
            : done;
            }
         }
      }
 
   kitchen_4 : location "Who knew being a successful monster was so exhausting.  Your bedroom is to the east."
      graphic = "kitchen"
      header = "Kitchen"
      {on_command {
         : match "x *" {
            : print "You're pretty sure whatever was here earlier is still here.  You're not really interested in looking around right now.";
            : done;
            }
         : match "take *" {
            : print "You're pretty tired.  There's nothing here you want right now.";
            : done;
            }
         }
      }
   
   bedroom_4 : location "{bed_4_descr}"
      graphic = "bed_small"
      header = "Your bedroom"
      {on_command {
         : match "sleep -; sleep *; go *; wait -; wait *; lie bed; lie down" {
            : set_integer var = "final_sleep_count" {(final_sleep_count + 1)};
            : if (wrong_way_count == 0) {
               : append "You lie down, grateful for someplace soft.  ";
            }
            : print "\"Night night, wonderful son.  Sleep well,\" you hear your mother say, either in your last moment of being awake or your first moment of being asleep.";
            : if (final_sleep_count == 3) {
               : print "(That's kind of weird, though.  Loving as she is, she usually doesn't say things like that.)";
               }
            : if (final_sleep_count == 4) {
               : print "(There's something ... matter-of-fact about your voice, you guess.)";
               }
            : if (final_sleep_count == 5) {
               : print "(Is she trying to tell you something?  Warn you about something?)";
               }
            : if (final_sleep_count == 6) {
               : print "(Is she using the words as code again?)";
               }
            : press_any_key;
            : set_string var = "dungeon_header" {("Dungeon")};
            : set_theme "dungeon_theme";
            : goto "final_1";
            : set_true "is_in_dungeon";
            : set_true "is_final";
            : set_string var = "bed_4_descr" {("Maybe it's just the exhaustion.")};
            : redescribe;
            }
         : match "* -" {
            : print "The only thing you want to do right now is go to sleep.";
            : done;
            }
         : match "* *" {
            : print "The only thing you want to do right now is go to sleep.";
            : done;
            }
         }
      }
   
   bedroom_2 : location "Finally.  Time for some sleep."
      graphic = "bed_small"
      header = "Your bedroom"
      {on_command {
         : match "sleep -; sleep *; go *; wait -; wait *; lie bed; lie down" {
            : add var = "score" value = "2";
            : print "Well, the only good thing about being an employee of a subsidiary of the Dream Factory is that you get your own Dream free of charge.  Never mind that it's just the small freebie Dream they give away to entice prospective customers.  Most other orcs aren't so lucky, you know, and this dungeon is better than your old, regular dreams, which were mostly about rank earth and root vegetables.\n(Your score has gone up by two points.)";
            : press_any_key;
            : create "barrow" target = "house_3";
            : create "handles" target = "house_3";
            : create "sink" target = "kitchen_3";
            : create "microwave" target = "kitchen_3";
            : create "stove" target = "kitchen_3";
            : create "refrigerator" target = "kitchen_3";
            : create "cabinets" target = "kitchen_3";
            : create "sign" target = "office_2";
            : create "roof" target = "office_2";
            : create "office" target = "reception_2";
            : create "computer" target = "reception_2";
            : create "jonathan" target = "reception_2";
            : create "cloak" target = "reception_2";
            : if (!is_carried "brochure") {
               : create "brochure" target = "office_2";
               }
            : if (!is_carried "club") {
               : create "club" target = "bedroom_3";
               }
            : set_theme "dungeon_theme";
            : goto "d1";
            : set_true "is_in_dungeon";
            : redescribe;
            }
         : match "* -" {
            : print "The only thing you want to do right now is go to sleep.";
            : done;
            }
         : match "* *" {
            : print "The only thing you want to do right now is go to sleep.";
            : done;
            }
         }
      }
   
   house : location "Your house could pass for quaintly suburban, save for the fact you live on land bordered by farms and forest, five miles away from the nearest village, far enough away that the cosmopolitan elves and gnomes never have to think about you.  You can enter your house, and the road that leads into the forest is to the west."
      graphic = "house"
      header = "Outside your house"
      {on_command {
         : match "x door; open door" {
               : print "Type ENTER or IN to go inside your house.";
               }
         : match "x wheel" {
            : if (has_not_created "wheel") {
               : print "It's about the size of a dinner plate and has a bunch of wooden spokes emanating from its hub.  It still seems sturdy, despite its age.";
               }
            }
         : match "take wheel" {
            : if (has_not_created "wheel") {
               : print "You take the wheel.";
               : pocket "wheel";
               : done;
               }
            }
         }
      }
   
   road : location "It's the same trodden road you travel every day to work.  (Never mind that you get lost nearly every day as well.  It's like someone keeps rearranging things.)  The main path leads west, though other paths lead other directions.  Your house is to the east."
      graphic = "road"
      header = " Road"
      {on_command{
         : match "n _; s _" {
            : gosub "wrong_way";
            }
         : match "e _" {
            : goto "house";
            : redescribe;
            }
         : match "talk _; call _; say _; x mother" {
            : if (noun1_is "mother") {
               : print "You call to your mother but get no response.  She must have gone back inside.";
               }
            }
         }
      }
   
   path_2 : location "It's autumn.  The leaves are starting to fall like ... like a simile, you think to yourself.  Maybe you should have paid more attention in Orcish class.  The path curves ahead, and there are side routes in other directions."
      graphic = "path_2"
      header = " Autumn road"
      {on_command {
         : match "w _ ; e _ ; n _ " {
            : gosub "wrong_way";
            }
         }
      }
      
   path_3 : location "Of course, that means things are starting to die, too.  You give a little rueful laugh at that thought."
      graphic = "path_10"
      header = "The rueful season"
      {on_command {
         : match "w _ ; s _ ; n _ " {
            : gosub "wrong_way";
            }
         }
      }
   
   path_4 : location "The path begins to narrow, and it is strewn with yellow leaves.  Again, various trails crisscross here, and you could follow any of them."
      graphic = "path_7"
      header = "A narrow path"
      {on_command {
         : match "w _ ; s _ ; n _ " {
            : gosub "wrong_way";
            }
         }
      }
   
   path_5 : location "More leaves, but the forest is greener here.  It's weird how things change, you guess."
      graphic = "path_3"
      header = "Mostly green"
      {on_command {
         : match "w _ ; e _ ; n _ " {
            : gosub "wrong_way";
            }
         }
      }      
   
   path_6 : location "You're glad your mother's directions seem to be making sense.  It should be pretty easy to follow the rest of them through the woods."
      graphic = "path_4"
      header = "The clearer path";
   
   path_7 : location "And the walk is quite pretty.  You suppose you should appreciate that."
      graphic = "path_5"
      header = "Pretty paths";

   path_8 : location "It looks kind of like Minnesota."
      graphic = "path_8"
      header = "Minnesota";
   
   path_9 : location "And you've learned about the orc-named towns up there:  Bemidji and Wayzata and whatever."
      graphic = "path_13"
      header = "Orcish Minnesota";
   
   path_10 : location "Of course, you could have done without the hours you were forced to spend with your aunt looking at the photo album from her trip to Duluth."
      graphic = "path_9"
      header = "Duluth";
   
   path_11 : location "Here the path widens again, bidding you exit with another flourish of yellow trees."
      graphic = "path_11"
      header = "A widening path";
   
   clearing : location "Still, ugh.  Who designs a forest like a maze?  Anyway, you've finally found the clearing--your hallowed place of work for another day of making a fool of yourself for the benefit of adventurers.  Not much to do here other than wait for someone to show up."
      graphic = "clearing"
      header = "Clearing";

   clearing_lose : location "The clearing looks pretty much like it did a few hours ago, save for some extra blood on the ground."
      graphic = "clearing"
      header = "Clearing";
      
   office_ext : location "You're outside the local MEI office in a still-green part of the forest.  It's a log-cabin affair (\"You have to sell the dream,\" the Boss says) with a sign hanging from its roof.  Guess you'll have to go in."
      graphic = "office"
      header = "MEI office"
      {on_command {
         : match "open door; x door" {
            : if (battle_number < 5) {
               : print "Type ENTER to enter the office.";
               }
            }
         : match "take office;take building;take log;take cabin" {
            : print "You attempt to lift up the building from its southeast corner.  It doesn't move.";
            : done;
            }
         : match "x office;x building;x log;x cabin" {
            : print "A midtown skyscraper it ain't.";
            }
         }
      }
  
   office_ext_2 : location "You know, this started out as such a good day.  You got to see your mother.  Even the walk through the woods was pretty.  And now you just want to go home and go to bed.  Fortunately, the road that way is a much straighter path to the east."
      graphic = "office"
      header = "MEI office"
      {on_command {
         :match "enter -" {
            : print "You have neither reason nor desire to go back into that office.";
            }
         : match "x office;x building;x log;x cabin" {
            : print "A midtown skyscraper it ain't.";
            }
         : match "take office;take building;take log;take cabin" {
            : print "You attempt to lift up the building from its southeast corner.  It doesn't move.";
            : done;
            }
         }
      }
      
   reception_2 : location "The interior of the MEI office is still dim as ever.  Jonathan sees you enter, gives a brief nod of acknowledgment, and then returns to his computer.  You can exit the office."
      graphic = "john"
      header = "MEI reception: Jonathan"
      {on_command {
         : match "take nameplate; take plate; take name" {
            : print "It is already abundantly obvious you are not the Boss.  You don't need a trinket to remind you of that fact.";
            : done;
            }
         : match "x nameplate; x plate; x name" {
            : print "The golden nameplate on the Boss's door shines in the gloam:  <J. WOCK<6>>.  You wonder what the J stands for.  Maybe Jennifer.  She seems like a Jennifer.";
            }
         : match "give _" {
            : print "Try TALK TO JONATHAN instead.";
            }
         : match "talk _;ask _;tell _;say _" {
            : gosub "jon_talk_3";
            }
         : match "north _;go north;x door;x boss;open door" {
            : if (!boss_out) {
               : print "The Boss's office door is closed and apparently locked.  \"Boss is gone, dude,\" Jonathan says as you approach it.  The golden nameplate on the door shines in the gloam:  <J. WOCK<6>>.  You wonder what the J stands for.  Maybe Jennifer.  She seems like a Jennifer.";
               : done;
               }
            : else {
               : print "The Boss's office door is closed and apparently locked.  \"Boss is gone, dude, like I already told you,\" Jonathan says as you approach it.  The golden nameplate on the door shines in the gloam:  <J. WOCK<6>>.  You wonder what the J stands for.  Maybe Jennifer.  She seems like a Jennifer.";
               : done;
               }
            }
         }
      }

   reception : location "{reception_descr}"
      graphic = "john"
      header = "MEI reception: Jonathan"
      {on_command {
         : match "give _" {
            : print "Try TALK TO JONATHAN instead.";
            }
         : if (!boss_over) {
            : match "open door; x door; go office; go boss" {
               : print "The Boss's office is to the north, and it's a place you rarely want to be.  You should probably talk to Jonathan first.";
            }
         }
         : if (boss_over) {
            : match "exit -" {
               : goto "office_ext_2";
               : redescribe;
               }
            : match "open door;x door" {
               : print "The door to the Boss's office is to the north.  You've already learned her office is a place you don't want to be.  You're glad it's closed.";
            }
         }
      }}
            
      
   boss_office : location "You've only been on the job for a week and you already know this isn't a good place to be.  The Boss stands upon your arrival, her hands and wings perfectly poised."
      graphic = "boss"
      header = "The Boss's office"
      {on_command {
         : match "x office" {
            : print "It's dim like the rest of the building.  You presume there's typical things likes desks and fake ficuses and whatnot, but right now the Boss is pretty much staring you down, so you're not inclined to investigate further.";
            }
         : match "give _" {
            : print "You don't want to give her anything.  You should just TALK TO her and get this over with.";
            }
         }
      }
   
   death_2 : location "Dead again.  You'll have to wait for the reanimator to do its work."
         {on_command {
            : match "wait _; wake _; awaken _; live _" {
               :print "It's a familiar routine by now--the reanimator still warm, your gold gone.  The part where you should go to MEI to get more gold is familiar, too.";
               :press_any_key;
               :goto "clearing_2";
               :redescribe;
               :done;
               }
            : match "* -" {
               :print "The reanimator is presumably doing its work.  The only thing you can do is wait.";
               :done;
               }
            : match "* *" {
               :print "The reanimator is presumably doing its work.  The only thing you can do is wait.";
               :done;
               }
            }
         graphic = "death";
         header = "Death";
         }

   
   death : location "Yeah, you've been here before, the blotches of purple and red familiar by now.  Dead.  A goner.  Done-zo.  Gyring and gimbling towards nothing.  It'll be a while.  Once again, there's nothing to do but wait." {
         on_command {
            : match "wait _; wake _; awaken _; live _" {
               :print "You're never sure how long it takes for the reanimator to kick in.  Judging from the way the sunlight's changed, it's probably two hours, if not more.  You check your belongings--the warrior took the gold, as expected.  Now you'll have to head to the Boss yet again for more.  The only place to go is to trudge north to the office.";
               :press_any_key;
               :goto "clearing_lose";
               :redescribe;
               :done;
               }
            : match "* -" {
               :print "The reanimator is presumably doing its work.  The only thing you can do is wait.";
               :done;
               }
            : match "* *" {
               :print "The reanimator is presumably doing its work.  The only thing you can do is wait.";
               :done;
               }
            }
         graphic = "death";
         header = "Death";
         }

   bossbattle : location "{bossbattle_descr}"
      graphic = "boss_alter_2"
      {on_command {
         : if (is_attack) {
            : set_false "is_wit";
            : set_false "is_club";
            : set_false "is_stand";
            : set_false "is_demand";
            : set_false "is_wheel";
            : if (is_holding "club") { 
               : add_choice "Swing with your club." {
               : set_true "is_club";
               : gosub "boss_fight";
               }
            }
            : if (is_holding "wheel") {
               : add_choice "Hurl the wheel at her." {
               : set_true "is_wheel";
               : gosub "boss_fight";
                  }
               }
            : add_choice "Demand some answers." {
            : set_true "is_demand";
            : gosub "boss_fight";
            }
            : add_choice "Say something to try to hurt her." {
            : set_true "is_wit";
            : gosub "boss_fight";
            }
            : add_choice "Never mind. Just stand there." {
            : set_true "is_stand";
            : gosub "boss_fight";
            }
         : choose "How will you attack?";
         : done;
         }
 
         : match "parry _;p _" {
            : set_false "is_arms";
            : set_false "is_wheel";
            : set_false "is_stand";
            : set_false "is_mitts";
            : set_false "is_wit";
            : set_false "is_club";
            : set_false "is_demand";
            : if (!is_worn "oven_mitts") {
            :  add_choice "With your stupid orc arms." {
            :  set_true "is_arms";
            :  gosub "boss_parry";
               }
            }
            : if (is_worn "oven_mitts") {
            :  add_choice "With your ridiculous oven mitts." {
            :  set_true "is_mitts";
            :  gosub "boss_parry";
               }
            }
            : if (is_holding "wheel") { 
               : add_choice "Try to use the wheel as a shield, at least." {
               : set_true "is_wheel";
               : gosub "boss_parry";
               }
            }
            : add_choice "Just stand there." {
            : set_true "is_stand";
            : gosub "boss_fight";
            }
         : choose "How will you parry?";
         : done;
         }
   
         : match "spell _;s _" {
            : if (has_spells) {
               : set_false "is_wax";
               : set_false "is_robe";
               : set_false "is_whip";
               : set_false "is_cabbage";
               : set_false "is_walk";
               : if (has_wax) {
                  : add_choice "<WAX LIPS<#r>>" {
                     : set_true "is_wax";
                     : gosub "boss_spell";
                     }
                  }
               : if (has_robe) {
                  : add_choice "<ROYAL ROBE<#r>>" {
                     : set_true "is_robe";
                     : gosub "boss_spell";
                     }
                  }
               : if (has_whip) {
                  : add_choice "<WATER WHIP<#r>>" {
                     : set_true "is_whip";
                     : gosub "boss_spell";
                     }
                  }
               : if (has_cabbage) {
                  : add_choice "<CABBAGE CLOUD<#r>>" {
                     : set_true "is_cabbage";
                     : gosub "boss_spell";
                     }
                  }
               : if (has_walk) {
                  : add_choice "<SLOW WALK<#r>>" {
                     : set_true "is_walk";
                     : gosub "boss_spell";
                     }
                  }
               : choose "What spell will you cast?";
               : done;
               }
            : else {
               : print "{you_can_only}";
               : done;
               }
            }
   
   
         : match "* *" {
         : print "{you_can_only}";
         : done;
         }
      
         : match "* -" {
         : print "{you_can_only}";
         : done;
         }
         } 
         }


   clockbattle : location "\nThe gnome hops around like an excited puppy, twirling a gold pocket watch on its fob around like a lasso.\nYou can ATTACK, PARRY, or cast a SPELL (A, P, or S)."
      graphic = "clock"
      header = "Gnome battle"
      {on_command {
         : if (is_attack) {
            : set_false "is_wit";
            : set_false "is_club";
            : set_false "is_stand";
            : if (is_holding "club") { 
               : add_choice "Swing with your club." {
               : set_true "is_club";
               : gosub "clock_fight";
               }
            }
            : add_choice "Use your razor-sharp wit." {
            : set_true "is_wit";
            : gosub "clock_fight";
            }
            : add_choice "Never mind. Just stand there." {
            : set_true "is_stand";
            : gosub "clock_fight";
            }
         : choose "How will you attack?";
         : done;
         }
 
         : match "parry _;p _" {
            : set_false "is_arms";
            : set_false "is_wheel";
            : set_false "is_stand";
            : set_false "is_mitts";
            : set_false "is_wit";
            : set_false "is_club";
            : if (!is_worn "oven_mitts") {
            :  add_choice "With your stupid orc arms." {
            :  set_true "is_arms";
            :  gosub "clock_parry";
               }
            }
            : if (is_worn "oven_mitts") {
            :  add_choice "With your ridiculous oven mitts." {
            :  set_true "is_mitts";
            :  gosub "clock_parry";
               }
            }
            : if (is_holding "wheel") { 
               : add_choice "Try to use the wheel as a shield, at least." {
               : set_true "is_wheel";
               : gosub "clock_parry";
               }
            }
            : add_choice "Just stand there." {
            : set_true "is_stand";
            : gosub "clock_fight";
            }
         : choose "How will you parry?";
         : done;
         }
   
         : match "spell _;s _" {
            : if (has_spells) {
               : set_false "is_wax";
               : set_false "is_robe";
               : set_false "is_whip";
               : set_false "is_cabbage";
               : set_false "is_walk";
               : if (has_wax) {
                  : add_choice "<WAX LIPS<#r>>" {
                     : set_true "is_wax";
                     : gosub "clock_spell";
                     }
                  }
               : if (has_robe) {
                  : add_choice "<ROYAL ROBE<#r>>" {
                     : set_true "is_robe";
                     : gosub "clock_spell";
                     }
                  }
               : if (has_whip) {
                  : add_choice "<WATER WHIP<#r>>" {
                     : set_true "is_whip";
                     : gosub "clock_spell";
                     }
                  }
               : if (has_cabbage) {
                  : add_choice "<CABBAGE CLOUD<#r>>" {
                     : set_true "is_cabbage";
                     : gosub "clock_spell";
                     }
                  }
               : if (has_walk) {
                  : add_choice "<SLOW WALK<#r>>" {
                     : set_true "is_walk";
                     : gosub "clock_spell";
                     }
                  }
               : choose "What spell will you cast?";
               : done;
               }
            : else {
               : print "{you_can_only}";
               : done;
               }
            }
   
   
         : match "* *" {
         : print "{you_can_only}";
         : done;
         }
      
         : match "* -" {
         : print "{you_can_only}";
         : done;
         }
         } 
         }

   psionbattle : location "\nThe black angel things or whatever they are flap their wings menacingly.\nYou can ATTACK, PARRY, or cast a SPELL (A, P, or S)."
      graphic = "psions"
      header = "Psion battle"
      {on_command {
         : if (is_attack) {
            : set_false "is_wit";
            : set_false "is_club";
            : set_false "is_stand";
            : if (is_holding "club") { 
               : add_choice "Swing with your club." {
               : set_true "is_club";
               : gosub "psion_fight";
               }
            }
            : add_choice "Use your razor-sharp wit." {
            : set_true "is_wit";
            : gosub "psion_fight";
            }
            : add_choice "Never mind. Just stand there." {
            : set_true "is_stand";
            : gosub "psion_fight";
            }
         : choose "How will you attack?";
         : done;
         }
 
         : match "parry _;p _" {
            : set_false "is_arms";
            : set_false "is_wheel";
            : set_false "is_stand";
            : set_false "is_mitts";
            : set_false "is_wit";
            : set_false "is_club";
            : if (!is_worn "oven_mitts") {
            :  add_choice "With your stupid orc arms." {
            :  set_true "is_arms";
            :  gosub "psion_parry";
               }
            }
            : if (is_worn "oven_mitts") {
            :  add_choice "With your ridiculous oven mitts." {
            :  set_true "is_mitts";
            :  gosub "psion_parry";
               }
            }
            : if (is_holding "wheel") { 
               : add_choice "Try to use the wheel as a shield, at least." {
               : set_true "is_wheel";
               : gosub "psion_parry";
               }
            }
            : add_choice "Just stand there." {
            : set_true "is_stand";
            : gosub "psion_fight";
            }
         : choose "How will you parry?";
         : done;
         }
   
         : match "spell _;s _" {
            : if (has_spells) {
               : set_false "is_wax";
               : set_false "is_robe";
               : set_false "is_whip";
               : set_false "is_cabbage";
               : set_false "is_walk";
               : if (has_wax) {
                  : add_choice "<WAX LIPS<#r>>" {
                     : set_true "is_wax";
                     : gosub "psion_spell";
                     }
                  }
               : if (has_robe) {
                  : add_choice "<ROYAL ROBE<#r>>" {
                     : set_true "is_robe";
                     : gosub "psion_spell";
                     }
                  }
               : if (has_whip) {
                  : add_choice "<WATER WHIP<#r>>" {
                     : set_true "is_whip";
                     : gosub "psion_spell";
                     }
                  }
               : if (has_cabbage) {
                  : add_choice "<CABBAGE CLOUD<#r>>" {
                     : set_true "is_cabbage";
                     : gosub "psion_spell";
                     }
                  }
               : if (has_walk) {
                  : add_choice "<SLOW WALK<#r>>" {
                     : set_true "is_walk";
                     : gosub "psion_spell";
                     }
                  }
               : choose "What spell will you cast?";
               : done;
               }
            : else {
               : print "{you_can_only}";
               : done;
               }
            }
   
   
         : match "* *" {
         : print "{you_can_only}";
         : done;
         }
      
         : match "* -" {
         : print "{you_can_only}";
         : done;
         }
         } 
         }

   magebattle : location "\nThe mage clears her throat, ready to cast some spells.\nYou can ATTACK, PARRY, or cast a SPELL (A, P, or S)."
      graphic = "mage"
      header = "Mage battle"
      {on_command {
         : if (is_attack) {
            : set_false "is_wit";
            : set_false "is_club";
            : set_false "is_stand";
            : if (is_holding "club") { 
               : add_choice "Swing with your club." {
               : set_true "is_club";
               : gosub "mage_fight";
               }
            }
            : add_choice "Use your razor-sharp wit." {
            : set_true "is_wit";
            : gosub "mage_fight";
            }
            : add_choice "Never mind. Just stand there." {
            : set_true "is_stand";
            : gosub "mage_fight";
            }
         : choose "How will you attack?";
         : done;
         }
 
         : match "parry _;p _" {
            : set_false "is_arms";
            : set_false "is_wheel";
            : set_false "is_stand";
            : set_false "is_mitts";
            : set_false "is_wit";
            : set_false "is_club";
            : if (!is_worn "oven_mitts") {
            :  add_choice "With your stupid orc arms." {
            :  set_true "is_arms";
            :  gosub "mage_parry";
               }
            }
            : if (is_worn "oven_mitts") {
            :  add_choice "With your ridiculous oven mitts." {
            :  set_true "is_mitts";
            :  gosub "mage_parry";
               }
            }
            : if (is_holding "wheel") { 
               : add_choice "Try to use the wheel as a shield, at least." {
               : set_true "is_wheel";
               : gosub "mage_parry";
               }
            }
            : add_choice "Just stand there." {
            : set_true "is_stand";
            : gosub "mage_fight";
            }
         : choose "How will you parry?";
         : done;
         }
   
         : match "spell _;s _" {
            : if (has_spells) {
               : set_false "is_wax";
               : set_false "is_robe";
               : set_false "is_whip";
               : set_false "is_cabbage";
               : set_false "is_walk";
               : if (has_wax) {
                  : add_choice "<WAX LIPS<#r>>" {
                     : set_true "is_wax";
                     : gosub "mage_spell";
                     }
                  }
               : if (has_robe) {
                  : add_choice "<ROYAL ROBE<#r>>" {
                     : set_true "is_robe";
                     : gosub "mage_spell";
                     }
                  }
               : if (has_whip) {
                  : add_choice "<WATER WHIP<#r>>" {
                     : set_true "is_whip";
                     : gosub "mage_spell";
                     }
                  }
               : if (has_cabbage) {
                  : add_choice "<CABBAGE CLOUD<#r>>" {
                     : set_true "is_cabbage";
                     : gosub "mage_spell";
                     }
                  }
               : if (has_walk) {
                  : add_choice "<SLOW WALK<#r>>" {
                     : set_true "is_walk";
                     : gosub "mage_spell";
                     }
                  }
               : choose "What spell will you cast?";
               : done;
               }
            : else {
               : print "{you_can_only}";
               : done;
               }
            }
   
   
         : match "* *" {
         : print "{you_can_only}";
         : done;
         }
      
         : match "* -" {
         : print "{you_can_only}";
         : done;
         }
         } 
         }


   demonbattle : location "\nSwirling fire begins to form at the demons' fingertips.\nYou can ATTACK, PARRY, or cast a SPELL (A, P, or S)."
      graphic = "demons"
      header = "Demon battle"
{on_command {
         : if (is_attack) {
            : set_false "is_wit";
            : set_false "is_club";
            : set_false "is_stand";
            : if (is_holding "club") { 
               : add_choice "Swing with your club." {
               : set_true "is_club";
               : gosub "demon_fight";
               }
            }
            : add_choice "Use your razor-sharp wit." {
            : set_true "is_wit";
            : gosub "demon_fight";
            }
            : add_choice "Never mind. Just stand there." {
            : set_true "is_stand";
            : gosub "demon_fight";
            }
         : choose "How will you attack?";
         : done;
         }
 
         : match "parry _;p _" {
            : set_false "is_arms";
            : set_false "is_wheel";
            : set_false "is_stand";
            : set_false "is_mitts";
            : set_false "is_wit";
            : set_false "is_club";
            : if (!is_worn "oven_mitts") {
            :  add_choice "With your stupid orc arms." {
            :  set_true "is_arms";
            :  gosub "demon_parry";
               }
            }
            : if (is_worn "oven_mitts") {
            :  add_choice "With your ridiculous oven mitts." {
            :  set_true "is_mitts";
            :  gosub "demon_parry";
               }
            }
            : if (is_holding "wheel") { 
               : add_choice "Try to use the wheel as a shield, at least." {
               : set_true "is_wheel";
               : gosub "demon_parry";
               }
            }
            : add_choice "Just stand there." {
            : set_true "is_stand";
            : gosub "demon_fight";
            }
         : choose "How will you parry?";
         : done;
         }
   
         : match "spell _;s _" {
            : if (has_spells) {
               : set_false "is_wax";
               : set_false "is_robe";
               : set_false "is_whip";
               : set_false "is_cabbage";
               : set_false "is_walk";
               : if (has_wax) {
                  : add_choice "<WAX LIPS<#r>>" {
                     : set_true "is_wax";
                     : gosub "demon_spell";
                     }
                  }
               : if (has_robe) {
                  : add_choice "<ROYAL ROBE<#r>>" {
                     : set_true "is_robe";
                     : gosub "demon_spell";
                     }
                  }
               : if (has_whip) {
                  : add_choice "<WATER WHIP<#r>>" {
                     : set_true "is_whip";
                     : gosub "demon_spell";
                     }
                  }
               : if (has_cabbage) {
                  : add_choice "<CABBAGE CLOUD<#r>>" {
                     : set_true "is_cabbage";
                     : gosub "demon_spell";
                     }
                  }
               : if (has_walk) {
                  : add_choice "<SLOW WALK<#r>>" {
                     : set_true "is_walk";
                     : gosub "demon_spell";
                     }
                  }
               : choose "What spell will you cast?";
               : done;
               }
            : else {
               : print "{you_can_only}";
               : done;
               }
            }
   
   
         : match "* *" {
         : print "{you_can_only}";
         : done;
         }
      
         : match "* -" {
         : print "{you_can_only}";
         : done;
         }
         } 
         }
  

         
   warriorbattle_2 : location "{warrior_battle_descr}"
      graphic = "warrior"
      header = "Warrior battle"
      {on_command {
         : if (is_attack) {
            : set_false "is_wit";
            : set_false "is_club";
            : set_false "is_stand";
            : if (is_holding "club") { 
               : add_choice "Swing with your club." {
               : set_true "is_club";
               : gosub "warrior_fight_2";
               }
            }
            : add_choice "Use your razor-sharp wit." {
            : set_true "is_wit";
            : gosub "warrior_fight_2";
            }
            : add_choice "Never mind. Just stand there." {
            : set_true "is_stand";
            : gosub "warrior_fight_2";
            }
         : choose "How will you attack?";
         : done;
         }
 
         : match "parry _;p _" {
            : set_false "is_arms";
            : set_false "is_wheel";
            : set_false "is_stand";
            : set_false "is_mitts";
            : set_false "is_wit";
            : set_false "is_club";
            : if (!is_worn "oven_mitts") {
            :  add_choice "With your stupid orc arms." {
            :  set_true "is_arms";
            :  gosub "warrior_parry_2";
               }
            }
            : if (is_worn "oven_mitts") {
            :  add_choice "With your ridiculous oven mitts." {
            :  set_true "is_mitts";
            :  gosub "warrior_parry_2";
               }
            }
            : if (is_holding "wheel") { 
               : add_choice "Try to use the wheel as a shield, at least." {
               : set_true "is_wheel";
               : gosub "warrior_parry_2";
               }
            }
            : add_choice "Just stand there." {
            : set_true "is_stand";
            : gosub "warrior_fight_2";
            }
         : choose "How will you parry?";
         : done;
         }
   
         : match "spell _;s _" {
            : if (has_spells) {
               : set_false "is_wax";
               : set_false "is_robe";
               : set_false "is_whip";
               : set_false "is_cabbage";
               : set_false "is_walk";
               : if (has_wax) {
                  : add_choice "<WAX LIPS<#r>>" {
                     : set_true "is_wax";
                     : gosub "warrior_spell_2";
                     }
                  }
               : if (has_robe) {
                  : add_choice "<ROYAL ROBE<#r>>" {
                     : set_true "is_robe";
                     : gosub "warrior_spell_2";
                     }
                  }
               : if (has_whip) {
                  : add_choice "<WATER WHIP<#r>>" {
                     : set_true "is_whip";
                     : gosub "warrior_spell_2";
                     }
                  }
               : if (has_cabbage) {
                  : add_choice "<CABBAGE CLOUD<#r>>" {
                     : set_true "is_cabbage";
                     : gosub "warrior_spell_2";
                     }
                  }
               : if (has_walk) {
                  : add_choice "<SLOW WALK<#r>>" {
                     : set_true "is_walk";
                     : gosub "warrior_spell_2";
                     }
                  }
               : choose "What spell will you cast?";
               : done;
               }
            : else {
               : print "{you_can_only}";
               : done;
               }
            }
   
   
         : match "* *" {
         : print "{you_can_only}";
         : done;
         }
      
         : match "* -" {
         : print "{you_can_only}";
         : done;
         }
         } 
         }
  
   warriorbattle : location "\nThe warrior readies her sword. \nYou can ATTACK or PARRY (A or P)." {
         on_command {
         
                  : if (is_attack) {
                     : set_false "is_wit";
                     : set_false "is_club";
                     : set_false "is_stand";
                     //: pocket "club";
                     : if (is_holding "club") { 
                        : add_choice "Swing with your club." {
                        : set_true "is_club";
                        : gosub "warrior_fight";
                        }
                     }

                     : add_choice "Use your razor-sharp wit." {
                     : set_true "is_wit";
                     : gosub "warrior_fight";
                     }

                     : add_choice "Never mind.  Just stand there." {
                     : set_true "is_stand";
                     : gosub "warrior_fight";
                      }

                  : choose "How will you attack?";
         
                  : done;
                  }
 
                  : match "parry _;p _" {
                     : set_false "is_arms";
                     : set_false "is_wheel";
                     : set_false "is_stand";
                     : set_false "is_mitts";
                     : set_false "is_wit";
                     : set_false "is_club";

                     : if (!is_worn "oven_mitts") {
                     :  add_choice "With your stupid orc arms." {
                     :  set_true "is_arms";
                     :  gosub "warrior_parry";
                        }
                     }

                     : if (is_worn "oven_mitts") {
                     :  add_choice "With your ridiculous oven mitts." {
                     :  set_true "is_mitts";
                     :  gosub "warrior_parry";
                        }
                     }

                     : if (is_holding "wheel") { 
                        : add_choice "Try to use the wheel as a shield, at least." {
                        : set_true "is_wheel";
                        : gosub "warrior_parry";
                        }
                     }

                     : add_choice "Just stand there." {
                     : set_true "is_stand";
                     : gosub "warrior_fight";
                     }

                  : choose "How will you parry?";
         
                  : done;
                  }
   
                  : match "* *" {
                  : print "You can only ATTACK or PARRY (A or P).";
                  : done;
                  }
      
                  : match "* -" {
                  : print "You can only ATTACK or PARRY (A or P).";
                  : done;
                  }
         }
      
      graphic = "warrior"
      header = "Warrior battle";}
}


#############################OBJECTS
####################################

objects {

//   cold_truck : scenery "the truck"
//      msg = "It's still incredibly unclear how he gets anywhere in it, of course."
//      at = "winter_truck"
//      listed = "false";

   puddle : scenery "a small puddle"
      msg = "A few damp places remain on the floor of your Dream here."
      listed = "false";

   crosspiece : scenery "a metal crosspiece"
      msg = "The crosspiece you stand upon is rusty and you're not sure how long it can bear your weight, but it seems firm enough for now."
      at = "windmill_top"
      listed = "false";

   orchard : scenery "the orchard"
      msg = "Mostly just gnarled, barren trees now."
      at = "southroad"
      listed = "false";

   swamp : scenery "the swamp"
      msg = "It's got cattails and mud and frogs and whatnot, and you've got no reason to visit it."
      at = "pond"
      listed = "false";

   roof : scenery "a roof"
      msg = "It looks like any other roof you've seen.  A sign hangs from it."
      at = "office_ext"
      listed = "false";

   handles : scenery "two handles"
      msg = "Old and wooden as well."
      at = "house"
      listed = "false";

   cabinets : scenery "some cabinets"
      msg = "The cabinets are wooden and plain.  The food you make with ingredients from within them is often wooden and plain, too."
      at = "kitchen"
      listed = "false";

   new_nametag : object "your nametag"
      msg = "This one just has your first name and a photo where you are approaching something that seems like a smile."
      //container_type = "surface"
      wearable = "true";

   //new_photo : object "you new photo"
   //         at = "new_nametag"
   //         wearable = "true"
   //         msg = "You think you actually look pretty good in this photo."
   //         listed = "false";

   thermos : object "a thermos full of toadstool soup"
      msg = "This soup is one of your favorites.  The thermos is warm to the touch.";

   desk : scenery "a huge desk"
      msg = "The huge desk is covered with some things you conceivably recognize and far more things you don't."
      at = "carroll"
      listed = "false";
      
   uncle_carroll : scenery "Uncle Carroll"
      msg = "Your uncle Carroll Lewis, too pretty of an orc to be a human and too ugly of a human to be an orc, has long been an outcast from the everyday world, instead choosing to work in his carriage house at the edge of the woods.  Most people say the world cast him out.  You're pretty sure he cast out the world.  You can TALK to him or GIVE something to him if you've got anything in which he'd be interested."
      at = "carroll"
      listed = "false";
      
   old_window : scenery "an old window"
      msg = "You're almost positive that whatever your uncle sees out the window is not the same as whatever you'd see out of it."
      at = "carroll"
      listed = "false";

   spell_scroll : object "a spell scroll";

   grating : scenery "a metal grating"
      msg = "It's made of iron, probably, and makes a latticework with crosspieces about an inch thick.  There gaps are four-inch squares.  There's no way you're getting past it."
      listed = "false";

   cracked_tire : scenery "a cracked tire"
      msg = "The original material of the seat must have rotted away.  Now the seat is some old spare tire still on its rim."
      at = "in_truck"
      listed = "false";

   ceiling_wax : object "a jar of ceiling wax"
      msg = "^c^^n^Prof. Dodgson's\n<PARA-FINE CEILING WAX<14>>\nMade from the latest hydro-carbons\n<\"Keeps your ceiling bright as day\"<6>>^m^";

   trees : scenery "some trees"
      msg = "Aspen?  Oak?  Maple?  You're never good with this naturist kind of stuff."
      at = "truck"
      listed = "false";
      
   leaves : scenery "some leaves"
      at = "truck"
      msg = "Some yellow, some orange, some brown."
      listed = "false";
      
   old_truck : scenery "an old truck"
      at = "truck"
      msg = "The truck's original color must have been a brilliant blue, but it's faded and in many places replaced with rust.  The tires are sunk deep into the ground.  Time or scavengers have strewn some of its parts around the general area.  Its windows, seats, chrome, and engine are gone, leaving it just a husk."
      listed = "false";
      
   glove_box : scenery "a glove box"
      at = "in_truck"
      msg = "There's a small compartment on the passenger side of the truck with a closed door that seems like it will soon rust off of its hinges.";

   history_book : object "a history book"
      at = "carroll";
   
   door : scenery "a locked door"
      msg = "It's locked tight.  There isn't even a keyhole on this side.  It must be locked from the inside."
      listed = "false";

   windows : scenery "some windows"
      msg = "There's nothing but darkness inside."
      listed = "false";

   computer : scenery "a computer"
      msg = "Jonathan sits behind a tall receptionist's desk.  He's working on a computer, but you can't really see or care about what's on it."
      at = "reception"
      listed = "false";

   clock_body : scenery "the gnome's body"
      msg = "Maybe it's his reanimator ticking.  Maybe it's some of his gears.  Maybe you couldn't care less.";

   psion_bodies : scenery "the angels' bodies"
      msg = "You try to listen to their thoughts, but it's just a crackling of broken synapses.";

   demon_bodies : scenery "the demons' bodies"
      msg = "Their reanimators hum and a sulfur smoke rises from their chests.";

   mage_body : scenery "the mage's body"
      msg = "Her reanimator beeps in a soft, fast pattern that almost sounds like an incantation.";

   warrior_body : scenery "the warrior's body"
      msg = "Her reanimator is really humming now, kind of like the spin cycle of a washing machine.  Now you know that's what it sounds like.  There's already surprisingly little blood."; 

   sewer_pipe : scenery "a large sewer pipe"
      at = "sewer"
      msg = "The pipe is huge--large enough to crawl into, you suppose.  The light disappears into it quickly.  Although it appears dry, unpleasant effluvia waft from inside.";

   lightning : scenery "a bolt of lightning"
      at = "d14"
      msg = "A single bolt of lightning snarls and zaps, casting wild shadows in this dim corridor.  It prevents your passage further east."
      listed = "false";

   slippers : object "a pair of ballet slippers"
      at = "windmill_top"
      msg = "This pair of slippers is made of pink satin and the soles hardly seem worn.  They're tied together with a simple white ribbon.  Why they were hanging fifty feet up a rickety windmill is yet another mystery in your life you feel confident you'll never solve.";

   cabbage : object "a head of cabbage"
      msg = "A fresh head of green cabbage.";

   planted_seeds : scenery "some planted cabbage seeds"
      msg = "These are the seeds you planted in the dirt.  The dirt is pretty dry, though.";

   weeds : scenery "some weeds"
      at = "farm"
      msg = "Maybe if you had paid attention during that one botany unit you had in school you could name some of them.  But you didn't and you can't."
      listed = "false";
      
   dirt : scenery "a patch of dirt"
      at = "farm"
      msg = "{dirt_descr}";

   windmill : scenery "a disused windmill"
      at = "farm"
      msg = "{windmill_descr}";

   vines : scenery "some vines"
      at = "farm"
      msg = "The vines are thin and brown at the bottom, but form a crown of orange leaves at the top."
      listed = "false";

   playing_card : object "the king of hearts"
      msg = "A typical playing card.  This one is the king of hearts, where a goblin king dressed in red slashes a shortsword through the air, an idiotic smile painted on his face.";

   nothing : object "dummy";
   
   battle_xyz : scenery listed = "false";
   
   sleep : object "dummy";
   
   path : scenery "a small path"
      msg = "A few large, flat stones laid into the ground."
      at = "pond"
      listed = "false";
      
   bridge : scenery "a red bridge"
      msg = "The bridge is wooden and painted red.  It's more ornamental than anything, crossing a very small portion of the pond."
      at = "pond"
      listed = "false";
   
   small_pond : scenery "the pond"
      msg = "{small_pond_descr}"
      at = "pond"
      listed = "false";
      
   glass_bottle : object "a glass bottle"
   //   container_type = "bag"
      msg = "A wide bottle made of clear glass tapers to a narrow top.  It's stoppered with a cork.  It's currently empty, but perhaps you could fill it.";
      
   //cork : scenery "a cork"
   //   msg = "The cork looks like every other cork you've seen."
   //   at = "glass_bottle"
   //   listed = "false";
      
   full_bottle : object "a glass bottle filled with water"
      msg = "You've filled the glass bottle with some water.  You can empty it if you'd like.";
      
   lightning_bottle : object "some lightning in a bottle"
      msg = "You have literally caught lightning in a bottle.  It's so weak it looks more like a dying match, though.  You can empty it if you'd like.";
   
   note : scenery "a note"
      msg = "Your mother has scrawled a note in Orcish (she never learned how to write in Common) on the counter: \"Dud--I'm sure Uncle Carroll would like to see you.\"  Ugh.  Uncle Carroll."
      at = "kitchen_3";
   
   oven_mitts : object "a pair of oven mitts"
      msg = "A basic pair of red oven mitts, the left one scorched from the time you left it too close to the stove while making mac and cheese."
      wearable = "true"
      at = "kitchen_3";
   
   sponge : object "a dish sponge"
      msg = "This is one of those dish sponges your mother recently bought.  \"Be careful, they're super absorbent,\" she said.  As if you didn't have enough to worry about, apparently you now need to be wary of sponges.";
   
   full_sponge : object "a quivering full sponge"
      msg = "This sponge certainly was absorbent.  It has enlarged to thrice its original size and emanates a miserable chill.";
   
   umbrella : object "an umbrella with a propeller on top"
      msg = "Just your everyday umbrella with a propeller on top.  This one is purple with pink stripes.  It's currently closed."
      at = "d5";
   
   seeds : object "a packet of cabbage seeds"
      msg = "It's a small envelope of seeds printed with a black-and-white engraving of robust cabbages in a garden.  The text reads in part:  \"<Part of Dr. Dodgson's insta-veg line of produce.<4>>  <SOW!  WATER!  GROW!<9>>\""
      at = "d6"
      {experimental_matching_text_sequences = ["cabbage seeds","seed packet"] noun = "seeds"}
   
   toy_boat : object "a toy boat"
      msg = "A tiny wooden boat with a mast and sail."
      at = "d4";
      
   dungeon_water : scenery "some icy water"
      msg = "The water in this room churns an icy black.  It's impossible to tell how deep it is, but you can't make out a discernible bottom.  A toy boat floats upon it, well out of reach."
      at = "d4";
   
   
   snake : scenery "a snake"
      msg = "The snake is a fat, awful green, and it's wrapped around the pedestal upon which a deck of cards sits. \"Pick a card,\" it hisses, even though it's not a terribly sibilant phrase.  You can see its fangs glisten even from across the room."
      at = "d9";
   
   pedestal : scenery "a pedestal"
      msg = "The pedestal is some typical Greek-type column thing with a flat top.  It stands about waist high.  A deck of cards sits on it, but more noticeable is a thick snake that's wrapped itself around the marble of the pedestal."
      at = "d9";
   
   cards : scenery "a deck of cards"
      msg = "It appears to be a standard deck, but you're not interested in getting too close to the snake to find out."
      at = "d9"
      {experimental_matching_text_sequences = ["king of hearts"] noun = "cards"}
         
   
   boss : scenery "The Boss"
            msg = "The Boss is dressed as a faerie, though maybe she actually is one.  The wings seem real enough.  And of course all the stories about faeries leading people to their deaths are real enough, too.  She waits for you to TALK TO her."
            at = "boss_office"
            listed = "false";
   
   jonathan : scenery "Jonathan"
            msg = "{jonathan_descr}"
            at = "reception"
            listed = "false";
            
   cloak : scenery "Jonathan's cloak"
            msg = "Jonathan wears a dark, hooded cloak made of heavy-looking cloth."
            at = "reception"
            listed = "false";
   
   sign : scenery "an MEI sign"
            msg = "It reads: \n^n^<M<9>><onster<5>>\n<E<9>><ncounters<5>>\n<I<9>><nc.<5>> ^m^\n in a hideous font, and then \"<A wholly owned subsidiary of the Dream Factory<6>>\" in a smaller but still hideous font."
            at = "office_ext"
            listed = "false";
            
   brochure : object "a discarded brochure"
            msg = "The clients always leave trash around.  This particular MEI brochure reads:  <DREAMS!<9>>  <DUNGEONS!<6>>  <DANGER!<7>> and other d-words, all promising clients the thrill of encountering monsters as part of their manufactured dream.  There's also a map printed on it, one of the entry-level dungeons:"
            at = "office_ext";

   reanimator : object "your reanimator"
            msg = "The reanimator you wear is round and metallic, about the size of a lid of a canning jar, the kind your mother likes to use to keep pickled toads and the like.  Two elastic straps crisscross around your shoulders and chest to keep it positioned precisely over your purple orc heart.  You have no idea how it works--your father once said something about pentaxenide crystals, but it could run on angel tears, for all you know.  You also have no idea how it could suddenly stop working, either."
            at = "inventory"
            initially_worn = "true";

   nametag : object "your nametag"
            msg = "Your nametag is pinned to your ratty tunic.  It has the MEI logo, a miniature photo of you, a QR code, and equally miniature letters which read:  HENDERSON, ZILDUD."
            //container_type = "surface"
            wearable = "true";
            ;
            
   //code : object "a QR code on the nametag"
   //         at = "nametag"
   //         wearable = "true"
   //         msg = "qr code"
   //         listed = "false";
            
   //photo : object "your photo"
   //         at = "nametag"
   //         wearable = "true"
   //        msg = "\"I *am* smiling,\" you said to the chirpy assistant who took your company photo."
   //         listed = "false";
            
   //logo : object "the MEI logo"
   //         at = "nametag"
   //         wearable = "true"
   //         msg = "The three letters are crammed together in some hideous font."
   //         listed = "false";   
            
   13_gold : object "a pouch with 13 gold in it"
            msg = "Your daily allotment of treasure, property of MEI, of course."
            at = "inventory";

   27_gold : object "a pouch with 27 gold in it"
            msg = "Your daily allotment of treasure, property of MEI, of course.";   
            
   35_gold : object "a pouch with 35 gold in it"
            msg = "Your daily allotment of treasure, property of MEI, of course.";  
   
   43_gold : object "a pouch with 43 gold in it"
            msg = "Your daily allotment of treasure, property of MEI, of course."; 

   56_gold : object "a pouch with 56 gold in it"
            msg = "Your daily allotment of treasure, property of MEI, of course."; 
            
   mirror : scenery  "a mirror" 
            msg="You're as orc-looking as ever."
            at = "bedroom";

   books :  scenery "some books" 
            msg="It's a whole bookshelf filled with typical fantasy literature: humans eating lunch, humans arguing with their in-laws, humans vacationing in Seattle.  Typical."
            at = "bedroom";

   skin :   scenery
            msg = "Your mother hates when you leave food wrappers lying around."
            listed = "false"
            at = "bedroom";
            
   mattress : scenery
            msg = "\"Most orcs don't even have mattresses,\" your mother sometimes says, and you guess you should be grateful."
            at = "bedroom"
            listed = "false";
            
   window : scenery
            msg = "The window shimmers with iridescence."
            at = "bedroom"
            listed = "false";

   mirror_3 : scenery  "a mirror" 
            msg="You're as orc-looking as ever."
            at = "bedroom_3";

   books_3 :  scenery "some books" 
            msg="It's a whole bookshelf of typical fantasy stories about humans eating lunch, arguing with their in-laws, and vacationing in Seattle.  Typical."
            at = "bedroom_3";

   skin_3 :   scenery
            msg = "Your mother hates when you leave food wrappers lying around."
            listed = "false"
            at = "bedroom_3";
            
   mattress_3 : scenery
            msg = "\"Most orcs don't even have mattresses,\" your mother sometimes says, and you guess you should be grateful."
            at = "bedroom_3"
            listed = "false";
            
   window_3 : scenery
            msg = "The window shimmers with iridescence."
            at = "bedroom_3"
            listed = "false";


   club :   object "your club"
            at = "bedroom";


   spices : scenery "bowls of spices";
            
   microwave : scenery "the microwave"
            at = "kitchen"
            msg = "A typical microwave sits on the counter, its LCD numerals bright green."
            listed = "false";
            
   cauldron : scenery "a cauldron"
            at = "kitchen"
            msg = "Standard-issue black with something aboil in it."
            listed = "false";

   ladle : scenery "a ladle"
            at = "kitchen"
            msg = "Your mother's using a standard ladle for cooking."
            listed = "false";

   refrigerator : scenery "a refrigerator"
            at = "kitchen"
            msg = "A standard upright refrigerator and freezer."
            listed = "false";
            
   stove : scenery "a stove"
            at = "kitchen"
            msg = "It's painted with white enamel.  It's got four burners, large enough for one typical cauldron or three atypical ones."
            listed = "false";
            
   sink : scenery "a sink"
            at = "kitchen"
            msg = "Basic stainless steel.  Pretty clean right now."
            listed = "false";

   mother : scenery "your mother cooking something"
            msg = "Your mother busies herself about the small cauldron on the stove.  Jars of ingredients sit on the counter:  snakeskins and pickled worms and the like.  You could TALK TO her."
            at = "kitchen"
            listed = "false";

   ingredient_jars : scenery "jars of ingredients"
            msg = "Snakeskins, pickled worms, dried sumac berries.  Nothing interesting."
            at = "kitchen"
            listed = "false";
            
   barrow : scenery "an old barrow"
            msg = "It's not even a metal wheelbarrow.  It's an old wooden box with two handles, falling apart and useless, like something out of Dickens."
            container_type = "surface"
            at = "house";
            
   wheel : object "a wooden wheel"
            msg = "It's about the size of a dinner plate and has a bunch of wooden spokes emanating from its hub.  It still seems sturdy, despite its age.";
            
   blood : scenery
            msg = "(Most of it is yours.)"
            at = "clearing_lose"
            listed = "false";
            
   office : scenery
            msg = "There are probably typical office things here--a few chairs, a table, a desk--but the Boss likes the dark mood for the clients, so you can pretty much only see Jonathan, lit from his computer."
            at = "reception"
            listed = "false";

}


######################################
#  Subroutines                       #
######################################

collections {
   tmp_list : list;
}

zones {
   winter : zone {
      locations = [winter_house, winter_road, winter_clearing, winter_carriage]
      }
   forest : zone {
      locations = [house, house_3, road, road_2, path_2, path_3, path_4, path_5, path_6, path_7, path_8, path_9, path_10, path_11, clearing, clearing_lose, office_ext, office_ext_2, office_2, truck, in_truck, sewer, northroad, carriage, windmill_top]
      }
   paths : zone {
      locations = [road, road_2, path_2, path_3, path_4, path_5, path_6, path_7, path_8, path_9, path_10, path_11]
      }
   }

subroutines {

   destroy_all_in_inventory : subroutine {
      : look_inside {
         of               = inventory
         extract_the      = id
         store_results_in = tmp_list
         }
      : iterate "tmp_list" {
         : destroy { entity -> (item()) }
         }
      }


   the_end : subroutine {
      : clear_screen;
      : print "\"Hey Jon,\" you say as you enter the MEI office.";
      : print "\"Hey Boss,\" he says.  Your new role took a bit of negotiation, but the Dream Factory was far more interested in a settlement than the lawsuit and ensuing public relations disaster your family was threatening.";
      : print "\"It's a beautiful day out there,\" you say, taking a moment to look around. \"And aren't you glad we finally let some light into this place?\"";
      : print "\"I dunno, dude, it doesn't really vibe with ... this,\" he says, pointing to his cloak.  But he's smiling.  \"Yeah, I guess it's pretty rad.\"";
      : print "You clap your hands once.  \"Yeah.  Let's go make some Dreams today, shall we?  Some good ones, dude.  Some truly good ones.\"";
      : print "\"Sure thing, Boss,\" he says, and you open your door and step into the light of your office.";
      : print "^c^<THE END<5>>\n\n\n\n";
//      : print "<x<15>>";
//      : print "<x<15>>";
      : set_string var = "opponent_hit" {("(Your score was a total of " + score + " points out of 100.)")};
      : print {(opponent_hit)};
      : print "\n<Thanks for playing!  Press any key to return to the beginning of the story.<#bbb>>";
      : win_game;
   }

   boss_talk_end : subroutine {
      : print "... and it's the Boss.  She seems almost incandescent in this world.  \"Henderson, Henderson,\" she begins, her voice sparkling.  \"Why, you seem surprised to see me.\"";
      : gosub "boss_false";
      : add_choice "What ... what is going here?" {
         : set_true "boss_1";
         }
      : add_choice "I'm not." {
         : set_true "boss_2";
         }
      : choose;
      : if (boss_1) {
         : print "\"Well, Henderson, I'm sure it will be difficult to understand for you, but it seems like someone has been altering your Dream.\"  She looks around at the hideous forest.  \"Certainly not up to protocol.  Do you have any idea--any idea at all--who might be responsible for such a thing?\" she says, lowering her voice and her head just a bit, staring at you.";
         }
      : if (boss_2) {
         : print "\"Your slack features on your precious green face suggest otherwise, my dear,\" she says.  Then she spins around, surveying the hideous forest.  \"Quite the substandard Dream you have here, Henderson,\" she says, making a grand gesture.  \"Certainly not up to protocol.  And yet, you were originally issued a factory-reconditioned Dream.  So puzzling.\"  She gives a patronizing smile.  \"Someone must be altering it for you.  Do you have any idea--any idea at all--who might be responsible for such a thing?\" she says, lowering her voice and her head just a bit, staring at you.";
         }
      : gosub "boss_false";
      : add_choice "I've got this weird uncle ..." {
         : set_true "boss_1";
         }
      : add_choice "Is it Jonathan? He said something about a promotion." {
         : set_true "boss_2";
         }
      : add_choice "I don't know. Am I messing it up somehow?" {
         : set_true "boss_3";
         }
      : choose;
      : if (boss_1) {
         : append "\"I didn't ask for your family history, Henderson,\" she hisses.  She produces her tablet as if by magic, then brandishes it as if it proves something.  \"It's you, you big, stupid orc,\" she says in a sharp staccato.  ";
         }
      : if (boss_2) {
         : append "\"No, it isn't Jonathan, dude,\" she says in a mocking drawl.  \"I have no idea what lies he's been telling you.\" She produces her tablet as if by magic, then brandishes it as if it proves something.  \"It's you, you big, stupid orc,\" she says in a sharp staccato.  ";
         }
      : if (boss_3) {
         : append "\"Of course it's you,\" she hisses.  \"Who else but an orc would dream up such a monstrosity,\" she says, looking around, almost bewildered by the landscape.  She produces her tablet as if by magic.  ";
         }
      : print "She looks at the tablet's screen, then back at you.  \"I've been watching you, you know.  How would you say your performance has been, hmm?\"";
      : gosub "boss_false";
      : add_choice "Pretty ... good? I'm about to become level 6." {
         : set_true "boss_1";
         }
      : add_choice "I've done everything you've asked." {
         : set_true "boss_2";
         }
      : add_choice "I've been getting better! You can see for yourself on that stupid tablet." {
         : set_true "boss_3";
         }
      : choose;
      : if (boss_1) {
         : append "\"Oh, are you now?\" she says, her voice tinkling like wind chimes again.  What is she trying to get at?  \"Level 6 requires a manager's approval, as I'm sure you recall from the training you so fastidiously attended. ";
         }
      : if (boss_2) {
         : append "\"Have you?\" she says in mock surprise. \"";
         }
      : if (boss_3) {
         : append "\"Yes, this device is quite helpful,\" she says, her voice tinkling like wind chimes again.  What is she trying to get at?  \"Many, many fascinating things on it. ";
         }
      : print "Let's see ... what about this poor fellow, this level 1 steampunk rogue?  He looks quite charming for a gnome.  At least, he did until you bludgeoned him to a pulp.\"";
      : gosub "boss_false";
      : add_choice "He did it to himself." {
         : set_true "boss_1";
         }
      : add_choice "I'm doing my job! The one you asked me to do!" {
         : set_true "boss_2";
         }
      : choose;
      : if (boss_1) {
         : append "\"Of course he did, Henderson.  Because that's what the clients pay for.  Their Dream, the Dream they've always dreamed of, the Dream they pay Monster Encounters Incorporated good money for, involves utterly failing to defeat a monster but instead pointlessly injuring themselves.\" ";
         }
      : if (boss_2) {
         : append "\"Oh, of course, forgive me,\" she says bitterly.  \"Of course level 5 orcs are supposed to destroy level 1 rogues.  Clearly you understand MEI's procedures far better than I.\" ";
         }
      : if (reputation == -5) {
         : print "She taps on her tablet a few more times.  \"And of course you killed him, just like you killed every single other adventurer.  Such a nasty brute,\" she says.";
         }
      : else_if (reputation == 5) {
         : print "She taps on her tablet a few more times.  \"And of course you let him go, just like you have every other adventurer.  You can't even bring yourself to deliver the final blow.  Pathetic, really,\" she says.";
         }
      : else_if (opp_spared) {
         : print "She taps on her tablet a few more times.  \"And somewhere in that orc brain of your you must have known this was an inappropriate fight, Henderson.  You let him go at the end.  But you're supposed to kill them, remember?  You can't even handle a level 1 fight correctly,\" she says.";
         }
      : else_if (opp_killed) {
         : print "She taps on her tablet a few more times.  \"And of course you killed him.  Nothing like easy blood, right Henderson?  I bet you felt real proud after that kill,\" she says.";
         }
      : gosub "boss_false";
      : add_choice "What do you want from me?" {
         : set_true "boss_1";
         }
      : add_choice "I'm doing exactly what you told me to do." {
         : set_true "boss_2";
         }
      : add_choice "You know what? I don't care what you think." {
         : set_true "boss_3";
         }
      : choose;
      : print "You can feel your fists tighten.  She looks up, thoughtful, tapping a finger on her chin as she studies the ultramarine sky.  Then she returns her glare to you.  \"Do you want to know what happened to your father, Henderson?\" she says.";
      : gosub "boss_false";
      : add_choice "What are you talking about?" {
         : set_true "boss_1";
         }
      : add_choice "No." {
         : set_true "boss_2";
         }
      : add_choice "Shut up." {
         : set_true "boss_3";
         }
      : choose;
      : print "She's not even listening.  \"It's all here,\" she says giddily, waving her tablet around like a bullfighter's cape.  \"It's marvelous, really.  I can watch it again and again and again!\" She sounds like a hyperactive child who's eaten too much sugar.  Then she takes a deep breath, drawing her hands up to her face and then sliding them down in front of her body.  \"Well then,\" she says, consummately professional.  \"The system will record this as a performance review.  But you and I will both know what this really is, Henderson.\"  She scans your nametag with her tablet, just like the other adventurers have done.  Then, with a grand flourish she strikes something on it with her pointer finger.  Instantly your chest feels colder and quieter, and you know without looking she's shut down your reanimator.  \"MEI regrets the error,\" she says, her voice low.";
      : press_any_key;
      : set_theme "battle_theme_blue";
      : goto "bossbattle";
      : set_string var = "opponent_name" {("Boss")};
      : set_string var = "opponent_hp_max" {("200")};
      : set_string var = "your_hp_max" {("100")};
      : set_integer var = "opponent_hp" value = "200";
      : set_integer var = "your_hp" value = "100";
      : gosub "new_battle";
      : redescribe;
      }

   boss_false : subroutine {
      : set_false "boss_1";
      : set_false "boss_2";
      : set_false "boss_3";
      : return;
      }

   boss_lose_final : subroutine {
      : print "You slump to the ground, the Boss screaming at you, victorious.  You feel death--real death this time, a searing of all your neurons that seems like it could be infinite, suddenly followed by a blank silence.";
      : if (has_had_wheel) {
         : pocket "wheel";
         }
      : press_any_key;
      : set_theme "main_theme";
      : set_graphic graphic = "boss_alter_2" target = "bossbattle";
      : clear_screen;
      : print "You jolt awake, your skin wet, your breathing labored.  The utter darkness gives way to the dim light of your bedroom.  It must have just been a nightmare, you reassure yourself.  But then, as quickly as you waken, you again fall unconscious.";
      : press_any_key;
      : set_string var = "bossbattle_descr" {("\"You didn't think you get to escape that easily, do you, Henderson?  You're in my Dream now ... the one where I kill you again and again and again.\"  The Boss cackles, and again pushes something on her tablet, and your chest burns with cold as your reanimator shuts down.\nYou can ATTACK, PARRY, or cast a SPELL (A, P, or S).")};
      : if (lost_twice) {
         : set_string var = "bossbattle_descr" {("\"Again and again and again, Henderson.  Forever and whenever,\" The Boss says.\nYou can ATTACK, PARRY, or cast a SPELL (A, P, or S).")};
         }
      : goto "bossbattle";
      : set_theme "battle_theme_blue";
      : set_string var = "opponent_name" {("Boss")};
      : set_string var = "opponent_hp_max" {("200")};
      : set_string var = "your_hp_max" {("100")};
      : set_integer var = "opponent_hp" value = "200";
      : set_integer var = "your_hp" value = "100";
      //: set_integer var = "boss_taunt_count" value = "0";
      : set_false "boss_enraged";
      : set_true "lost_twice";
      : gosub "new_battle";
      : redescribe;
      : return;
      }
   
   wrong_way_final : subroutine {
      : add var = "wrong_way_count" value = "1";
      : cycle key = "wrong_way" predictable_order = "true" skip_interval = "0" max_loops = "1" {
      : print "You follow the corridor into darkness, and then you realize too late it's a dead end.  You try to turn around, but the light of the last intersection is receding, receding no matter how fast you run towards it.  The last thing you hear before you black out is smug, tinkling laughter.";
      : print "Once again you walk along a dark corridor and encounter a dead end.  You turn around immediately and run back towards the previous light, and it only gets more distant until it extinguishes entirely.  You feel like you're falling into nothing, the air rushing by, and again you hear dark laughter.";
      : print "This maze in your Dream seems impossible, all dark corridors and wrong turns.  Once again you stumble down what you think is the right hallway only to fall into void, laughter transforming to a high-pitched cackle.";
      : print "You're almost afraid to make any movements anymore in this Dream, but you need figure out whatever's going on.  You take a wrong turn, trip, and it feels like you fall forever.  The laughter rises to a mocking shriek.";
         on_exhausted {
         : print "This is terrifying, the constant falling, the erasure of yourself, the hideous laughter.  How are you supposed to make your way through this?";
         }
         }
      : press_any_key;
      : set_theme "main_theme";
      : clear_screen;
      : if (wrong_way_count == 1) {
      : print "What ... just happened?  A premonition?  You're pretty sure you didn't fall asleep, but that was freaky.  You shudder, chilled.";
      }
      : else_if (wrong_way_count == 2) {
         : print "Another premonition?  Did you actually fall asleep this time?  Very freaky.";
      }
      : else_if (wrong_way_count == 3) {
         : print "Or is it an omen?  A curse?  Are you trapped here?";
      }
      : else_if (wrong_way_count >= 4) {
         : print "You can hardly tell if you're asleep or awake anymore.";
      }
      : press_any_key;
      : if (wrong_way_count == 2) {
         : set_string var = "bed_4_descr" value = "Your entire body buzzes with exhaustion.  That must be it.";
         }
      : if (wrong_way_count == 3) {
         : set_string var = "bed_4_descr" value = "You must be so tired you're not thinking straight.";
         }
      : if (wrong_way_count >= 4) {
         : set_string var = "bed_4_descr" value = "But you know you're exhausted.";
         }
      : goto "bedroom_4";
      : redescribe;
      : return;
      }

   wrong_way : subroutine {
      : add var = "lost_count" value = "1";
      : if (lost_count == 1) {
         : print "You follow the path, but it thins out to brambles and saplings.  You get turned around, but eventually make it back to the road where you started.\nMaybe you should talk to your mother.  She's always good with directions.";
         }
      : else_if (lost_count == 2) {
         : print "Once again you follow a path that seems to lead into a thicket and nowhere promising.  You try to follow other trails, but the only way you can find is back to the road where you started.\nYour mother probably knows the directions, though.";
         }
      : else_if (lost_count == 3) {
         : print "Ugh.  These crisscrossing paths are so confusing.  Nothing seems like it leads to where it should.  After a long time crunching through fallen leaves, you emerge from the forest back at the road.\nYou know you should probably listen to your mother.  You feel like sometimes the first things she says are the most important.";
         }
      : else {
         : print "Once you had to do some stupid orienteering unit in your gym class.  It didn't make sense then, and it doesn't now.  All these paths only seem to lead back to the road.\nBut you need to get to your job.  Maybe your mother is speaking in some sort of code or something.";
         }
      : press_any_key;
      : goto "road";
      : redescribe;
      : return;
      }

   give_scroll : subroutine {
      : print "He nods thoughtfully and begins rummaging through drawers of his desk until he finds a tight scroll bound with a purple ribbon. \"Here.  This can help,\" he says.  \"It's made of the finest jubjub skin on the continent.\"";
      : print "He hands it to you.  It feels supple as flower petals and has an opalescent sheen.  You untie and unroll it, but it's blank.  \"What is it?\" you say.";
      : append "\"That, nephew Zildud, is a spell scroll.\"  You watch as he makes a small gesture over the ";
      : append "{spell_object}";
      : if (is_object_plural) {
         : append " and they seem ";
         }
      : else {
         : append " and it seems ";
         }
      : append "to not dissolve as much as vanish.  \"Through the power of Mimsy and me, you've just learned your first spell for battle: ";
      : append "{spell_name}";
      : print ".\"";
      : print "\"What does it do?\"";
      : print "\"It's difficult to say.  A spell is unique to the person who says it.  The only way to find out is to try it on adventurers.  It might be able to help them self-destruct, as it were.\"";
      : append "You look at the scroll again, and sure enough, there's ";
      : append "{spell_name}";
      : print ", in rainbow and everything.  \"This is ... pretty cool.  Thanks,\" you say.";
      : print "\"Of course.  These spells will help you write your own dreams.  Keep bringing me the things that might make more magic.\"";
      : set_true "has_spells";
      : return;
      }

   magic_object : subroutine {
      : if (spell_count == 2) {
         : append "It's not at all clear how he creates these spells.  It's just a little flourish of his fingers over the ";
         : append "{spell_object}";
         : if (is_object_plural) {
            : append " and they disappear.  ";
            }
         : else {
            : append " and it disappears.  ";
            }
         }
      : else_if (spell_count == 3) {
         : append "Once again he sets the ";
         : append "{spell_object}";
         : append " on his desk and does something subtle with his hands.  And once again ";
         : if (is_object_plural) {
            : append "they disappear.  ";
            }
         : else {
            : append "it disappears.  ";
            }         
         }
      : else_if (spell_count == 4) {
         : append "He looks at it, then gestures over the ";
         : append "{spell_object}";
         : append " as if he were sprinkling dust on it.  Who knows what plane of existence ";
         : if (!is_object_plural) {
            : append "it's ";
            }
         : else {
            : append "they're ";
            }
         : append "going to, but wherever it is, it's not here.  "; 
         }
      : else_if (spell_count == 5) {
         : append "You're still amazed by the process but have given up trying to understand it. \"I think that might be it.  I think you may have all you need to flummox your adversaries,\" he says.  "; 
         : set_true "has_all_spells";
         }
      : return;
      }

   give_boat : subroutine {
      : add var = "spell_count" value = "1";
      : set_string var = "ships" {("ships")};
      : set_string var = "spell_name" {("<WATER WHIP<#r>>")};
      : set_string var = "spell_object" {("toy boat")};
      : set_false "is_object_plural";
      : if (!has_spells) {
         : append "You hand your uncle the toy boat.  \"Yes, this is certainly a fine ship if there ever was one,\" he says.  ";
         : gosub "give_scroll";
         : create "spell_scroll" target = "inventory";
         }
      : else {
         : print "You hand your uncle the toy boat.  \"Yes, this is certainly a fine ship if there ever was one,\" he says.  \"May I see your scroll?\""; 
         : append "You give it to him.  ";
         : gosub "magic_object";
         : append "He looks at the scroll, satisfied.  \"Looks like this one is ";
         : append "{spell_name}";
         : print ".  How frighteningly wet,\" he says, handing the scroll back to you.";
         }
      : destroy "toy_boat";
      : set_true "has_whip";
      : add var = "score" value = "4";
      : print "(Your score has gone up by four points.)";
      : return;
      }

   give_wax : subroutine {
      : add var = "spell_count" value = "1";
      : set_string var = "sealing_wax" {("sealing-wax")};
      : set_string var = "spell_name" {("<WAX LIPS<#r>>")};
      : set_string var = "spell_object" {("ceiling wax")};
      : set_false "is_object_plural";
      : if (!has_spells) {
         : append "You hand the jar of ceiling wax to your uncle.  \"Indeed,\" he says.  \"I trust it was in my carriage, precisely as I had said.  And I hope by now you've realized my ceiling\"--he looks up--\"isn't what needs the shine.\" ";
         : gosub "give_scroll";
         : create "spell_scroll" target = "inventory";
         }
      : else {
         : print "You hand the jar of ceiling wax to your uncle.  \"Indeed,\" he says.  \"I trust it was in my carriage, precisely as I had said.  And I hope by now you've realized my ceiling\"--he looks up--\"isn't what needs the shine.\" "; 
         : append "You then give him your scroll.  ";
         : gosub "magic_object";
         : append "He glances at the scroll and returns it to you.  \"Apparently this spell is ";
         : append "{spell_name}";
         : print ".  Just like a candy shop!\" he says.";
         }
      : destroy "ceiling_wax";
      : set_true "has_wax";
      : add var = "score" value = "4";
      : print "(Your score has gone up by four points.)";
      : return;
      }
      
   give_cabbage : subroutine {
      : add var = "spell_count" value = "1";
      : set_string var = "cabbages" {("cabbages")};
      : set_string var = "spell_name" {("<CABBAGE CLOUD<#r>>")};
      : set_string var = "spell_object" {("cabbage")};
      : set_false "is_object_plural";
      : if (!has_spells) {
         : append "You give your uncle the head of cabbage like you're a kid proud of the first thing he's grown in a garden, which you basically are.  \"Looks fresh!\" he says.  \"That's important for procedures like these.\"  ";
         : gosub "give_scroll";
         : create "spell_scroll" target = "inventory";
         }
      : else {
         : print "You give your uncle the head of cabbage like you're a kid proud of the first thing he's grown in the garden, which you basically are.  \"Looks fresh!\" he says.  \"That's important for enchantments like these.\" "; 
         : append "You also give him your scroll.  ";
         : gosub "magic_object";
         : append "He glances at the scroll and furrows his brow a bit.  \"Hmm ... I'm not sure I've seen something like ";
         : append "{spell_name}";
         : print " before.  Let's hope it doesn't rain vegetables,\" he says, returning the scroll to you.";
         }
      : destroy "cabbage";
      : set_true "has_cabbage";
      : add var = "score" value = "4";
      : print "(Your score has gone up by four points.)";
      : return;
      }

   give_king : subroutine {
      : add var = "spell_count" value = "1";
      : set_string var = "kings" {("kings")};
      : set_string var = "spell_name" {("<ROYAL ROBE<#r>>")};
      : set_string var = "spell_object" {("king of hearts")};
      : set_false "is_object_plural";
      : if (!has_spells) {
         : append "You give your uncle the playing card you got from the snake in the dungeon, and he studies it.  \"Well, the song calls for kings, plural, but let's see what we can do here.\"  ";
         : gosub "give_scroll";
         : create "spell_scroll" target = "inventory";
         }
      : else {
         : print "You give your uncle the playing card you got from the snake in the dungeon, and he studies it.  \"Well, the song calls for kings, plural, but I've never minded a challenge.\" "; 
         : append "\"Your scroll as well, please,\" he says, and you hand it to him.  ";
         : gosub "magic_object";
         : append "\"Well, isn't this a cozy one: ";
         : append "{spell_name}";
         : print ".  Maybe it will swaddle its target to sleep.\"  He places your scroll on the desk and you take it.";
         }
      : destroy "playing_card";
      : set_true "has_robe";
      : add var = "score" value = "4";
      : print "(Your score has gone up by four points.)";
      : return;
      }

   give_shoes : subroutine {
      : add var = "spell_count" value = "1";
      : set_string var = "shoes" {("shoes")};
      : set_string var = "spell_name" {("<SLOW WALK<#r>>")};
      : set_string var = "spell_object" {("slippers")};
      : set_true "is_object_plural";
      : if (!has_spells) {
         : append "You dangle the slippers by their ribbon and place them on your uncle's desk, and he looks at them skeptically.  \"I'd rather they were tap shoes,\" he says.  \"But I suppose this isn't necessarily about my dance preferences.\"  ";
         : gosub "give_scroll";
         : create "spell_scroll" target = "inventory";
         }
      : else {
         : print "You dangle the slippers by their ribbon and place them on your uncle's desk, and he looks at them skeptically.  \"I'd rather they were tap shoes,\" he says.  \"But this isn't necessarily about my dance preferences.\" "; 
         : append "You place your scroll on his desk next to the slippers. ";
         : gosub "magic_object";
         : append "\"A rather languorous one, I'm afraid:  ";
         : append "{spell_name}";
         : print ".  I would have chosen PLODDING PERAMBULATIONS,\" he says, \"but I suppose that would be rather difficult to chant in battle.\"  He rolls the scroll back up and gives it to you.";
         }
      : destroy "slippers";
      : set_true "has_walk";
      : add var = "score" value = "4";
      : print "(Your score has gone up by four points.)";
      : return;
      }

   uncle_talk_2 : subroutine {
      : gosub "uncle_false";
      : if (!what_do_you_do) {
         : add_choice "What exactly do you ... do here, anyway?" {
            : set_true "uncle_1";
            }
         }
      : add_choice "Can you sing that weird song again?" {
         : set_true "uncle_2";
         }
      : if (has_read_history && !history_done) {
         : add_choice "What's what that stupid history book? Why do you even have it?" {
            : set_true "uncle_3";
            }
         }
      : if (has_visited "sewer" && !sewer_done) {
         : add_choice "So, I found this weird sewer pipe at the edge of your woods." {
            : set_true "uncle_4";
            }
         }
      : if (is_carried "playing_card" || is_carried "ceiling_wax" || is_carried "slippers" || is_carried "toy_boat" || is_carried "cabbage" || (is_carried "seeds" && !uncle_seeds)) {
         : add_choice "I think I've got something you might be interested in ..." {
            : set_true "uncle_6";
            }
         }
      : if (battle_losses >= 2) {
         : add_choice "I'm having a tough time at work." {
            : set_true "uncle_8";
            }
         }
      : choose;
      
      : if (uncle_1) {
         : print "You gesture generally at the chaos of things in the room.  \"I only do what isn't done but must be,\" he says.  \"Quite simple, really.\"";
         : set_true "what_do_you_do";
         }      
      : if (uncle_2) {
         : set_string var = "poem" {("The time has come, the Walrus said,\nTo talk of many things:\nOf "+shoes+" and "+ships+" and "+sealing_wax+"\nOf "+cabbages+" and "+kings+".")}
         : add var = "song_count" value = "1";
         : if (has_all_spells) {
            : if (!song_finished) {
               : print "\"I could sing it forever, nephew Zildud,\" he says.  \"But I believe Mimsy and I have helped you as much as we are able.  It's time.  Sing the song.  Spell the spells.\"";
               : set_true "song_finished";
               }
            : else {
               : print "It seems like your uncle has no reason to sing the song anymore, which is just fine by you.";
               }
            }
         : else_if (song_count == 1) {
            : print "\"Ah, Mimsy Borogove.  If only I were half as enchanting as she.  Yes, certainly, nephew Zildud.\"  He clears his throat and begins singing:";
            : print "^n^{poem}^m^";
            : print "Finished, he dreamily sighs.";
            }
         : else_if (song_count == 2) {
            : print "\"I certainly wish I could find that record for you,\" he says.  \"Your beautiful orcish heart would simply thrill to hear it.  But, circumstances as they are, I can sing it again.  Apologies, my dearest Mimsy!\" he calls to the ceiling as if she lived there.";
            : print "^n^{poem}^m^";
            : print "Once he's finished, he smiles.";
            }
         : else_if (song_count == 3) {
            : print "\"Quite the fan, aren't you, nephew Zildud?\" he says. \"As were many.  Mimsy sold out concert halls everywhere from Tokyo to Vienna on her final tour.\" He takes a deep breath.";
            : print "^n^{poem}^m^";
            : print "He finishes and exhales what seems like the world.";
            }
         : else {
            : print "\"Yes, nephew Zildud, I could sing it a thousand times.\"";
            : print "^n^{poem}^m^";
            : print "\"Every time is as rich as the first,\" he says.";
            }
         }
      : if (uncle_3) {
         : print "\"Yes, that festering pile of putacious grop,\" he says. \"Almost every word in is a lie.\"  He sighs.  \"Still ... it serves to remind how ugly others' dreams can be.  All the more reasons to create your own.\"";
         : set_true "history_done";
         }
      : if (uncle_4) {
         : print "He snuffs.  \"That thing,\" he says.  \"The local Dream Factory plant put it in as a way to dispose of their putrid runoff.  Without my consent, of course.  I argued with the town, but who's going to listen to the ravings of a lone, deranged orc?  Be careful if you go near there.  There are psychic fragments, subconscious sludges, lustful oozes--that sort of thing.  Such are the glorious fruits of industry.\"";
         : print "\"It seemed pretty dry when I was there, actually,\" you say.";
         : print "He gives it a moment of thought.  \"Yes, I suppose so,\" he says.  \"Off-season at the Dream Factory.  My favorite time of year.\"";
         : set_true "sewer_done";
         }
      : if (uncle_6) {
         : gosub "uncle_false";
         : if (is_carried "ceiling_wax") {
            : add_choice "your jar of ceiling wax." {
               : set_true "uncle_1";
               }
            }
         : if (is_carried "playing_card") {
            : add_choice "the king of hearts." {
               : set_true "uncle_2";
               }
            }
         : if (is_carried "toy_boat") {
            : add_choice "this very small ship." {
               : set_true "uncle_3";
               }
            }         
         : if (is_carried "cabbage") {
            : add_choice "a head of cabbage." {
               : set_true "uncle_4";
               }
            }          
         : if (is_carried "slippers") {
            : add_choice "a pair of ballet slippers I found in a windmill." {
               : set_true "uncle_5";
               }
            }
         : if (is_carried "seeds" && !uncle_seeds) {
            : add_choice "these cabbage seeds." {
               : set_true "uncle_7";
               }
            }
         : choose;
         : if (uncle_1) {
            : gosub "give_wax";
            }
         : if (uncle_2) {
            : gosub "give_king";
            }
         : if (uncle_3) {
            : gosub "give_boat";
            }
         : if (uncle_4) {
            : gosub "give_cabbage";
            }
         : if (uncle_5) {
            : gosub "give_shoes";
            }
         : if (uncle_7) {
            : print "You slide the packet across the desk to him.  He picks it up, glances at it, then slides it back to you.  \"These are cabbage seeds, nephew Zildud,\" he says. \"The song clearly calls for cabbages.  Like Orc Twain once said, that's like the difference between a monster and a monster truck.\"";
            : set_true "uncle_seeds";
            }
         }
      : if (uncle_8) {
         : print "\"Or perhaps work is having a tough time with you.  Either way, what toughens the time?\" he says.";
         : if (battle_number == 1 && has_robe) {
            : print "You tell him about the warrior, and he asks to see your scroll.  \"Nephew Zildud, I believe the answer may be here,\" he says, pointing.  \"Perhaps a robe could help swaddle her swinging?  Just a thought, and of course a thought is a figment short of an action.\"";
            }
         : else_if (battle_number == 1 && !has_spells) {
            : print "You tell him about the warrior, and he listens closely.  And then of course he's back off on one of his tangents.  \"Did I tell you about Mimsy Borogove?  She was--\"";
            : print "\"Yes,\" you say flatly.";
            : print "\"Yes, of course,\" he says.  \"She has some fine ideas in that song.  Perhaps you could help enlighten them.\"";
            : print "\"I don't see how any of that is going to help.\"";
            : print "\"Then you must endeavor to see your sight,\" he says, as if that concludes things.";
            }
         : else_if (battle_number == 1 && has_spells) {
            : print "You tell him about the warrior, and he asks to see your scroll.  \"Nephew Zildud, I fear the answer may not be here,\" he says.  \"Perhaps Mimsy can help you in some other way.  Think about her song again.\"";
            }
         : else_if (battle_number ==2 && has_whip) {
            : print "You tell him about the demons, and he asks to see your scroll.  \"Nephew Zildud, I believe the answer may be here,\" he says, pointing.  \"Water is the natural enemy of fire, and you are the unnatural enemy of the demons, naturally.\"";
            }
          : else_if (battle_number == 2 && !has_whip) {
            : print "You tell him about the demons, and he asks to see your scroll.  \"Nephew Zildud, I fear the answer may not be here,\" he says.  \"Perhaps Mimsy can help you in some other way.  Think about her song again.\"";
            }
         : else_if (battle_number == 3 && has_wax) {
            : print "You tell him about the mage, and he asks to see your scroll.  \"Nephew Zildud, I believe the answer may be here,\" he says, pointing.  \"But my lips are sealed.\"  He raises his eyebrows coyly.  You shake your head.";
            }         
         : else_if (battle_number == 3 && !has_wax) {
            : print "You tell him about the mage, and he asks to see your scroll.  \"Nephew Zildud, I fear the answer may not be here,\" he says.  \"Perhaps Mimsy can help you in some other way.  Think about her song again.\"";
            }
         : else_if (battle_number == 4 && has_cabbage) {
            : print "You tell him about the angels, and he asks to see your scroll.  \"Nephew Zildud, I believe the answer may be here,\" he says, pointing.  \"It seems like something may be able to fog their thoughts.\"";
            }  
         : else_if (battle_number == 4 && !has_cabbage) {
            : print "You tell him about the angels, and he asks to see your scroll.  \"Nephew Zildud, I fear the answer may not be here,\" he says.  \"Perhaps Mimsy can help you in some other way.  Think about her song again.\"";
            } 
         : else_if (battle_number == 5 && has_walk) {
            : print "You tell him about the annoying steampunk gnome, and he asks to see your scroll.  \"Nephew Zildud, I believe the answer may be here,\" he says, pointing.  \"It seems like you could simply unwind his time, so to speak.\"";
            }
         : else_if (battle_number == 5 && !has_walk) {
            : print "You tell him about the annoying steampunk gnome, and he asks to see your scroll.  \"Nephew Zildud, I fear the answer may not be here,\" he says.  \"Perhaps Mimsy can help you in some other way.  Think about her song again.\"";
            } 
         : else {
            : print "You start to tell him about the problems you're facing, but they're hard to put into words, and of course he's responding in that gibberish he often uses.  By the time he's talking about Mimsy Borogove again, you've given up.";
            }
         }         
 
      : return;   
      }

   uncle_talk_1 : subroutine {
      : print "You walk up to your uncle, pulling him out of his reverie.  He blinks twice, then smiles broadly. \"O frabjous day!\" he cries. \"My beamish nephew has come galumphing back!\"";
      : add_choice "Uh ... hi, Uncle Carroll." {
         : set_true "uncle_1";
         }
      : add_choice "Could we just ... not ... with the fake words today?" {
         : set_true "uncle_2";
         }
      : choose;
      : if (uncle_1) {
         : print "\"And hello, nephew Zildud,\" he says. \"Thank you for coming to visit on such a brillig day.\"  His manners instinctually kick in, and he looks around to create a place in the accumulated mess for you to sit.  Eventually he motions toward a knee-high tower of books.  \"But I'm sure you didn't come just to hear me burble like a mome rath,\" he says with a quick laugh.  \"How are you?\"";
         }
      : if (uncle_2) {
         : print "\"Feeling a little manxome, are we, nephew Zildud?  And on such a brillig day, too.  Well,\" he says, and begins looking around to create a place in the accumulated mess for you to sit.  Eventually he motions to a knee-high tower of books.  \"I can certainly cease my tulgey burbling, as you suggest,\" he says.  Some of the joy seems to evaporate from his face as he leans forward.  \"How are you?\"";
         }
         
      : gosub "uncle_false";
      : add_choice "Fine, I guess." {
         : set_true "uncle_1";
         }
      : add_choice "Oh, just jonderlous." {
         : set_true "uncle_2";
         }
      : choose;
      : if (uncle_1) {
         : print "\"Good, good,\" he says.  \"And the new job?  Your mother came by a few days ago and told me about it.  A denizen of the Dream Factory, I hear.\"";
         }
      : if (uncle_2) {
         : print "He chuckles.  \"Neologizing is a learned skill, certainly,\" he says.  \"How about the new job?  Your mother came by a few days ago and told me about it.  A denizen of the Dream Factory, I hear.\"";
         }
         
    : gosub "uncle_false";        
      : add_choice "It's splendiferious or whatever." {
         : set_true "uncle_2";
         }
      : add_choice "Why do you care?" {
         : set_true "uncle_1";
         }
      : add_choice "... it's awful." {
         : set_true "uncle_3";
         }
      : choose;
      : if (uncle_1) {
         : print "\"I care, nephew Zildud, because your mother suggested I should.  She said it's been somewhat of a wralt time for you.\"  He puts a hand on his desk and supports his chin with it, then raises his eyebrows.  \"So what's the problem?\"";
         }
      : if (uncle_2) {
         : print "\"Whatever indeed,\" he says.  \"She suggested it certainly was not wondertacular or whatever other mutt of a word you might use.  I trust she's right.\" He puts a hand on his desk and supports his chin with it, then raises his eyebrows. \"So what, then, is the splendiferous problem?\"";
         }
      : if (uncle_3) {
         : print "He gives a nod of recognition, leans forward, and put his elbow on his desk and on his chin.  \"How so?  What's troubling you?\"";
         }
      : gosub "uncle_false";
      
      : add_choice "I don't--Ugh. Did you ever feel like you didn't belong?" {
         : set_true "uncle_1";
         }
      : add_choice "I'm working with adventurers. Guess what my job is?" {
         : set_true "uncle_2";
         }
      : add_choice "Everything." {
         : set_true "uncle_3";
         }
      : choose;
      : if (uncle_1) {
         : print "As soon as you say it, realize what a stupid question it is.  Of course he doesn't belong.  \"No, never,\" he says, and he seems pleased with the surprise flickering across your face.  \"I was brought into this world, so certainly I belong here.  But I also certainly belong in some places more than others,\" he says, gesturing grandly at his disaster of a room.  \"But I presume you feel differently.\"";
         }
      : if (uncle_2) {
         : print "\"To be a monster,\" he says.  \"To be an orc.  To be you.\"  He lets the silence settle for a while after that. \"Well, it'd certainly be harder to be someone else, would it not?\"";
         }
      : if (uncle_3) {
         : print "\"Which is nearly next to nothing,\" he says.  He draws a circle in the air with his pointer finger, somehow suggesting it's a matter of geometry.  \"So, if it's nearly nothing, it certainly isn't much of anything.\"";
         }
         
      : gosub "uncle_false";
      : add_choice "... try telling that to my dad." {
         : set_true "uncle_1";
         }
      : add_choice "You don't get it. My job--that I need and get paid for--is to kill people." {
         : set_true "uncle_2";
         }
      : choose;
      : if (uncle_1) {
         : print "Your uncle looks out the window for a moment.  \"He was certainly someone who didn't think he belonged,\" he says.  \"I'm ... sorry, Zildud.  I should visit you more than I do.  Do you want to know what I think, what I truly think, of the Dream Factory?\"";
         }
      : if (uncle_2) {
         : print "He doesn't flinch.  \"In a way, that's most people's lives.  Either their jobs make them kill or their jobs kill them. Do you want to know what I think, what I truly think, of the Dream Factory?\"";
         }
      
      : gosub "uncle_false";
      : add_choice "I guess." {
            : set_true "uncle_2";
         }
      : add_choice "I have a feeling I don't have a choice." {
            : set_true "uncle_1";
         }
      : choose;
      : if (uncle_1) {
         : append "He gives a small, breathy laugh.  \"Wise beyond your years,\" he says.  ";
         }
      : print "He clears his throat and begins speaking firmly and slowly.  \"I think it is the worst thing that has ever existed.  What imbeciles think a dream is a commodity that could be bought and sold like a buggy whip or a slab of meat?  Are we so impoverished that we will only believe in dreams that others have manufactured?\"  He strikes his desk with his hand.  \"And what kind of buffoon only dreams of killing other beings?  Tell me, Zildud, if you could dream anything, if you could have anything created, anything dreamed and made real just for you, what would it be?\"";
      
      : gosub "uncle_false";
      : add_choice "I don't--I don't know. A--an umbrella with a propeller on top?" {
         : set_true "uncle_1";
         }
      : add_choice "... I'd want my dad back." {
         : set_true "uncle_2";
         }
      : add_choice "Something that would make absolutely everything in this stupid life different." {
         : set_true "uncle_3";
         }
      : choose;
      : if (uncle_1) {
         : print "He shakes his head.  \"You want something so useful, so quotidian as that?  I could make you five of them within the hour.  But perhaps I've asked an unfair question.  Let us return to your predicament, as I understand it via your mother.  You're an orc who won't hurt those brutish adventurers.  Certainly an oddity as far as the rest of the world is concerned.  So what are you going to do about it?\"";
         }
      : if (uncle_2) {
         : print "He looks down for a moment, then nods.  \"Yes.  But unfortunately the verb tense of dreams is future perfect, not simple past.\"  He lets the moment breathe.  \"Perhaps I've asked a bit much.  Let us return to your predicament, as I understand it via your mother.  You're an orc who won't hurt those brutish adventurers.  Certainly an oddity as far as the rest of the world is concerned.  So what are you going to do about it?\"";
         }
      : if (uncle_3) {
         : print "\"Ah yes, but I'm in your stupid life, am I not?  And rather than the witigent orc you see before you, you'd rather have me out there with a sword slaughtering elves, just to be different, which of course is the same as the world already is?\"  He can tell he's lost you.  \"Perhaps I've asked a bit much.  Let us return to your predicament, as I understand it via your mother.  You're an orc who won't hurt those brutish adventurers.  Certainly an oddity as far as the rest of the world is concerned.  So what are you going to do about it?\"";
         }
      
      : gosub "uncle_false"; 
      
      : add_choice "I could quit, I guess." {
         : set_true "uncle_1";
         }
         
      : add_choice "Fine. I'll just be the stupid murdering orc like you and apparently Mom and everyone else wants me to be." {
         : set_true "uncle_2";
         }
         
      : choose;
      
      : print "\"You're completely wrong,\" he says, as if it's blindingly obvious.  You grit your teeth.  Why did you bother coming to your stupid crazy uncle's house anyway?  He presses his hands together in front of his face. \"You don't have to hurt them,\" he says.  \"But that doesn't mean they shouldn't hurt themselves.\"";
      
      : add_choice "Nothing you say makes sense.";
      : choose;
      
      : print "He stands up abruptly.  \"Do you know Mimsy Borogove?  She's an old sonata singer, and she was someone who knew how to dream, nephew Zildud.\"  He walks to a gramophone in a corner of the room and shuffles through some piles of records, apparently looking for a particular one.  He gives up and returns to his chair.  \"I'll have to sing it--a million apologies, dearest Mimsy,\" he says to the air, and begins in a beautiful, clear tenor:";
      : print "^n^The time has come, the Walrus said,\nTo talk of many things:\nOf <shoes<#r>> and <ships<#r>> and <sealing-wax<#r>>\nOf <cabbages<#r>> and <kings<#r>>.^m^";
      : print "Finished, he leans back, satisfied.";
      
      : add_choice "You're singing in rainbows again, Uncle Carroll.";
      : choose;
      : print "\"But that's the way Mimsy sings it!  Don't you see?  You can dream the world differently, nephew Zildud.  Maybe Mimsy could help.\"";
      
      : add_choice "You can't just change the world by dreaming it away!";
      : choose;
      : print "\"Of course you can, my boy!\" he says, exasperated.  \"It's no harder than catching lightning in a bottle.\"";
      
      : gosub "uncle_false";
      : add_choice "Uh-huh." {
         : set_true "uncle_1";
         }
      : add_choice "You sound insane." {
         : set_true "uncle_2";
         }
      : add_choice "Thanks for being completely unhelpful." {
         : set_true "uncle_2";
         }
      : choose;

      : if (uncle_1) {
         : append "He regards you levelly for a moment, then ";
         }
      : if (uncle_2) {
         : append "Ignoring you, ";
         }
      : print "he suddenly looks up at the tin tiles he's nailed to the rafters.  \"My ceiling is looking rather dull again, wouldn't you say?  Yes, yes, definitely in dislux.  Nephew Zildud, could you please check my carriage?  It's behind the house as ever. I rode it to town yesterday and I think I left something inside it.  I'd appreciate it if you could bring it to me.\"";
 
      : gosub "uncle_false";
      : add_choice "Sure, I guess." {
         : set_true "uncle_1";
         }
      : add_choice "Whatever gets me out of here." {
         : set_true "uncle_2";
         }
      : add_choice "That truck hasn't gone anywhere for seventy years!" {
         : set_true "uncle_3";
         }
      : choose;
      : if (uncle_1) {
         : print "\"Good.  Now listen, nephew Zildud.  The world is what you dream it,\" he says.  \"Listen to Mimsy.  Listen to me.  Please come back to talk more at any time.  Bring to me whatever you think might help.  We can build you a better dream, even if you don't quite believe that yet.  You won't have to hurt anyone.  You'll see.\"  He draws a quill pen from its inkwell and scratches something illegible on some paper in front of him.  Then he resumes looking out the window.";
         }
      : if (uncle_2) {
         : print "\"Listen, nephew Zildud.  The world is what you dream it,\" he says.  \"Listen to Mimsy.  Listen to me.  Please come back to talk more at any time.  Bring to me whatever you think might help.  We can build you a better dream, even if you don't quite believe that yet.  You won't have to hurt anyone.  You'll see.\"  He draws a quill pen from its inkwell and scratches something illegible on some paper in front of him.  Then he resumes looking out the window.";
         }
      : if (uncle_3) {
         : print "\"It runs as well as you dream it can,\" he says, then sighs.  \"Listen, nephew Zildud.  Listen to Mimsy.  Listen to me.  We can build you a better dream, even if you don't quite believe that yet.  Come back to talk at any time.  Bring to me whatever you think might help.  You won't have to hurt anyone.  You'll see.\"  He draws a quill pen from its inkwell and scratches something illegible on some paper in front of him.  Then he resumes looking out the window.";
         }
      : set_true "has_uncle_talked";
      : return;
      }

   uncle_false : subroutine {
      : set_false "uncle_1";
      : set_false "uncle_2";
      : set_false "uncle_3";
      : set_false "uncle_4";
      : set_false "uncle_5";
      : set_false "uncle_6";
      : set_false "uncle_7";
      : set_false "uncle_8";
      : return;
      }

   next_battle : subroutine {
      : destroy "battle_xyz";
      : set_false "battle_lost";
      : set_false "battle_won";
      : set_false "opp_spared";
      : set_false "opp_killed";
      : add var = "battle_number" value = "1";
      : set_true "can_sleep";
      : return;
      }

   jon_talk_3 : subroutine {
      : set_false "jon_1";
      : set_false "jon_2";
      : if (battle_number == 1 && !battle_won && !battle_lost) {
         : if (!jon_unicorn) {
            : print "\"Hey dude, go get a W for the team,\" Jonathan says somewhat distractedly, then returns to his computer screen.  Maybe he's watching unicorn videos or something.";
            : set_true "jon_unicorn";
            }
         : else {
            : print "Jonathan is working on his computer, and you've got nothing else to say to him for now. You decide to let him be.";
            }
         }
      : else_if (battle_number == 1 && battle_lost) {
         : gosub "jon_1_lost";
         }
      : else_if (battle_number == 1 && battle_won) {
         : gosub "jon_1_won";
         : set_integer var = "battle_losses" value = "0";
         }
      : else_if (battle_number == 2 && !battle_won && !battle_lost && !whats_next) {
         : print "\"So, what do I do again?\" you say.";
         : print "\"Just head back out to your assigned battle location, dude.  Wait around until a new client shows up.  Then rock their clocks!\"  He gives you the \"rock on\" hand signal for emphasis.";
         :set_true "whats_next";
         }
      : else_if (battle_number == 2 && !battle_won && !battle_lost && whats_next) {
         //: print "\"Fight right, dude!\" Jonathan says, giving you the \"rock on\" hand signal.";
         : gosub "jon_chat";
         }
      : else_if (battle_number == 2 && battle_lost) {
         : gosub "jon_2_lost";
         }
      : else_if (battle_number == 2 && battle_won) {
         : set_integer var = "battle_losses" value = "0";
         : gosub "jon_2_won";
         }
      : else_if (battle_number >= 3 && !battle_won && !battle_lost) {
         : gosub "jon_chat";
         }
      : else_if (battle_number ==3 && battle_lost) {
         : gosub "jon_3_lost";
         }
      : else_if (battle_number ==3 && battle_won) {
         : set_integer var = "battle_losses" value = "0";
         : gosub "jon_3_won";
         }
      : else_if (battle_number ==4 && battle_lost) {
         : gosub "jon_4_lost";
         }
      : else_if (battle_number ==4 && battle_won) {
         : set_integer var = "battle_losses" value = "0";
         : gosub "jon_4_won";
         }
      : else_if (battle_number ==5 && battle_lost) {
         : gosub "jon_5_lost";
         }
      : return;
      }

   jon_5_lost : subroutine {
      : gosub "jon_false";
      : print "Jonathan looks up.  He already knows what's coming, and by now you two have fallen into the routine of request, computer, forms, gold.  So you do all that, although this time he's surprised such a comparatively easy enemy bested you.  \"Wing it and sling it, dude,\" he says after you're done.";
      : set_false "battle_lost";
      : create "56_gold" target = "inventory";
      : set_string var = "clearing_2_descr" {("You're in the clearing where you fight your battles.  You can wait around for a client to show up.  Otherwise, the MEI office is still to the north, and the road back to your house is to the east.")};
      : destroy "battle_xyz";
      : return;
      }

   jon_4_lost : subroutine {
      : gosub "jon_false";
      : print "Jonathan looks up.  He already knows what's coming, and by now you two have fallen into the routine of request, computer, forms, gold.  So you do all that.  \"Farm out the harm, dude,\" he says after you're done.";
      : set_false "battle_lost";
      : create "43_gold" target = "inventory";
      : set_string var = "clearing_2_descr" {("You're in the clearing where you fight your battles.  You can wait around for a client to show up.  Otherwise, the MEI office is still to the north, and the road past the old farm is to the east.")};
      : destroy "battle_xyz";
      : return;
      }

   jon_4_won : subroutine {
      : print "You know, this is starting to feel pretty good.  You stroll up to Jonathan's desk and tap your hands on it triumphantly.";
      : gosub "jon_false";
      : add_choice "It was a pair of weirdo black angel mind control things. Kinda reminded me of you, but a lot less friendly." {
         : set_true "jon_1";
         }
      : add_choice "Another one down! And another couple, too." {
         : set_true "jon_2";
         }
      : choose;
      : if (jon_1) {
         : append "\"Yeah, those psions can be weird, dude.  That's why I'm a straight-up spellcaster.  ";
         }
      : if (jon_2) {
         : append "\"I bet you made their day a little less romantic.  I guess there's pain in pleasure, dude, or maybe it's the other way around.";
         }
      : if (reputation == -4) {
         : print "  And you just keep killing the clients.  Brutal and awesome.\"";
         }
      : else_if (reputation == -2 && opp_killed) {
         : print "  And it seems like the killing side of things is really what suits your style.  Cool.\"";
         }
      : else_if (reputation == -2 && opp_spared) {
         : print "  But you let the two of them go, huh.  Intriguing.  It's cool to mix it up.\"";
         }
      : else_if (reputation == 0) {
         : print "  And I see you're still trying to decide the best way to end battles for you.  That's cool.  I'm sure you'll figure it out soon.\"";
         }
      : else_if (reputation == 2 && opp_killed) {
         : print "  But you decided to take these two out rather than let them go.  Cool.  I'd probably do the same if I ran into some psions.\"";
         }
      : else_if (reputation == 2 && opp_spared) {
         : print "  And it seems like mercy at the end of a battle is really what suits your style.  Cool.\"";
         }
      : else_if (reputation == 4) {
         : print "  And you let the two of them go again.  You know, I think that's pretty rad.  You're different than a lot of the other monsters.\"";
         }
      : append "Then you exchange your nametag and pouch of gold, just like you have before.  ";
      : print "\"And uh, Zildud,\" Jonathan says, arresting you, since it's your actual name.  He sighs.  \"Uh, Boss called again.  We talked about some other stuff.  And maybe she had too many martinis at the hotel bar.  And I think maybe she thought she had hung up and she was talking to someone else.  And all my calls are recorded \'for quality and training purposes.\'\" He's simultaneously making air quotes with his hands and rolling his eyes and he seems like he's going to keep speaking faster and faster, but instead he takes a deep breath.  \"She said some things and they were  ... pretty unchill.  Here,\" he says with a grimace, \"just listen.\"";
      : print "He then clicks a few times with his mouse and from his computer springs the Boss's voice, tinny and loud.  \"One of my orcs is getting too powerful,\" she says.  \"Turns out he's as strong as he is stupid.  Yeah, just like any of them.  So ugly.  Yeah.  I don't know.  There was literally no one else to hire.  Can't wait till someone really destroys him.  I don't know. They're only supposed to be \'angry idiots,\' that's what the manual says.  Oh--\" and then she cuts out.";  
      : print "\"I think--\" Jonathan begins, but you hold your hand up.  You feel the blood draining from your face and flooding into your arms.  You drop your head.  \"Nothing I haven't heard before,\" you say.";
      : print "\"I'm really sorry, dude.  Totally uncool.  But I thought you should know.  And maybe--watch your back out there?\"";
      : print "\"Just like always,\" you say, spin on your heel, and tromp out the door.";
      : press_any_key;
      : gosub "next_battle";
      : destroy "psion_bodies";
      : destroy "battle_xyz";
      : destroy "43_gold";
      : create "56_gold" target = "inventory";
      : set_false "battle_won";
      : set_true "knows_racism";
      : set_string var = "clearing_2_descr" {("You're in the clearing where you fight your battles.  You can wait around for a client to show up.  Otherwise, the MEI office is still to the north, and the road past the farm is to the east.")};
      : goto "office_2";
      : redescribe;
      : return;      
      }

   jon_3_won : subroutine {
      : print "By now, Jonathan can tell by the way you carry yourself how the battle went.  He starts working with the computer.  \"A mage, dude?  Huh,\" he says, and looks at you for a second, as if reevaluating you.  \"They can be tough with all those spells.  How'd you beat her?\"";
      : gosub "jon_false";
      : add_choice "Let's just say I have a few spells of my own." {
         : set_true "jon_1";
         }
      : add_choice "I've got my ways." {
         : set_true "jon_2";
         }
      : choose;
      : if (jon_1) {
         : append "\"An orc casting spells.  Certainly haven't seen anything like that in any of my Dreams.  That's awesome, dude.";
         }
      : if (jon_2) {
         : append "\"Don't want to give away your secrets, huh dude.  No worries.  I'm happy for you.";
         }
      : if (reputation == -3) {
         : print "  And you're really a stone-cold killer, aren't you?  You've offed every one of them.  Sweet.\"";
         }
      : else_if (reputation == 3) {
         : print "  And you really are a gentle one, aren't you?  It's chill the way you let them get away without dying.  That's a good vibe for you.\"";
         }
      : else {
         : print "\"  He looks back down at the computer.  \"It says here you're still trying to decide if you're a lover or a fighter at the end.  No worries, dude, you'll figure it out.\"";
         }
      : append "Then you exchange your nametag and pouch of gold, just like you have before.  \"One more thing, dude,\" Jonathan says.  ";
      : if (!boss_out) {
         : print "\"I don't think I told you before, but Boss is at a conference in Philly for a while.  Anyway, she called this morning to check in.  I told her about how you were killing it.  She said to say good job.  Said it was nice to see an orc make something of himself or something like that.  Anyway, rattle the battle, dude!  You've got two more until the big promotion!\"";
         }
      : else {
         : print "\"Boss called this morning to check in.  I told her about how you were killing it.  She said to say good job.  Said it was nice to see an orc make something of himself or something like that.  Anyway, rattle the battle, dude!  You've got two more until the big promotion!\"";
         }
      : print "You were turning to leave, but then you stop.  \"Promotion?\" you say.";
      : print "\"Yeah, dude.  Didn't Boss tell you?  Level 6 is where it's at, man.  Big stuff.  But ...\" he says, his brow wrinkled, \"Boss probably should be the one to talk about it.  Something to ... look forward to,\" he says, trailing off.";
      : gosub "next_battle";
      : destroy "mage_body";
      : destroy "battle_xyz";
      : destroy "35_gold";
      : create "43_gold" target = "inventory";
      : set_false "battle_won";
      : set_true "knows_promotion";
      : set_string var = "clearing_2_descr" {("You're in the clearing where you fight your battles.  You can wait around for a client to show up.  Otherwise, the MEI office is still to the north, and the road past the farm is to the east.")};
      : return;      
      }

   jon_3_lost : subroutine {
      : gosub "jon_false";
      : print "Jonathan looks up.  He already knows what's coming, and by now you two have fallen into the routine of request, computer, forms, gold.  So you do all that.  \"Rain down the pain, dude,\" he says after you're done.";
      : set_false "battle_lost";
      : create "35_gold" target = "inventory";
      : set_string var = "clearing_2_descr" {("You're in the clearing where you fight your battles.  You can wait around for a client to show up.  Otherwise, the MEI office is still to the north, and the road past the farm is to the east.")};
      : destroy "battle_xyz";
      : return;
      }
   
   jon_chat : subroutine {
      : gosub "jon_false";
      : if (jon_dream && jon_work && jon_boss && (jon_promotion || !knows_promotion) && (jon_racism || !knows_racism )) {
         : print "You can't think of anything else to talk about with Jonathan.  Probably best to get out and fight another battle.";
         }
      : else {
         : print "You make eye contact with Jonathan and nod.";
         : if (!jon_racism && knows_racism) {
            : add_choice "Why would the Boss say something like that?" {
               : set_true "jon_4";
               }
            }
         : if (!jon_dream) {
            : add_choice "So what's your story, anyway?" {
               : set_true "jon_1";
               }
            }
         : if (!jon_boss) {
            : add_choice "What do you think of the Boss?" {
               : set_true "jon_2";
               }
            }
         : if (!jon_promotion && knows_promotion) {
            : add_choice "What's up with the promotion at level 6?" {
               : set_true "jon_3";
               }
            }
         : if (!jon_work) {
            : add_choice "Do you ... think we do good work here?" {
               : set_true "jon_5";
               }
            }
         }
         : choose;
         : if (jon_1) {
            : print "\"Just livin' the dream, man, and livin' my Dream, too, I guess,\" he says.";
            : print "\"And what's your Dream?\"";
            : print "\"I'm gonna be a Mage of the Night.  Awesome spells, gnarly robe.  But I'm a good alignment, y'know?  Bringing light to the night.\"";
            : print "\"How'd you pick that?\" you say.";
            : print "\"My real life is, uh ... it isn't that chill, dude,\" he says, and he looks away.  A pause thickens the air.  \"Yeah, kinda heavy,\" he says, and you decide not to press further.  Maybe you've misjudged him.  Maybe his placid ease doesn't come from some sun-kissed California coast after all.";
            : set_true "jon_dream";
            }
         : if (jon_2) {
            : if (knows_racism) {
               : print "\"Well, every job needs a Boss, right?  She's pretty tough for a faerie.  But what she said about you ... I dunno,\" he says, blinking.  He winds up staring into the dimness for a bit.";
               }
            : else {
               : print "\"I dunno, dude.  Every job needs a Boss, right?  She's pretty tough for a faerie, but I guess you'd have to be, managing monsters.  Like you,\" he says, smiling because he thinks it's a joke.  You don't smile back.  \"Sorry, dude, didn't mean to rag on you.  Boss is fine, I guess is what I'm trying to say.\"";
               }
            : set_true "jon_boss";
            }
         : if (jon_3) {
            : print "\"Sorry dude, didn't mean to be weird about it,\" he says.  \"It's just that it's different for everyone, and Boss controls most of the details.  I'm sure she can tell you more about it when she gets back.  But it'll be awesome for sure.\"";
            : set_true "jon_promotion";
            }
         : if (jon_4) {
            : print "\"I dunno, dude.  I've never heard anything like that from her,\" he says, and shakes his head.  He seems to be trying to choose his next words carefully.  \"Not cool at all,\" is what he comes up with.";
            : set_true "jon_racism";
            }
         : if (jon_5) {
            : print "\"Not sure quite what you mean, dude,\" he says.  \"But you're not eligible for a raise until you've been here for six months.\"";
            : print "\"No, it's not that.  But ... the Dream Factory.\"  You don't know why this suddenly coming out of you, but you kind of like Jonathan, you guess.  \"People have Dreams where they kill monsters.  Where they kill me.\"";
            : print "He looks away for a moment, and you can't read his expression.  \"Dude, that's kinda deep,\" he says, returning to you.  \"Never thought about it like that.  But ... they don't actually kill you. You've got that reanimator thing.\"  Your chest and teeth tighten, but you try to calm yourself.  You're fairly certain he doesn't know about your father--it seems like the Boss let as few people know as possible.  \"I guess there's good and evil, y'know, dude?  And I guess people want to think they're good.\"";
            : print "\"But that means there's people like me who have to always be evil,\" you say.";
            : print "\"Yeah ... that kinda blows, dude,\" he says, and he looks away again.";
            : set_true "jon_work";
            }
      : return;
      }

   jon_2_won : subroutine {
      : gosub "jon_false";
      : print "Jonathan looks up at you expectantly.  You're already smiling, and he smiles back.  \"Let me guess,\" he begins.";
      : add_choice "Totally, dude." {
         : set_true "jon_1";
         }
      : add_choice "You know, maybe this job isn't so bad." {
         : set_true "jon_2";
         }
      : choose; 
      : if (jon_1) {
         : append "He again looks down and types some things.  \"Totally,\" he says.  ";
         }
      : if (jon_2) {
         : append "\"Yeah, dude, it takes a Dream to build a Dream,\" he says, and you wonder if he understands his own aphorisms.  He looks down and types some things.  ";
         }
      : if (reputation == 0 && opp_killed) {
         : append "\"And I see you went for the kill this time.  Cool.  Always fun to mix it up.\" ";
         }
      : else_if (reputation == 0 && opp_spared) {
         : append "\"And I see you decided to spare them this time.  Cool.  Always fun to mix it up.\" ";
         }
      : else_if (reputation < 0) {
         : append "\"And I see you're becoming quite a killer!  I knew you had it in you, dude.\" ";
         }
      : else {
         : append "\"And I see you spared their lives again.  I think the gentle giant thing kinda suits you, dude.\" ";
         }
      : print "Then you two go through the same transactions as before, and you receive a new nametag and a heavier pouch of gold.";
      : gosub "jon_false";
      : if (!boss_out) {
         : add_choice "I'd like to see the Boss. She needs to know things have changed." {
            : set_true "jon_1";
            }
         }
       : add_choice "Well, time to head back out there, I guess." {
            : set_true "jon_2";
            }
       : choose;
       : if (jon_1) {
         : print "\"Dude, I don't think I told you before.  Boss is out for a while.  She's at a conference in Philly.  Anyway, I'm sure she'll want to hear about it when she gets back.  She likes to see new monsters level up fast.  I think she was starting to worry about you,\" Jonathan says, stating the obvious. \"Anyway, party hearty out there.\"";
         : set_true "boss_out";
         }
      : if (jon_2) {
         : print "\"Awesome.  Party hearty, dude,\" he says, and returns eagerly to his computer.  You see the colors flicker and he laughs about something there.";
         }
      : gosub "next_battle";
      : destroy "demon_bodies";
      : destroy "battle_xyz";
      : destroy "27_gold";
      : create "35_gold" target = "inventory";
      : set_false "battle_won";
      : set_string var = "clearing_2_descr" {("You're in the clearing where you fight your battles.  You can wait around for a client to show up.  Otherwise, the MEI office is still to the north, and the road past the farm is to the east.")};
      : return;
   
      }

   jon_2_lost : subroutine {
      : gosub "jon_false";
      : destroy "battle_xyz";
      : if (battle_losses == 1) {
      : print "Jonathan looks up and sees your familiar hangdog demeanor. \"Again, dude, huh,\" he says, then sighs.";
      : add_choice "Yeah, again." {
         : set_true "jon_1";
         }
      : add_choice "They were demons. One of them wore a sport coat." {
         : set_true "jon_2";
         }
      : choose;
      : if (jon_1) {
         : print "\"Can do, dude,\" he says, thinking the half-rhyme makes him sound chipper.  You fill out the forms, again, and have your new gold soon enough.";
         : create "27_gold" target = "inventory";
         : set_false "battle_lost";
         }
      : if (jon_2) {
         : print "\"Sounds like kind of a weird Dream if you ask me, dude,\" he says.  \"But I guess the fantasy customer is always fantasy right.\" That doesn't make much sense to you, but you guess he's just trying to make you feel better.  After you fill out the forms, he hands you more gold.";
         : create "27_gold" target = "inventory";
         : set_false "battle_lost";
         }
      : gosub "jon_false";
      : add_choice "Alright, well, thanks." {
         : set_true "jon_1";
         }
      : if (!boss_out) {
         : add_choice "Just--don't tell the Boss about this one, okay?" {
            : set_true "jon_2";
            }
         }
      : choose;
      : if (jon_1) {
         : print "\"Cool.  Go slay the day, dude,\" he says.";
         }
      : if (jon_2) {
         : print "\"Didn't she tell you?  Boss went to a conference in Philly.  Won't be back for a while.  So, you're good.  Though the computers are all hooked together, dude, so I guess she can check up on you if she wants.  Can't imagine she'd care while she's away.  Anyway, go slay the day, dude,\" he says.";
         : set_true "boss_out";
         }
      }
      : else {
         : print "You shuffle towards Jonathan, not looking him in the eye.  The two of you don't say much as you go through the process of getting yet another pouch of gold that'll likely go into the pockets of the next adventurer fortunate enough to encounter you.";
         : create "27_gold" target = "inventory";
         : set_false "battle_lost";
         }
      : set_true "whats_next";
      : set_string var = "clearing_2_descr" {("You're in the clearing where you fight, and typically lose, your battles.  You can wait around for a next client to show up.  Otherwise, the MEI office is still to the north, and the road past the farm is to the east.")};
      : return;
      }

   jon_false : subroutine {
      : set_false "jon_1";
      : set_false "jon_2";
      : set_false "jon_3";
      : set_false "jon_4";
      : set_false "jon_5";
      : return;
      }

   jon_1_won : subroutine {
      : gosub "jon_false";
      : print "Jonathan looks up at you expectantly.";
      : add_choice "Dude! I finally won!" {
         : set_true "jon_1";
         }
      : add_choice "So, you might not believe this ..." {
         : set_true "jon_2";
         }
      : choose; 
      : if (jon_1) {
         : append "Jonathan smiles and begins typing on his computer.  He glances down at it, and then back to you.  \"Dude!\" he says.  \"That's so rad. ";
         }
      : if (jon_2) {
         : append "Jonathan must assume you need more gold, as he turns his head down and begins typing into his computer.  But then he tilts his head a bit, smiles, and looks back at you.  \"Dude, believe it I do.  That's rad, man!  ";
         }
      : if (opp_killed) {
         : print "Your first kill and everything.  Awesome.\"";
         }
      : if (opp_spared) {
         : print "And I see you went the humane route with her.  Cool.  Boss said she likes everyone to have their own style.\"";
         }
      : gosub "jon_false";
      : add_choice "Now I'm going to go tell the Boss right to her precious faerie face!" {
         : set_true "jon_1";
         }
      : add_choice "Thanks. So what's next?" {
         : set_true "jon_2";
         }
      : choose;
      : if (jon_1) {
         : if (boss_out) {
            : print "\"Dude, chill just a bit.  I told you she was in Philly, remember?\"  He motions you over with his hand.  \"We've got a few things to do.\"  He types on his computer a bit more and you hear some sort of machine noise from under his desk.  \"First, you get a new nametag.  It's got your latest info on it in the code thing.  You're level 2 now, dude, and you get some more battle health.  And of course the clients get to fight for more gold, so I'll trade you pouches.  You'll see your winning pouch on your paycheck next week.\"  You hand him your nametag and pouch of gold and receive new ones.  \"Awesome.  That should be it, man.  We'll send your clearing's location out to a new pool of clients.  You're ready to get back out there.  Go fight the light, dude!\" he says.\nYou try to imagine him in his real life, where instead of a dude wearing a black cloak sitting behind a receptionist's desk, he's out there catching a wave or popping an ollie or whatever.  \"Fantasies are wasted on the fantastic,\" Uncle Carroll once said, and while you don't quite know what that means, it feels like it applies here.";
            }
         : else {
            : print "\"Dude, chill just a bit.  Didn't she tell you?  Boss went to a conference in Philly.  Won't be back for a while.  So, you're good for now.\"";
            : set_true "boss_out";
            : add_choice "Oh ... okay. So what do I do now?" {
               : set_true "jon_2";
               }
            : choose;
            }
         }
      : if (jon_2) {
         : print "He types on his computer a bit more and you hear some sort of machine noise from under his desk.  \"First, you get a new nametag.  It's got your latest info on it in the code thing.  You're level 2 now, dude, and you get some more battle health.  And of course the clients get to fight for more gold, so I'll trade you pouches.  You'll see your winning pouch on your paycheck next week.\"  You hand him your nametag and pouch of gold and receive the new ones.  \"Awesome.  That should be it, man.  We'll send your clearing's location out to a new pool of clients.  You're ready to get back out there.  Go fight the light, dude!\"\nYou try to imagine him in his real life, where instead of a dude wearing a black cloak sitting behind a receptionist's desk, he's out there catching a wave or popping an ollie or whatever.  \"Fantasies are wasted on the fantastic,\" Uncle Carroll once said, and while you don't quite know what that means, it feels like it applies here.";
         }
      : gosub "next_battle";
      : destroy "warrior_body";
      : destroy "battle_xyz";
      : destroy "13_gold";
      : set_false "battle_won";
      : create "27_gold" target = "inventory";
      : set_string var = "clearing_2_descr" {("You're in the clearing where you fight your battles.  You can wait around for the next client to show up.  Otherwise, the MEI office is still to the north, and the road past the farm is to the east.")};
      : return;
      }
      

   jon_1_lost : subroutine {
      : gosub "jon_false";
      : destroy "battle_xyz";
      : if (battle_losses == 1) {
      : print "Jonathan looks up and sees your bedraggled state. \"Dude,\" he says sadly.";
      : add_choice "Dude." {
         : set_true "jon_1";
         }
      : add_choice "The forms, please." {
         : set_true "jon_2";
         }
      : choose;
      : if (jon_1) {
         : print "There's this stupid air of solemnity where you just both say \"dude\" and Jonathan automatically hands you the forms to get more gold.  You fill them out--would it kill them to let a little more light in here so you could see what you're doing?--and Jonathan in turn gives you a new pouch.";
         : create "13_gold" target = "inventory";
         : set_false "battle_lost";
         }
      : if (jon_2) {
         : print "\"Yeah,\" Jonathan says, briefly looking away. Jonathan hands you the forms to get more gold.  You fill them out--would it kill them to let a little more light in here so you could see what you're doing?--and Jonathan in turn gives you a new pouch.";
         : create "13_gold" target = "inventory";
         : set_false "battle_lost";
         }
      : gosub "jon_false";
      : add_choice "Alright, well, thanks." {
         : set_true "jon_1";
         }
      : if (!boss_out) {
         : add_choice "Just--don't tell the Boss about this one, okay?" {
            : set_true "jon_2";
            }
         }
      : choose;
      : if (jon_1) {
         : print "\"No prob.  Maybe this next battle will be the one, y'know?  Go throw those blows!\" he says.";
         }
      : if (jon_2) {
         : print "\"Didn't she tell you?  Boss went to a conference in Philly.  Won't be back for a while.  So, you're good.  Though the computers are all hooked together, dude, so she can check up on you if she wants.  Can't imagine she'd care while she's away.  Anyway, go throw those blows, dude,\" he says.";
         : set_true "boss_out";
         }
      }
      : else {
         : print "By now you just kind of mumble a greeting to Jonathan.  It's obvious to him what's transpired, so you complete the rest of the transaction in relative silence, scratching at the forms with the pen he gives you, and then receiving your gold.";
         : create "13_gold" target = "inventory";
         : set_false "battle_lost";
         }
      : set_string var = "clearing_2_descr" {("Here's the same clearing where you keep losing.  You can try to do your job better this time by waiting around for another battle.  Otherwise, the MEI office is still to the north, and the road past the farm is to the east.")};
      : return;
      }

   new_battle : subroutine {
      : set_false "cast_whip";
      : set_false "is_wit";
      : set_false "is_stand";
      : set_false "is_club";
      : set_false "is_arms";
      : set_false "is_wheel";
      : set_false "is_mitts";
      : set_false "is_wax";
      : set_false "is_robe";
      : set_false "is_whip";
      : set_false "is_cabbage";
      : set_false "is_walk";
      : set_false "is_spell";
      : set_false "cast_wax";
      : set_false "cast_robe";
      : set_false "cast_whip";
      : set_false "cast_cabbage";
      : set_false "cast_walk";
      : return;
      }

   boss_fight : subroutine {
      : set_integer var = "defense_mod" {(0)};
      : if (is_club) {
         : store_random var = "temp_lose_hp";
         : set_integer var = "temp_lose_hp" {(random(5) + 6)} ;
         : if (reputation < 0) {
            : set_integer var = "temp_lose_hp" {(temp_lose_hp - (reputation * 3))};
            }
         : if (temp_lose_hp > opponent_hp) {
            : set_integer var = "temp_lose_hp" {(opponent_hp - 1)};
            }
         : add var= "opponent_hp" {(0 - temp_lose_hp)};
         : add var = "total_warrior_damage" {(temp_lose_hp)};
         : set_string var = "opponent_hit" {("You swing your club at the Boss, bludgeoning her for " + temp_lose_hp + " damage.")};
         : print {(opponent_hit)};
      }
      : if (is_wheel) {
         : set_integer var = "temp_lose_hp" {(67)};
         : if (temp_lose_hp >= opponent_hp) {
            : set_integer var = "temp_lose_hp" {(opponent_hp - 7)};
            }
         : add var= "opponent_hp" {(0 - temp_lose_hp)};
         : add var = "total_warrior_damage" {(temp_lose_hp)};
         : set_string var = "opponent_hit" {("You whip the wheel at her like you're throwing a Frisbee.  It hits her sharply in her right wing and you think you hear something break for " + temp_lose_hp + " damage.  She shrieks in pain, and you shiver.")};
         : print {(opponent_hit)};
         : destroy "wheel";
         : set_true "has_had_wheel";
      }
      
      : if (is_demand) {
         : print "You try to stammer out some sort of question or threat, but instantly she's trying to attack you.";
         }
      : if (is_wit) {
         : print "In the confusion of colors and the Boss's aggression, you have no idea what to say.";
         }
      : if (is_stand) {
         : print "As in orcish thought you stand.";
         }
      : gosub "boss_hit";
      : return;
      }

   boss_parry : subroutine {
      : if (is_arms) {
         : print "You wave your arms around randomly, trying to protect yourself.";
         : set_integer var = "defense_mod" {(random(1))};
      }
      : if (is_mitts) {
         : print "You raise your oven-mitted hands, ready to soften an incoming blow.";
         : set_integer var = "defense_mod" {(random(2) + 2)};
      }
      : if (is_wheel) {
         : print "You hold the wheel in front of your body, bracing for whatever comes.";
         : set_integer var = "defense_mod" {(random(2) + 3)};
      }

      : gosub "boss_hit";
      : return;
   }

   boss_spell : subroutine {
      : if (is_wax) {
         : if (cast_wax) {
            : print "You cast WAX LIPS again, and a giant, comical pair of them fall from a tree at the edge of the clearing.  You wish this were the strangest thing currently occurring.";
            }
         : else {
            : print "You cast WAX LIPS, but in the crazy colors of the clearing, it's unclear if any of the wax lands on the Boss.";
            : set_true "cast_wax";
            }
         : gosub "boss_hit";
         }
      : else_if (is_robe) {
         : if (cast_robe) {
            : print "You cast ROYAL ROBE again, and the king of hearts that you originally stole from the snake comes flying from one of your hands like you're a stupid magician.  This disintegrating Dream isn't helping.";
            }
         : else {
            : print "You say the spell ROYAL ROBE, and whatever energy forms from your arms is wavy and nearly transparent.  You have no idea if it reaches the Boss.";
            : set_true "cast_robe";
            }
         : gosub "boss_hit";
         }
      : else_if (is_whip) {
         : if (cast_whip) {
            : print "You cast WATER WHIP again, and this time it seems something like a lawn sprinkler arises from the ground fifty feet away from the battle.  It isn't helpful.";
            }
         : else {
            : print "You say the spell WATER WHIP, but it's not water that comes from your hands as much as clouds and rainbows.  Maybe it's some sinister faerie countermagic?  You're not sure how wet she may have gotten.";
            : set_true "cast_whip";
            }
         : gosub "boss_hit";
         }
      : else_if (is_cabbage) {
         : if (cast_cabbage) {
               : print "You cast CABBAGE CLOUD again, and it seems like the air subtly changes color into something somehow uglier.";
               }
         : else {
               : print "You cast CABBAGE CLOUD, but how can you tell if there's a green cloud over the boss when the grass is purple and the trees are yellow?  It makes your eyes ache.";
               : set_true "cast_cabbage";
            }
         : gosub "boss_hit";
         }      
      : else_if (is_walk) {
         : if (cast_walk) {
            : print "You cast SLOW WALK again, and a traffic light springs up at the edge of the woods, steadfastly flashing the little walking man sign.  It seems useless.";
            }
         : else {
            : print "You cast SLOW WALK, but the Boss mostly hovers with her wings.  The ballet slippers she's wearing seem to twinge from white to pink, whatever that might mean.";
            : set_true "cast_walk";
            }
         : gosub "boss_hit";
         }
      : else {
         : print "error";
         }
      }

   boss_atk_false : subroutine {
      : set_false "boss_whip";
      : set_false "boss_cabbage";
      : set_false "boss_wax";
      : set_false "boss_walk";
      : set_false "boss_robe";
      : set_false "boss_is_hit";
      : return;
      }

   boss_hit : subroutine {
      //: store_random var = "random_boss";
      //: set_integer var = "random_boss" {(random(4) + 0)}; //results 1=5
      : gosub "boss_atk_false";
      : set_true "boss_can_talk";
      : cycle key = "boss_events" predictable_order = "false" skip_interval = "0" {
         : set_true "boss_whip";
         : set_true "boss_cabbage";
         : set_true "boss_wax";
         : set_true "boss_walk";
         : set_true "boss_robe";
         }
      : if (boss_whip && (opponent_hp > 1)) { //fire
         : if (!cast_whip) {
            : store_random var = "temp_lose_hp";
            : set_integer var = "temp_lose_hp" {(random(10) + 15 - defense_mod)} ;
            : add var= "your_hp" {(0 - temp_lose_hp)};
            : cycle key = "boss_fire" predictable_order = "false" skip_interval = "0" {
               : set_string var = "your_hit" {("The Boss hurtles two fireballs at you from her eyes, scorching you for " + temp_lose_hp + " damage!")};
               : set_string var = "your_hit" { ("The Boss sends a huge wave of flames from her fingers, and you are burned for " + temp_lose_hp + " damage!")};
               }
            : print {(your_hit)};
            }
         : else {
            : store_random var = "temp_lose_hp";
            : set_integer var = "temp_lose_hp" {(random(15) + 30 - defense_mod)};
            : if (temp_lose_hp > opponent_hp) {
               : set_integer var = "temp_lose_hp" {(opponent_hp - 1)};
               }
            : add var= "opponent_hp" {(0 - temp_lose_hp)};
            : cycle key = "boss_fire_fail" predictable_order = "false" skip_interval = "0" {
            : set_string var = "opponent_hit" {("The Boss tries to form a huge fireball between her wings and speed it towards you, but WATER WHIP repels it, and she is burned for " + temp_lose_hp + " damage!")};
            : set_string var = "opponent_hit" {("The Boss tries to spin fireballs from both of her hands, but WATER WHIP douses her, and she is charred for " + temp_lose_hp + " damage!")};
            }
            : print {(opponent_hit)};
            : set_true "boss_is_hit";
            }
         }
         
      : if (boss_cabbage && (opponent_hp > 1)) { //fire
         : if (!cast_cabbage) {
            : store_random var = "temp_lose_hp";
            : set_integer var = "temp_lose_hp" {(random(10) + 15 - defense_mod)} ;
            : add var= "your_hp" {(0 - temp_lose_hp)};
            : cycle key = "boss_mind" predictable_order = "false" skip_interval = "0" {
            : set_string var = "your_hit" {("The Boss drenches your mind with visions of your dying father, and your psyche is wrecked for " + temp_lose_hp + " damage!")};
            : set_string var = "your_hit" {("The Boss conjures up an image in your mind of your mother kidnapped and shackled in a dungeon, and your head sears with pain, causing " + temp_lose_hp + " damage!")};
            }
            : print {(your_hit)};
            }
         : else {
            : store_random var = "temp_lose_hp";
            : set_integer var = "temp_lose_hp" {(random(15) + 28 - defense_mod)};
            : if (temp_lose_hp > opponent_hp) {
               : set_integer var = "temp_lose_hp" {(opponent_hp - 1)};
               }
            : add var= "opponent_hp" {(0 - temp_lose_hp)};
            : cycle key = "boss_mind_fail" predictable_order = "false" skip_interval = "0" {
            : set_string var = "opponent_hit" {("The Boss tries to make evil thoughts invade your mind, but CABBBAGE CLOUD has confused her, and she injures her own psyche for " + temp_lose_hp + " damage!")};
            : set_string var = "opponent_hit" {("The Boss tries to send you a corrupted Dream, but CABBBAGE CLOUD dizzies her, and she confuses herself for " + temp_lose_hp + " damage!")};
            }
            : print {(opponent_hit)};
            : set_true "boss_is_hit";
            }
         }

      : if (boss_walk && (opponent_hp > 1)) { //fire
         : if (!cast_walk) {
            : store_random var = "temp_lose_hp";
            : set_integer var = "temp_lose_hp" {(random(10) + 15 - defense_mod)} ;
            : add var= "your_hp" {(0 - temp_lose_hp)};
            : cycle key = "boss_fast" predictable_order = "false" skip_interval = "0" {
            : set_string var = "your_hit" {("The Boss beats her wings impossibly quickly and they lash you for " + temp_lose_hp + " damage!")};
            : set_string var = "your_hit" {("The Boss punches you with a blinding flurry of blows, bludgeoning you for " + temp_lose_hp + " damage!")};     
            }
            : print {(your_hit)};
            }
         : else {
            : store_random var = "temp_lose_hp";
            : set_integer var = "temp_lose_hp" {(random(15) + 25 - defense_mod)};
            : if (temp_lose_hp > opponent_hp) {
               : set_integer var = "temp_lose_hp" {(opponent_hp - 1)};
               }
            : add var= "opponent_hp" {(0 - temp_lose_hp)};
            : cycle key = "boss_fast_fail" predictable_order = "false" skip_interval = "0" {
            : set_string var = "opponent_hit" {("The Boss attempts to flap her wings as quickly as possible, but SLOW WALK seizes them, and she strains herself for " + temp_lose_hp + " damage!")};
            : set_string var = "opponent_hit" {("The Boss attempts to kick you with a rapid succession of roundhouses, but SLOW WALK trips her, and she instead kicks herself for " + temp_lose_hp + " damage!")};
            }
            : print {(opponent_hit)};
            : set_true "boss_is_hit";
            }
         }

      : if (boss_wax && (opponent_hp > 1)) { //fire
         : if (!cast_wax) {
            : store_random var = "temp_lose_hp";
            : set_integer var = "temp_lose_hp" {(random(5) + 15 - defense_mod)} ;
            : add var= "your_hp" {(0 - temp_lose_hp)};
            : cycle key = "boss_spell" predictable_order = "false" skip_interval = "0" {
            : set_string var = "your_hit" {("The Boss casts ORCUS MINIMUS and flesh rips from your body for " + temp_lose_hp + " damage!")};
            : set_string var = "your_hit" {("The Boss casts FIRING RANGE and you are shot for " + temp_lose_hp + " damage!")};     
            }
            : print {(your_hit)};
            }
         : else {
            : store_random var = "temp_lose_hp";
            : set_integer var = "temp_lose_hp" {(random(15) + 30 - defense_mod)};
            : if (temp_lose_hp > opponent_hp) {
               : set_integer var = "temp_lose_hp" {(opponent_hp - 1)};
               }
            : add var= "opponent_hp" {(0 - temp_lose_hp)};
            : cycle key = "boss_spell_fail" predictable_order = "false" skip_interval = "0" {
            : set_string var = "opponent_hit" {("The Boss attempts to cast KIRIK'S BOMB, but WAX LIPS muffles her and instead she detonates herself for " + temp_lose_hp + " damage!  She rips away the wax in agony!")};
            : set_string var = "opponent_hit" {("The Boss casts GREATER MISSILE, but the wax over her mouth silences her and instead she explodes herself for " + temp_lose_hp + " damage!  She rips away the wax in agony!")};
            }
            : set_false "cast_wax";
            : print {(opponent_hit)};
            : set_true "boss_is_hit";
            }
         }

      : if (boss_robe && (opponent_hp > 1)) { //fire
         : if (!cast_robe) {
            : store_random var = "temp_lose_hp";
            : set_integer var = "temp_lose_hp" {(random(10) + 15 - defense_mod)} ;
            : add var= "your_hp" {(0 - temp_lose_hp)};
            : cycle key = "boss_robe" predictable_order = "false" skip_interval = "0" {
            : set_string var = "your_hit" {("The Boss magically creates a javelin of light and hurls it at you, piercing you for " + temp_lose_hp + " damage!")};
            : set_string var = "your_hit" {("The Boss magically creates an invisible spear and stabs at you, puncturing you for " + temp_lose_hp + " damage!")};
            }
            : print {(your_hit)};
            }
         : else {
            : store_random var = "temp_lose_hp";
            : set_integer var = "temp_lose_hp" {(random(15) + 28 - defense_mod)};
            : if (temp_lose_hp > opponent_hp) {
               : set_integer var = "temp_lose_hp" {(opponent_hp - 1)};
               }
            : add var= "opponent_hp" {(0 - temp_lose_hp)};
            : cycle key = "boss_robe_fail" predictable_order = "false" skip_interval = "0" {
            : set_string var = "opponent_hit" {("The Boss attempts to create a magical sword and swing it, but ROYAL ROBE binds her, and she cuts herself for " + temp_lose_hp + " damage!")};
            : set_string var = "opponent_hit" {("The Boss attempts to pull a dagger from thin air and throw it at you, but she is constricted by ROYAL ROBE, and she instead slices herself for " + temp_lose_hp + " damage!")};
            }
            : print {(opponent_hit)};
            : set_true "boss_is_hit";
            }
         }

      : if (!boss_spell_comment && (cast_whip || cast_wax || cast_walk || cast_cabbage || cast_robe)) {
            : if (cast_wax) {
               : append "The Boss rips the wax away from her mouth.  ";
               : set_false "cast_wax";
               }
         : print "\"Ooh, look at the stupid orc spellcaster,\" the Boss says.";
         : set_true "boss_spell_comment";
         : set_false "boss_can_talk";
         }
         
      : if (!boss_is_hit && boss_can_talk && !boss_enraged && opponent_hp > 50) {
         : add var = "boss_taunt_count" value = "1";
         : if (boss_taunt_count == 1) {
            : if (cast_wax) {
               : append "The Boss rips the wax away from her mouth.  ";
               : set_false "cast_wax";
               }
            : print "\"Your father looked so helpless, just like you do!\" she cries.";
            }
         : else_if (boss_taunt_count == 2) {
            : if (cast_wax) {
               : append "The Boss rips the wax away from her mouth.  ";
               : set_false "cast_wax";
               }
            : print "\"And then your father was so surprised when I joined in the fun!\" she says.";
            }
         : else_if (boss_taunt_count == 3) {
            : if (cast_wax) {
               : append "The Boss rips the wax away from her mouth.  ";
               : set_false "cast_wax";
               }
            : print "\"I broke twenty-three of his bones myself!  I counted each one!\" she says manically.";
            }
         : else_if (boss_taunt_count == 4) {
            : if (cast_wax) {
               : append "The Boss rips the wax away from her mouth.  ";
               : set_false "cast_wax";
               }
            : print "\"And after you, there will be only one of your family left!\" she says.";
            }
         : else_if (boss_taunt_count == 5) {
            : if (cast_wax) {
               : append "The Boss rips the wax away from her mouth.  ";
               : set_false "cast_wax";
               }
            : print "\"Orcs only deserve death,\" she says.";
            }
      }

      : if (opponent_hp <= 50 && !boss_enraged) {
         : if (cast_wax) {
            : append "The Boss rips the wax away from her mouth.  ";
            : set_false "cast_wax";
            }
         : print "Suddenly the tablet comes flying from out of her dress and crashes against a tree.  You see some shards of glass erupt from the tablet, and then lock eyes with her, terror glazing her face.  She clutches at her heart.  You give her a taunting smile because you both know her reanimator has shut down, too.  \"This ends NOW, Henderson!\" she screams, and all of the light evaporates from the clearing.";
         : press_any_key;
         : set_true "boss_enraged";
         : set_theme "battle_theme_final_enraged";
         : set_graphic graphic = "boss_float" target = "bossbattle";
         : set_string var = "bossbattle_descr" {("You can ATTACK, PARRY, or cast a SPELL (A, P, or S).")}
         : redescribe;
         //: update_graphic "boss_float";
         }
         
      
   //boss_spell_comment : boolean "false";
   //boss_enraged : boolean "false";
   //boss_done_talking : boolean "false";

      : if (your_hp <= 0) {
         : set_integer var = "your_hp" value = "0";
         : refresh_status_bar;
         : gosub "boss_lose_final";
         : return;
         }
      : else_if (opponent_hp <= 1) {
         : set_integer var = "opponent_hp" value = "1";
         : refresh_status_bar;
         : gosub "boss_end";
         : press_any_key;
         : set_theme "main_theme";
         : goto "clearing_2";
         : redescribe;
         }
      : return;   
      }

   boss_5_below : subroutine {
      : gosub "boss_false";
      : add_choice "Kill her, just like all the others. She deserves to die." {
         : set_true "boss_1";
         }
      : add_choice "Maybe spare her? Her reanimator's busted. She might actually die for good." {
         : set_true "boss_2";
         }
      : choose "What will you do?";
      : if (boss_1) {
         : print "Are you sure?";
         : gosub "boss_false";
         : add_choice "Absolutely. She would have killed me.  She's a murderer." {
            : set_true "opp_killed";
            }
         : add_choice "Grr. Maybe not." {
            : set_true "boss_2";
            }
         : choose;
         : if (boss_2) {
            : gosub "boss_false";
            : print "This is your final chance.  She helped kill your father.  And you'd be dead, too.  Why would you grant her anything but death?";
            : add_choice "Kill her." {
               : set_true "opp_killed";
               }
            : add_choice "Ugh. Let her go." {
               : set_true "opp_spared";
               }
            : choose;
            }
         }
      : if (boss_2) {
         : gosub "boss_false";
         : print "Really?  She would have killed you, Zildud.  Just like she did your father.";
         : add_choice "No, not really. She should die." {
            : set_true "boss_1";
            }
         : add_choice "Grr. Maybe."  {
            : set_true "boss_2";
            }
         : choose;
         : if (boss_1) {            
            : print "This is your final chance.  She helped kill your father.  And you'd be dead, too.  Why would you grant her anything but death?";
            : add_choice "Kill her." {
               : set_true "opp_killed";
               }
            : add_choice "Ugh. Let her go." {
               : set_true "opp_spared";
               }
            : choose;
            }
         : else {
            : print "She's a menace.  Who knows who else she's killed.  This is your final chance.  Make up your mind.";
            : add_choice "Kill her." {
               : set_true "opp_killed";
               }
            : add_choice "Ugh. Let her go." {
               : set_true "opp_spared";
               }
            : choose;
            }            
         }
      : return;
      }

   boss_3_below : subroutine {
      : gosub "boss_false";
      : add_choice "Kill her, just like you did for most of the others. She deserves to die." {
         : set_true "boss_1";
         }
      : add_choice "Maybe spare her? Her reanimator's busted. She might actually die for good." {
         : set_true "boss_2";
         }
      : choose "What will you do?";
      : if (boss_1) {
         : print "Are you sure?";
         : gosub "boss_false";
         : add_choice "Absolutely. She would have killed me." {
            : set_true "opp_killed";
            }
         : add_choice "Grr. Maybe not." {
            : set_true "boss_2";
            }
         : choose;
         : if (boss_2) {
            : gosub "boss_false";
            : print "This is your final chance.  She helped kill your father.  And you'd be dead, too.  Why would you grant her anything but death?";
            : add_choice "Kill her." {
               : set_true "opp_killed";
               }
            : add_choice "Ugh. Let her go." {
               : set_true "opp_spared";
               }
            : choose;
            }
         }
      : if (boss_2) {
         : gosub "boss_false";
         : print "Really?  She would have killed you, Zildud.  Just like she did your father.";
         : add_choice "You know what? No. I think she should die." {
            : set_true "boss_1";
            }
         : add_choice "Grr. Maybe."  {
            : set_true "boss_2";
            }
         : choose;
         : if (boss_1) {            
            : print "This is your final chance.  She helped kill your father.  And you'd be dead, too.  Why would you grant her anything but death?";
            : add_choice "Kill her." {
               : set_true "opp_killed";
               }
            : add_choice "Ugh. Let her go." {
               : set_true "opp_spared";
               }
            : choose;
            }
         : else {
            : print "She's a menace.  Who knows who else she's killed.  This is your final chance.  Make up your mind.";
            : add_choice "Kill her." {
               : set_true "opp_killed";
               }
            : add_choice "Ugh. Let her go." {
               : set_true "opp_spared";
               }
            : choose;
            }            
         }
      : return;
      }

   boss_1_above : subroutine {
      : gosub "boss_false";
      : add_choice "Kill her." {
         : set_true "boss_1";
         }
      : add_choice "Maybe spare her? Her reanimator's busted. She might actually die for good." {
         : set_true "boss_2";
         }
      : choose "What will you do?";
      : if (boss_1) {
         : print "Are you sure?";
         : gosub "boss_false";
         : add_choice "Definitely. She would have killed me." {
            : set_true "opp_killed";
            }
         : add_choice "... I don't know. Maybe there's something else I could do." {
            : set_true "boss_2";
            }
         : choose;
         : if (boss_2) {
            : gosub "boss_false";
            : print "Look, you need to make up your mind.  She's on the ground in agony.  This is your final chance.";
            : add_choice "Kill her." {
               : set_true "opp_killed";
               }
            : add_choice "Let her go. I think I've got a plan." {
               : set_true "opp_spared";
               }
            : choose;
            }
         }
      : if (boss_2) {
         : gosub "boss_false";
         : print "Yeah, she might.  But maybe that's what she deserves.";
         : add_choice "You know what? I think she should die." {
            : set_true "boss_1";
            }
         : add_choice "No, let her go. I think I've got a plan."  {
            : set_true "opp_spared";
            }
         : choose;
         : if (boss_1) {            
            : print "Look, this is your final chance.  She's on the ground in agony.  You need to decide.";
            : add_choice "Kill her." {
               : set_true "opp_killed";
               }
            : add_choice "Let her go. I've got a plan." {
               : set_true "opp_spared";
               }
            : choose;
            }
         }
      : return;
      }

   boss_3_above : subroutine {
      : gosub "boss_false";
      : add_choice "Spare her, like you did for pretty much everyone else." {
         : set_true "boss_1";
         }
      : add_choice "Kill her. She deserves it." {
         : set_true "boss_2";
         }
      : choose "What will you do?";
      : if (boss_1) {
         : print "Are you sure?";
         : gosub "boss_false";
         : add_choice "Yeah, I guess so. She's going to really die otherwise." {
            : set_true "opp_spared";
            }
         : add_choice "Maybe not. She would have killed me. She probably had my father killed. She might kill someone else." {
            : set_true "boss_2";
            }
         : choose;
         : if (boss_2) {
            : gosub "boss_false";
            : print "Look, you need to make up your mind.  She's on the ground moaning in agony.  You could be the better orc here, but it's up to you.  This is your final chance.";
            : add_choice "Let her go. I think I've got a plan." {
               : set_true "opp_spared";
               }
            : add_choice "I've decided. She deserves death." {
               : set_true "opp_killed";
               }
            : choose;
            }
         }
      : if (boss_2) {
         : gosub "boss_false";
         : print "Are you sure?  Maybe there's another way.";
         : add_choice "I am absolutely certain.  She would have killed me. She probably had my father killed. She might kill someone else." {
            : set_true "opp_killed";
            }
         : add_choice "No, I'm not sure. But what else am I supposed to do?"  {
            : set_true "boss_1";
            }
         : choose;
         : if (boss_1) {            
            : print "Look, this is your final chance.  She's on the ground in agony.  You need to decide.";
            : add_choice "Kill her." {
               : set_true "opp_killed";
               }
            : add_choice "Fine. Let her go. I think I have a plan." {
               : set_true "opp_spared";
               }
            : choose;
            }
         }
     : return;
     }

   boss_5_above : subroutine {
      : gosub "boss_false";
      : add_choice "Spare her, like you did for everyone else." {
         : set_true "boss_1";
         }
      : add_choice "... maybe kill her? This time it's different." {
         : set_true "boss_2";
         }
      : choose "What will you do?";
      : if (boss_1) {
         : print "Are you sure?";
         : gosub "boss_false";
         : add_choice "Yeah. I've got a plan. I can make this better." {
            : set_true "opp_spared";
            }
         : add_choice "Maybe not. She would have killed me. She probably had my father killed. She might kill someone else." {
            : set_true "boss_2";
            }
         : choose;
         : if (boss_2) {
            : gosub "boss_false";
            : print "Look, you need to make up your mind.  She's on the ground moaning in agony.  You can be the better orc here, but it's up to you.  This is your final chance.";
            : add_choice "Let her go. I think I've got a plan." {
               : set_true "opp_spared";
               }
            : add_choice "I've decided. She deserves death." {
               : set_true "opp_killed";
               }
            : choose;
            }

         }
      : if (boss_2) {
         : gosub "boss_false";
         : print "Are you sure?  Maybe there's another way.";
         : add_choice "You know what? I am absolutely certain. She would have killed me. She probably had my father killed. She might kill someone else." {
            : set_true "opp_killed";
            }
         : add_choice "No, I'm not sure. But what else am I supposed to do?"  {
            : set_true "boss_1";
            }
         : choose;
         : if (boss_1) {            
            : print "Look, this is your final chance.  She's on the ground in agony.  You need to decide.";
            : add_choice "Kill her." {
               : set_true "opp_killed";
               }
            : add_choice "Fine. Let her go. I think I have a plan." {
               : set_true "opp_spared";
               }
            : choose;
            }
         }
      : return;
      }
     
   boss_end : subroutine {
      : press_any_key;
      : set_theme "main_theme";
      : clear_screen;
      : set_false "opp_spared";
      : set_false "opp_killed";
      : print "The Boss collapses, and you walk up to her.  She lifts her face from the dirt, huge tears in her eyes and deep red blood seeping from the corner of her mouth.  The bizarre colors are gone, and the clearing has righted itself to the way it looks in the waking world.  In fact, it doesn't seem like a Dream at all.  \"Please,\" the Boss croaks.";
      : if (reputation == -5) {
         : gosub "boss_5_below";
         }
      : else_if (reputation <= -3) {
         : gosub "boss_3_below";
         }
      : else_if (reputation <= 1) {
         : gosub "boss_1_above";
         }
      : else_if (reputation <= 3) {
         : gosub "boss_3_above";
         }
      : else {
         : gosub "boss_5_above";
         }
      : if (opp_killed) {
         : gosub "boss_lose";
         }
      : else_if (opp_spared) {
         : gosub "boss_win";
         }
      : else {
         : print "big error";
         }
   }

   boss_lose : subroutine {
      : clear_screen;
      : print "You raise your club over your head and thunder it down upon her, the spikes impaling her.  Blood pours from the wounds.  And it isn’t rainbow glitter or anything else that might flow through a faerie, just deep red blood.  But you can’t stop.  You club her again and again, wood and metal against flesh and bone.  It looks exactly like a murder would, and worse.";
      : press_any_key;
      : clear_screen;
      : print "Your adrenaline rushes you back to the MEI office, and you storm in, heading immediately to the Boss's office door.  \"Dude?\" Jonathan says, alarmed.";
      : print "\"Check the computer,\" you snarl, and begin smashing the door with your gory club.  It doesn't take long until it's destroyed.  \"We're in the business of Nightmares now, do you understand?\" you say, threatening Jonathan with your club.  He's too bewildered to respond.  \"So we're going get to work.\" You step through the shattered door, out of the world and into the dark.";
      : print "^c^<THE END<#b01>>\n\n\n\n";
      : set_string var = "opponent_hit" {("(Your score was a total of " + score + " points out of 100, but it's not like that matters anymore.)")};
      : print {(opponent_hit)};
      : print "\n<Press any key to return to the beginning of the story.<#555>>";
      : lose_game;
      : return;
      }

   boss_win : subroutine {
      : clear_screen;
      : print "You take a very deep breath.  \"Your nametag,\" you say to the Boss, motioning with your hand.";
      : print "\"Henderson, I--\"";
      : print "\"Now.\"   You raise your club over your head, your eyes piercing hers.";
      : print "You don't really know what kind of condition she's in, but she manages to drag her left arm to her dress and rip the nametag away.  She throws it at your feet and her arm falls limp at her side.  She tries to roll her body over but doesn’t have the strength.  \"What are you going to tell them?\" she wheezes.";
      : print "You saunter over to the tablet next to the tree.  The screen has shattered but is still lit, and everything appears functional.  You pick it up.  \"I won’t have to tell them a thing,\" you say, waggling the tablet in front of her.  Then you walk out of the clearing and back into your life.";
      : add var = "score" value = "14";
      : if (reputation == 5) {
         : add var = "score" value = "1";
         : print "(Your score has gone up by fifteen points.)";
         }
      : else {
         : print "(Your score has gone up by fourteen points.)";
         }
      : press_any_key;
      : clear_screen;
      : set_false "is_in_dungeon";
      : set_theme "final_theme";
      : print "\"I made you some toadstool soup for later,\" your mother says, handing you a thermos.  \"I've got work tonight, so I won't see you until tomorrow.\" Then for a moment she studies your face.";
      : print "\"What're you looking at?\" you say with a self-conscious laugh.";
      : print "\"I'm just ... happy, I suppose.\"";
      : print "You smile back.  \"I'm glad, Ma,\" you say, waving the thermos in a farewell gesture, and walk out the door.";
      : press_any_key;
      : gosub "destroy_all_in_inventory";
      : create "thermos" target = "inventory";
      : create "new_nametag" target = "inventory";
      : wear "new_nametag" quiet = "true";
      : goto "winter_house";
      : redescribe;
      : return;
      }

   clock_fight : subroutine {
      : set_integer var = "defense_mod" {(0)};
      : if (is_club) {
         : add var = "club_count" value = "1";
         : store_random var = "temp_lose_hp";
         : set_integer var = "temp_lose_hp" {(random(3) + 6)} ;
         : if (reputation < 0) {
            : set_integer var = "temp_lose_hp" {(temp_lose_hp - (reputation * 1))};
            }
         : if (temp_lose_hp > opponent_hp) {
            : set_integer var = "temp_lose_hp" {(opponent_hp - 1)};
            }
         : add var= "opponent_hp" {(0 - temp_lose_hp)};
         : add var = "total_warrior_damage" {(temp_lose_hp)};
         : set_string var = "opponent_hit" {("You smash your club on this idiot for " + temp_lose_hp + " damage.")};
         : print {(opponent_hit)};
      }
      : if (is_wit) {
         : print "You're pretty sure whatever wit you have would be lost on this imbecile.";
         }
      : if (is_stand) {
         : print "As in orcish thought you stand.";
         }
      : gosub "clock_hit";
      : return;
      }

   clock_parry : subroutine {
      : if (is_arms) {
         : print "You wave your arms around randomly, trying to protect yourself.";
         : set_integer var = "defense_mod" {(random(1))};
      }
      : if (is_mitts) {
         : print "You raise your oven-mitted hands, ready to soften an incoming blow.";
         : set_integer var = "defense_mod" {(random(1) + 1)};
      }
      : if (is_wheel) {
         : print "You hold the wheel in front of your body, bracing for whatever comes.";
         : set_integer var = "defense_mod" {(random(1) + 1)};
      }

      : gosub "clock_hit";
      : return;
   }

   clock_spell : subroutine {
      : if (is_wax) {
         : print "You attempt to form a seal over the gnome by mumbling WAX LIPS, but he's quick enough that he can avoid it before it forms.";
         : gosub "clock_hit";
         }
      : else_if (is_robe) {
         : print "You say the spell ROYAL ROBE, and a purple sheet of energy forms from your arms and flies toward the gnome, but he's spry enough to easily avoid it.";
         : gosub "clock_hit";
         }
      : else_if (is_whip) {
         : if (cast_whip) {
            : print "You cast WATER WHIP again, but it doesn't seem to do anything else.";
            }
         : else {
            : print "You say the spell WATER WHIP, and water inundates the gnome.  Some of his steampunk pieces must be made of iron, because elements of his outfit begin to darken and rust.  Some gears seem seized.";
            : set_true "cast_whip";
            }
         : gosub "clock_hit";
         }
      : else_if (is_cabbage) {
            : print "You cast CABBAGE CLOUD, and a green cloud forms and seeps into the gnome's brain.  He laughs almost like he enjoys it, which, idiot that he is, he probably does.";
            : gosub "clock_hit";
         }      
      : else_if (is_walk) {
         : if (cast_walk) {
            : print "You cast SLOW WALK again, but it seems like even magic can't completely slow the gnome down.";
            }
         : else {
            : print "A beam of white energy travels from your feet toward the gnome as you say SLOW WALK.  Somehow, despite all his leaping, it manages to ensnare his feet, and his hyperactive movements are significantly tamed.";
            : set_true "cast_walk";
            }
         : gosub "clock_hit";
         }
      : else {
         : print "error";
         }
      }

  clock_hit : subroutine {

      : if (random(10) > 3) {
         : if (!cast_walk && (opponent_hp > 1)) {
            : store_random var = "temp_lose_hp";
            : set_integer var = "temp_lose_hp" {(random(2) + 3 - defense_mod)} ;
            : if (temp_lose_hp < 1) {
               : set_integer var = "temp_lose_hp" value = "1";
               }
            : add var= "your_hp" {(0 - temp_lose_hp)};
            : cycle key = "clock_events" predictable_order = "true" skip_interval = "0" {
               : set_string var = "clock_attack_descr" {("The gnome hops about like a kitten.  \"You'd better WATCH out!\" he cries, and he flings his pocket watch at you for ")};
               : set_string var = "clock_attack_descr" {("The gnome runs around like a hyperactive child, shouting \"It's TIME for a beating!\" and throws his pocket watch at you for ")};
               : set_string var = "clock_attack_descr" {("The gnome keeps zipping around you.  \"You'd better GEAR up for pain!\" he taunts, and he slings his pocket watch at you for ")};
               : set_string var = "clock_attack_descr" {("The gnome runs around like he's being fast-forwarded through time.  \"You'll suffer at my HANDS!\" he shouts, and he whips his pocket watch at you for ")};               
               : set_string var = "clock_attack_descr" {("This idiot keeps running around making bad puns.  He's moving so fast it's hard to hear him, but he zips his pocket watch at you for ")}; 
               }
            : set_string var = "your_hit" {(clock_attack_descr + temp_lose_hp + " damage.")};
            : print {(your_hit)};
            }
         : else_if (opponent_hp > 1) {
            : store_random var = "temp_lose_hp";
            : set_integer var = "temp_lose_hp" {(random(5) + 5 - defense_mod)} ;
            : if (temp_lose_hp > opponent_hp) {
               : set_integer var = "temp_lose_hp" {(opponent_hp - 1)};
               }
            : add var= "opponent_hp" {(0 - temp_lose_hp)};
            : cycle key = "clock_fails" predictable_order = "false" skip_interval = "0" {
               : set_string var = "opponent_hit" {("The gnome tries to keep moving, but white energy binds his feet.  He trips over them for " + temp_lose_hp + " damage!")};
               : set_string var = "opponent_hit" {("The gnome tries to fling his watch at you impossibly quickly.  But he loses his balance, causing " + temp_lose_hp + " damage!")};
               : set_string var = "opponent_hit" {("SLOW WALK tangles the gnome's feet.  As he tries to jump about, he instead stumbles, causing " + temp_lose_hp + " damage to himself!")};
               }
            : print {(opponent_hit)};
            }
         }
      : else {
         : if (!cast_whip && (opponent_hp > 1)) {
            : store_random var = "temp_lose_hp";
            : set_integer var = "temp_lose_hp" {(random(3) + 1)} ;
            : if (temp_lose_hp < 1) {
               : set_integer var = "temp_lose_hp" value = "1";
               }            
            : add var= "your_hp" {(0 - temp_lose_hp)};      
            : set_string var = "your_hit" {("The gnome attacks you with some of the gears he's wearing, and their teeth bite you for " + temp_lose_hp + " damage.")};
            : print {(your_hit)};
            }
         : else_if (opponent_hp > 1) {
            : store_random var = "temp_lose_hp";
            : set_integer var = "temp_lose_hp" {(random(5) + 5)} ;
            : if (temp_lose_hp > opponent_hp) {
               : set_integer var = "temp_lose_hp" {(opponent_hp - 1)};
               }
            : add var= "opponent_hp" {(0 - temp_lose_hp)};
            : set_string var = "opponent_hit" {("The gnome attempts to use some of the gears he's wearing to slice you, but some have rusted, and instead he lurches about, seized, and cuts himself for " + temp_lose_hp + " damage!")};
            : print {(opponent_hit)};
            }
         }
      
      : if (your_hp <= 0) {
         : set_integer var = "your_hp" value = "0";
         : set_true "clock_lost";
         : set_true "battle_lost";
         : refresh_status_bar;
         : print "With your vitality spent, you collapse to the ground, dead.";
         : add var = "battle_losses" value = "1";
         : press_any_key;
         : destroy "56_gold";
         : set_theme "main_theme";
         : goto "death_2";
         : create "battle_xyz" target = "clearing_2";
         : set_string var = "clearing_2_descr" {("The battle is over for now.  The MEI office is to the north, and the road past the farm is to the east.")};
         : redescribe;
         }
      : else_if (opponent_hp <= 1) {
         : set_integer var = "opponent_hp" value = "1";
         : refresh_status_bar;
         : gosub "clock_end";
         : press_any_key;
         : set_theme "main_theme";
         : goto "clearing_2";
         : redescribe;
         }
      : return;   
      }
      
   clock_end : subroutine {
      : set_true "defeated_clock";
      : set_true "clock_won";
      : set_true "battle_won";
      : add var = "score" value = "4";
      : set_string var = "clearing_2_descr" {("Well, that's five victories.  Time to report back to the MEI office to the north.")};
      : print "The gnome falls over into a lump of ticking exhaustion.";
      : if (reputation <= -1) {
         : add_choice "Kill him. What an idiot." {
            : print "You walk up to him and with one tremendous kick end his stupid little life.  Guess it's time to see what the promotion is all about, even if it means having to talk with the idiot Boss.\n(Your score has gone up by four points.)";
            : add var = "reputation" value = "-1";
            : create "clock_body" target = "clearing_2";
            : set_true "opp_killed";
            : return;
            }
         : add_choice "As annoying as he was, he was clearly outmatched. Just leave him." {
            : print "Fine.  He certainly had no idea what he was getting into.  You walk away.  Guess it's time to see what the promotion is all about, even if it means having to talk with the idiot Boss.\n(Your score has gone up by four points.)";
            : add var = "reputation" value = "1";
            : set_true "opp_spared";
            : create "battle_xyz" target = "clearing_2";
            : return;
            }
         }
      : else_if (reputation >= 0) {
         : add_choice "Kill him, you guess? What an idiot." {
            : print "You kick him hard enough to end him.  You don't have any witty one-liners to say as you do it.  Guess it's time to see what the promotion is all about, even if it means having to talk with the idiot Boss.\n(Your score has gone up by four points.)";
            : add var = "reputation" value = "-1";
            : create "clock_body" target = "clearing_2";
            : set_true "opp_killed";
            : return;
            }
         : add_choice "Just leave him. It's not worth your ... TIME." {
            : print "You almost chuckle at the thought.  But then you wonder why someone clearly outmatched was fighting you.  You're a bit troubled as you walk away.  But you guess it's time to see what the promotion is all about, even if it means having to talk with the idiot Boss.\n(Your score has gone up by four points.)";
            : add var = "reputation" value = "1";
            : create "battle_xyz" target = "clearing_2";
            : set_true "opp_spared";
            : return;
            }
         }
      : choose "What will you do?";
      }


   psion_fight : subroutine {
      : set_integer var = "defense_mod" {(0)};
      : if (is_club) {
         : add var = "club_count" value = "1";
         : store_random var = "temp_lose_hp";
         : set_integer var = "temp_lose_hp" {(random(7) + 5)} ;
         : if (reputation < 0) {
            : set_integer var = "temp_lose_hp" {(temp_lose_hp - (reputation * 2))};
            }
         : if (temp_lose_hp > opponent_hp) {
            : set_integer var = "temp_lose_hp" {(opponent_hp - 1)};
            }
         : add var= "opponent_hp" {(0 - temp_lose_hp)};
         : add var = "total_warrior_damage" {(temp_lose_hp)};
         : set_string var = "opponent_hit" {("You swing your club and hit the angels for " + temp_lose_hp + " damage.")};
         : print {(opponent_hit)};
      }
      : if (is_wit) {
         : print "You try to telepathically send a clever message, but you have neither telepathy nor a clever message.";
         }
      : if (is_stand) {
         : print "As in orcish thought you stand.";
         }
      : gosub "psion_hit";
      : return;
      }

   psion_parry : subroutine {
      : if (is_arms) {
         : print "You wave your arms around randomly, trying to protect yourself.";
         : set_integer var = "defense_mod" {(random(7))};
      }
      : if (is_mitts) {
         : print "You raise your oven-mitted hands, ready to soften an incoming blow.";
         : set_integer var = "defense_mod" {(random(7) + 1)};
      }
      : if (is_wheel) {
         : print "You hold the wheel in front of your body, bracing for whatever comes.";
         : set_integer var = "defense_mod" {(random(7) + 2)};
      }

      : gosub "psion_hit";
      : return;
   }

   psion_spell : subroutine {
      : if (is_wax) {
         : print "You attempt to form a seal over the angels by mumbling WAX LIPS, but it seems like they can just think it away.";
         : gosub "psion_hit";
         }
      : else_if (is_robe) {
         : if (cast_robe) {
            : print "You try to cast ROYAL ROBE again, but the purple wave of energy that you send doesn't seem to hinder the angels' wings further.";
            }
         : else {
            : print "You say the spell ROYAL ROBE, and a purple sheet of energy forms from your arms and flies toward the angels.  It tangles up in their wings, which struggle but fail to flap free.";
            : set_true "cast_robe";
            }
         : gosub "psion_hit";
         }
      : else_if (is_whip) {
         : print "You say the spell WATER WHIP, and a jet of water gushes toward the angels.  They turn so it hits only their wings, and the water rolls off harmlessly.";
         : gosub "psion_hit";
         }
      : else_if (is_cabbage) {
         : if (cast_cabbage) {
            : print "You say CABBAGE CLOUD again, but it doesn't seem to further affect the angels.";
            }
         : else {
            : print "You cast CABBAGE CLOUD, summoning a green fog over the angels' heads that seems to absorb directly into their brains.  They stagger a bit.  Both shake their heads, as if trying to clear away the disorientation, but their faces remain slackened.";
            : set_true "cast_cabbage";
            }
         : gosub "psion_hit";
         }      
      : else_if (is_walk) {
         : print "A beam of white energy travels from your feet toward the angels as you say SLOW WALK.  They both leap over it with birdlike grace.";
         : gosub "psion_hit";
         }
      : else {
         : print "error";
         }
      }

  psion_hit : subroutine {

      : if (random(10) > 3) {
         : if (!cast_cabbage && (opponent_hp > 1)) {
            : store_random var = "temp_lose_hp";
            : set_integer var = "temp_lose_hp" {(random(8) + 18 - defense_mod)} ;
            : add var= "your_hp" {(0 - temp_lose_hp)};
            : cycle key = "psion_events" predictable_order = "false" skip_interval = "0" {
               : set_string var = "psion_attack_descr" {("The angels fill your mind with images of hypnotic spiraling discs, and you are dizzied for ")};
               : set_string var = "psion_attack_descr" {("The angels flood your mind with memories of your miserable failures in school, and your psyche is shredded for ")};
               : set_string var = "psion_attack_descr" {("The angels telepathically remind you that you're just a worthless orc and no one will mourn your impending death, and your pride is wounded for ")};
               : set_string var = "psion_attack_descr" {("The angels temporarily control your thoughts and actions, causing you to bludgeon yourself for ")};               
               : set_string var = "psion_attack_descr" {("The angels make your brain think a thousand knives are severing your nerves, terrifying you for ")}; 
               }
            : set_string var = "your_hit" {(psion_attack_descr + temp_lose_hp + " damage!")};
            : print {(your_hit)};
            }
         : else_if (opponent_hp > 1) {
            : store_random var = "temp_lose_hp";
            : set_integer var = "temp_lose_hp" {(random(15) + 15 - defense_mod)} ;
            : if (temp_lose_hp > opponent_hp) {
               : set_integer var = "temp_lose_hp" {(opponent_hp - 1)};
               }
            : add var= "opponent_hp" {(0 - temp_lose_hp)};
            : cycle key = "psion_fails" predictable_order = "false" skip_interval = "0" {
               : set_string var = "opponent_hit" {("The angels try to manipulate your mind, but in their confusion they psychically wound each other instead, causing " + temp_lose_hp + " damage!")};
               : set_string var = "opponent_hit" {("CABBAGE CLOUD fogs the angels' thoughts.  They try to intrude upon your mind but instead cause " + temp_lose_hp + " mental damage to themselves!")};
               : set_string var = "opponent_hit" {("The angels try to pollute your thoughts, but they trigger CABBAGE CLOUD, which instead poisons them for " + temp_lose_hp + " damage!")};
               }
            : print {(opponent_hit)};
            }
         }
      : else {
         : if (!cast_robe && (opponent_hp > 1)) {
            : store_random var = "temp_lose_hp";
            : set_integer var = "temp_lose_hp" {(random(4) + 13)} ;
            : add var= "your_hp" {(0 - temp_lose_hp)};      
            : set_string var = "your_hit" {("The angels flap their wings at you, and their razor-sharp feathers cut you for " + temp_lose_hp + " damage!")};
            : print {(your_hit)};
            }
         : else_if (opponent_hp > 1) {
            : store_random var = "temp_lose_hp";
            : set_integer var = "temp_lose_hp" {(random(10) + 15)} ;
            : if (temp_lose_hp > opponent_hp) {
               : set_integer var = "temp_lose_hp" {(opponent_hp - 1)};
               }
            : add var= "opponent_hp" {(0 - temp_lose_hp)};
            : set_string var = "opponent_hit" {("The angels attempt to batter you with their wings, but the magical robe binds them, and instead they injure themselves for " + temp_lose_hp + " damage!")};
            : print {(opponent_hit)};
            }
         }
      
      : if (your_hp <= 0) {
         : set_integer var = "your_hp" value = "0";
         : set_true "psion_lost";
         : set_true "battle_lost";
         : refresh_status_bar;
         : print "With your vitality spent, you collapse to the ground, dead.";
         : add var = "battle_losses" value = "1";
         : press_any_key;
         : destroy "43_gold";
         : set_theme "main_theme";
         : goto "death_2";
         : create "battle_xyz" target = "clearing_2";
         : set_string var = "clearing_2_descr" {("The battle is over for now.  The MEI office is to the north, and the road past the farm is to the east.")};
         : redescribe;
         }
      : else_if (opponent_hp <= 1) {
         : set_integer var = "opponent_hp" value = "1";
         : refresh_status_bar;
         : gosub "psion_end";
         : press_any_key;
         : set_theme "main_theme";
         : goto "clearing_2";
         : redescribe;
         }
      : return;   
      }
      
   psion_end : subroutine {
      : set_true "defeated_psion";
      : set_true "psion_won";
      : set_true "battle_won";
      : add var = "score" value = "10";
      : set_string var = "clearing_2_descr" {("The battle is over for now.  The MEI office is to the north, and the road past the farm is to the east.")};
      : print "The angels collapse in a puff of feathers.  They're trying to tell you something telepathically, but you can only discern a distant static.";
      : if (reputation <= -1) {
         : add_choice "Kill them!" {
            : print "You run up and start beating them with your feet and fists.  It's almost hard to stop.  They deserved it after the intrusions into your thoughts.  And you deserve the reward you'll get back at the office.  You've only got to win one more and then you get that big promotion that Jonathan was talking about.\n(Your score has gone up by ten points.)";
            : add var = "reputation" value = "-1";
            : create "psion_bodies" target = "clearing_2";
            : set_true "opp_killed";
            : return;
            }
         : add_choice "You can be the better orc here. Just leave them." {
            : print "After that awful intrusion into your thoughts, you're shaking with anger.  But you breathe deeply, spin on your heel and stride away, ready to return to MEI.  At least you've only got to win one more and then you get that big promotion that Jonathan was talking about.\n(Your score has gone up by ten points.)";
            : add var = "reputation" value = "1";
            : create "battle_xyz" target = "clearing_2";
            : set_true "opp_spared";
            : return;
            }
         }
      : else_if (reputation >= 0) {
         : add_choice "You guess it's time to kill them." {
            : print "These angels were flat-out dangerous.  They should reap what they've sown.  You kick them firmly enough to kill them.  In the end, it's another victory to report.  Plus, you've only got to win one more and then you get that big promotion that Jonathan was talking about.\n(Your score has gone up by ten points.)";
            : add var = "reputation" value = "-1";
            : create "psion_bodies" target = "clearing_2";
            : set_true "opp_killed";
            : return;
            }
         : add_choice "Stupid mind invaders. But--forget it. Just leave them here." {
            : print "You can no longer tell whatever they're thinking.  But after a few moments, they flap their wings in concert and stumble out of the clearing.  You're a little proud of the way you've conducted yourself so far in battle, though, and you can carry that feeling into the office.  Plus, you've only got to win one more and then you get that big promotion that Jonathan was talking about.\n(Your score has gone up by ten points.)";
            : add var = "reputation" value = "1";
            : create "battle_xyz" target = "clearing_2";
            : set_true "opp_spared";
            : return;
            }
         }
      : choose "What will you do?";
      }

   mage_fight : subroutine {
      : set_integer var = "defense_mod" {(0)};
      : if (is_club) {
         : add var = "club_count" value = "1";
         : store_random var = "temp_lose_hp";
         : set_integer var = "temp_lose_hp" {(random(5) + 5)} ;
         : if (reputation < 0) {
            : set_integer var = "temp_lose_hp" {(temp_lose_hp - (reputation * 2))};
            }
         : if (temp_lose_hp > opponent_hp) {
            : set_integer var = "temp_lose_hp" {(opponent_hp - 1)};
            }
         : add var= "opponent_hp" {(0 - temp_lose_hp)};
         : add var = "total_warrior_damage" {(temp_lose_hp)};
         : set_string var = "opponent_hit" {("You swing your club and hit the mage for " + temp_lose_hp + " damage.")};
         : print {(opponent_hit)};
      }
      : if (is_wit) {
         : print "You say, \"You can't spell 'mage' without 'age'!\" which doesn't make any sense.";
         }
      : if (is_stand) {
         : print "As in orcish thought you stand.";
         }
      : gosub "mage_hit";
      : return;
      }

   mage_parry : subroutine {
      : if (is_arms) {
         : print "You wave your arms around randomly, trying to protect yourself.";
         : set_integer var = "defense_mod" {(random(6))};
      }
      : if (is_mitts) {
         : print "You raise your oven-mitted hands, ready to soften an incoming blow.";
         : set_integer var = "defense_mod" {(random(6) + 1)};
      }
      : if (is_wheel) {
         : print "You hold the wheel in front of your body, bracing for whatever comes.";
         : set_integer var = "defense_mod" {(random(6) + 2)};
      }

      : gosub "mage_hit";
      : return;
   }

   mage_spell : subroutine {
      : if (is_wax) {
         :if (cast_wax) {
            : print "You cast WAX LIPS again, but no additional wax appears.";
            }
         : else {
            : print "You say WAX LIPS rather firmly, and a blue gob seems to fly from your mouth onto the mage's.  Looks like she's rendered speechless, literally and possibly figuratively as well.";
            : set_true "cast_wax";
            }
         : gosub "mage_hit";
         }
      : else_if (is_robe) {
         : print "You say the spell ROYAL ROBE, and a purple sheet of energy forms from your arms and flies toward the mage.  However, she waves her staff and dispels it before it reaches her.";
         : gosub "mage_hit";
         }
      : else_if (is_whip) {
         : print "You say the spell WATER WHIP, and a looping spray of water gushes toward the mage.  However, she waves her staff and dispels it before it reaches her.";
         : gosub "mage_hit";
         }
      : else_if (is_cabbage) {
         : print "You say CABBAGE CLOUD, hoping to alter the mage's mind, but she seems unfazed.";
         : gosub "mage_hit";
         }      
      : else_if (is_walk) {
         : if (cast_walk) {
            : print "You cast SLOW WALK again, and more white light travels toward the mage's feet.  It doesn't seem to have any additional effect, though.";
            }
         : else {
            : print "A beam of white energy travels from your feet toward the mage's as you say SLOW WALK.  The beam is low, and the mage can't quite swipe her staff at it in time.  Her feet glimmer a bit in a foggy light.";
            : set_true "cast_walk";
            }
         : gosub "mage_hit";
         }
      : else {
         : print "error";
         }
      }

  mage_hit : subroutine {

      : if (random(10) > 3) {
         : if (!cast_wax && (opponent_hp > 1)) {
            : store_random var = "temp_lose_hp";
            : set_integer var = "temp_lose_hp" {(random(12) + 10 - defense_mod)} ;
            : add var= "your_hp" {(0 - temp_lose_hp)};
            : cycle key = "mage_events" predictable_order = "false" skip_interval = "0" {
               : set_string var = "mage_attack_descr" {("The mage tips her staff towards you and says IRON FIST, punching you for ")};
               : set_string var = "mage_attack_descr" {("The mage steadies her staff and says VORTEX, spinning your body for ")};
               : set_string var = "mage_attack_descr" {("The mage places her hand upon her staff and casts WASP WAVE, stinging you for ")};
               : set_string var = "mage_attack_descr" {("The mage jabs her staff at you and casts GALE FORCE, buffeting you for ")};               
                : set_string var = "mage_attack_descr" {("The mage points her staff at you and casts KNIVES, and you are cut for ")}; 
               }
            : set_string var = "your_hit" {(mage_attack_descr + temp_lose_hp + " damage!")};
            : print {(your_hit)};
            }
         : else_if (opponent_hp > 1) {
            : store_random var = "temp_lose_hp";
            : set_integer var = "temp_lose_hp" {(random(15) + 15 - defense_mod)} ;
            : if (temp_lose_hp > opponent_hp) {
               : set_integer var = "temp_lose_hp" {(opponent_hp - 1)};
               }
            : add var= "opponent_hp" {(0 - temp_lose_hp)};
            : cycle key = "mage_spells" predictable_order = "false" skip_interval = "0" {
               : set_string var = "mage_attack_descr" {("GHOST GRAB")};
               : set_string var = "mage_attack_descr" {("BROKEN TEMPLE")};
               : set_string var = "mage_attack_descr" {("VINE SNARE")};
               : set_string var = "mage_attack_descr" {("ARMORED ATTACK")};
               : set_string var = "mage_attack_descr" {("LOCUST SWARM")};
               : set_string var = "mage_attack_descr" {("ICEFALL")}; 
               }
            : cycle key = "mage_fails" predictable_order = "false" skip_interval = "0" {
               : set_string var = "opponent_hit" {("The mage attempts to cast " + mage_attack_descr + ", but she can only mumble meaninglessly through the wax in her mouth.  Instead, the spell backfires, causing her " + temp_lose_hp + " damage!")};
               : set_string var = "opponent_hit" {("The mage tries to cast " + mage_attack_descr + ", but the wax in her mouth muffles her.  Instead, she casts the spell on herself for " + temp_lose_hp + " damage!")};
               : set_string var = "opponent_hit" {("WAX LIPS silences the mage.  She casts " + mage_attack_descr + ", but the spell explodes in her mouth for " + temp_lose_hp + " damage!")};
            }

            : print {(opponent_hit)};
            }
         }
      : else {
         : if (!cast_walk && (opponent_hp > 1)) {
            : store_random var = "temp_lose_hp";
            : set_integer var = "temp_lose_hp" {(random(4) + 9)} ;
            : add var= "your_hp" {(0 - temp_lose_hp)};      
            : set_string var = "your_hit" {("The mage strikes you with many inconceivably fast blows from her staff for " + temp_lose_hp + " damage!")};
            : print {(your_hit)};
            }
         : else_if (opponent_hp > 1) {
            : store_random var = "temp_lose_hp";
            : set_integer var = "temp_lose_hp" {(random(7) + 9)} ;
            : if (temp_lose_hp > opponent_hp) {
               : set_integer var = "temp_lose_hp" {(opponent_hp - 1)};
               }
            : add var= "opponent_hp" {(0 - temp_lose_hp)};
            : set_string var = "opponent_hit" {("The mage attempts to strike you quickly with her staff.  But she trips on her slowed feet, causing " + temp_lose_hp + " damage to herself!")};
            : print {(opponent_hit)};
            }
         }
      
      : if (your_hp <= 0) {
         : set_integer var = "your_hp" value = "0";
         : set_true "mage_lost";
         : refresh_status_bar;
         : print "With your vitality spent, you collapse to the ground, dead.";
         : add var = "battle_losses" value = "1";
         : press_any_key;
         : destroy "35_gold";
         : set_theme "main_theme";
         : goto "death_2";
         : create "battle_xyz" target = "clearing_2";
         : set_string var = "clearing_2_descr" {("The battle is over for now.  The MEI office is to the north, and the road past the farm is to the east.")};
         : set_true "battle_lost";
         : redescribe;
         }
      : else_if (opponent_hp <= 1) {
         : set_integer var = "opponent_hp" value = "1";
         : refresh_status_bar;
         : gosub "mage_end";
         : press_any_key;
         : set_theme "main_theme";
         : goto "clearing_2";
         : redescribe;
         }
      : return;   
      }
      
   mage_end : subroutine {
      : set_true "defeated_mage";
      : set_true "mage_won";
      : set_true "battle_won";
      : add var = "score" value = "10";
      : set_string var = "clearing_2_descr" {("The battle is over for now.  The MEI office is to the north, and the road past the farm is to the east.")};
      : print "The mage collapses, still trying to mutter spells, on the brink of MEI-sponsored death.";
      : if (reputation <= -1) {
         : add_choice "Kill her. These victories taste good." {
            : print "You walk up to her and kick strongly.  She wheezes, then becomes motionless.  Finally this job is making sense to you.  You should report your success to the office.\n(Your score has gone up by ten points.)";
            : add var = "reputation" value = "-1";
            : create "mage_body" target = "clearing_2";
            : return;
            }
         : add_choice "Maybe try leaving her alone this time. You'll get the credit all the same." {
            : print "The mage wheezes, but manages to cast some sort of spell on herself that lets her body levitate two feet off the ground then float back into the trees.  Now it's time to return to MEI with the good news.\n(Your score has gone up by ten points.)";
            : add var = "reputation" value = "1";
            : create "battle_xyz" target = "clearing_2";
            : return;
            }
         }
      : else_if (reputation >= 1) {
         : add_choice "Maybe try killing her this time." {
            : print "You walk up to her and kind of kick her a bit just to see how she responds.  Apparently it's strong enough to kill her entirely.  You get a sour churn in your stomach, but it passes.  It feels good to finally get a definitive win.  You should report your success to the office!\n(Your score has gone up by ten points.)";
            : add var = "reputation" value = "-1";
            : create "mage_body" target = "clearing_2";
            : return;
            }
         : add_choice "Let her be. You're doing your job, but there's still no reason to kill her, even temporarily." {
            : print "The mage wheezes, and you shudder, unnerved by the whole affair.  You know she'll be better soon, but still.  Guess it's time to return to the MEI office.\n(Your score has gone up by ten points.)";
            : add var = "reputation" value = "1";
            : create "battle_xyz" target = "clearing_2";
            : return;
            }
         }
      : else {
         : add_choice "Kill her." {
            : print "You walk up to her and kick her.  She dies.  It's not a pleasant feeling as her reanimator starts up, but you're just doing your job.  Time to get back to MEI with the news, you guess.\n(Your score has gone up by ten points.)";
            : add var = "reputation" value = "-1";
            : create "mage_body" target = "clearing_2";
            : return;
            }
         : add_choice "Let her be." {
            : print "The mage wheezes, and you shudder.  You know she'll be better soon, but still.  Guess it's time to return to the MEI office.\n(Your score has gone up by ten points.)";
            : add var = "reputation" value = "1";
            : create "battle_xyz" target = "clearing_2";
            : return;
            }
         }      
         
      : choose "What will you do?";
      }
      


   demon_fight : subroutine {
      : set_integer var = "defense_mod" {(0)};
      : if (is_club) {
         : add var = "club_count" value = "1";
         : store_random var = "temp_lose_hp";
         : set_integer var = "temp_lose_hp" {(random(3) + 3)} ;
         : if (reputation < 0) {
            : set_integer var = "temp_lose_hp" {(temp_lose_hp - (reputation * 2))};
            }
         : if (temp_lose_hp > opponent_hp) {
            : set_integer var = "temp_lose_hp" {(opponent_hp - 1)};
            }
         : add var= "opponent_hp" {(0 - temp_lose_hp)};
         : add var = "total_warrior_damage" {(temp_lose_hp)};
         : set_string var = "opponent_hit" {("You wave your club around for " + temp_lose_hp + " damage.")};
         : print {(opponent_hit)};
      }
      : if (is_wit) {
         : print "You try to make a pun about fire, but fail.";
         }
      : if (is_stand) {
         : print "As in orcish thought you stand.";
         }
      : gosub "demon_hit";
      : return;
      }

   demon_parry : subroutine {
      : if (is_arms) {
         : print "You wave your arms around randomly, trying to protect yourself.";
         : set_integer var = "defense_mod" {(random(4))};
      }
      : if (is_mitts) {
         : print "You raise your oven-mitted hands, ready to soften an incoming blow.";
         : set_integer var = "defense_mod" {(random(4) + 1)};
      }
      : if (is_wheel) {
         : print "You hold the wheel in front of your body, bracing for whatever comes.";
         : set_integer var = "defense_mod" {(random(3) + 2)};
      }

      : gosub "demon_hit";
      : return;
   }

   demon_spell : subroutine {
      : if (is_wax) {
         : print "You attempt to form a seal over the demons by mumbling WAX LIPS, but no wax appears.  It'd probably be melted by their fire anyway.";
         : gosub "demon_hit";
         }
      : else_if (is_robe) {
         : print "You say the spell ROYAL ROBE, and a purple sheet of energy forms from your arms and flies toward the demons.  However, their bodies seem to burn right through it.";
         : gosub "demon_hit";
         }
      : else_if (is_whip) {
         : if (cast_whip) {
            : print "You cast WATER WHIP, but nothing else seems to happen.";
            }
         : else {
            : print "You say WATER WHIP, and voluminous jets of water spray from your hands onto the demons.  They sizzle and smoke, trying to relight the fires they had created.";
            : set_true "cast_whip";
            }
         : gosub "demon_hit";
         }
      : else_if (is_cabbage) {
         : if (cast_cabbage) {
            : print "You cast CABBAGE CLOUD, but nothing else seems to happen.";
            }
         : else {
            : print "You attempt to fill the demons' minds with a green fog when you say CABBAGE CLOUD.  It's hard to tell, but they do seem slightly more confused.";
            : set_true "cast_cabbage";
            }
         : gosub "demon_hit";
         }      
      : else_if (is_walk) {
         : print "A beam of white energy travels from your feet toward the demons' as you say SLOW WALK, but the spell misses, instead going directly between them.";
         : gosub "demon_hit";
         }
      : else {
         : print "error";
         }
      }

  demon_hit : subroutine {

      : if (random(10) > 3) {
         : if (!cast_whip && (opponent_hp > 1)) {
            : store_random var = "temp_lose_hp";
            : set_integer var = "temp_lose_hp" {(random(10) + 7 - defense_mod)} ;
            : add var= "your_hp" {(0 - temp_lose_hp)};
            : cycle key = "demon_events" predictable_order = "false" skip_interval = "0" {
               : set_string var = "demon_attack_descr" {("The demons hurl fireballs at you and burn you for ")};
               : set_string var = "demon_attack_descr" {("The demons make fire fly from their hands and immolate you for ")};
               : set_string var = "demon_attack_descr" {("The demons wave their arms, sending a wall of fire at you.  You're burned for ")};
               : set_string var = "demon_attack_descr" {("Fire shoots from the demons' hands, burning you for ")};               
               }
            : set_string var = "your_hit" {(demon_attack_descr + temp_lose_hp + " damage!")};
            : print {(your_hit)};
            }
         : else_if (opponent_hp > 1) {
            : store_random var = "temp_lose_hp";
            : set_integer var = "temp_lose_hp" {(random(10) + 15 - defense_mod)} ;
            : if (temp_lose_hp > opponent_hp) {
               : set_integer var = "temp_lose_hp" {(opponent_hp - 1)};
               }
            : add var= "opponent_hp" {(0 - temp_lose_hp)};
            : cycle key = "demon_fails" predictable_order = "false" skip_interval = "0" {
               : set_string var = "opponent_hit" {("The demons attempt to burn you with fire flung from their hands.  But their fire sputters and fizzles due to the water that's drenched them, and they instead burn themselves for " + temp_lose_hp + " damage!")};
               : set_string var = "opponent_hit" {("The demons attempt to burn through the water that soaks them, but instead singe themselves for " + temp_lose_hp + " damage!")};
               : set_string var = "opponent_hit" {("WATER WHIP  douses the demons.  They try to retaliate with fire, but the resulting steam boils them for " + temp_lose_hp + " damage!")};
               }
            : print {(opponent_hit)};
            }
         }
      : else {
         : if (!cast_cabbage && (opponent_hp > 1)) {
            : store_random var = "temp_lose_hp";
            : set_integer var = "temp_lose_hp" {(random(4) + 4)} ;
            : add var= "your_hp" {(0 - temp_lose_hp)};      
            : set_string var = "your_hit" {("The demons poison your mind with evil thoughts, and your psyche is battered for " + temp_lose_hp + " in damage!")};
            : print {(your_hit)};
            }
         : else_if (opponent_hp > 1) {
            : store_random var = "temp_lose_hp";
            : set_integer var = "temp_lose_hp" {(random(7) + 7)} ;
            : if (temp_lose_hp > opponent_hp) {
               : set_integer var = "temp_lose_hp" {(opponent_hp - 1)};
               }
            : add var= "opponent_hp" {(0 - temp_lose_hp)};
            : set_string var = "opponent_hit" {("The demons attempt to sear your mind with evil thoughts.  But they're confused, and instead they wound their own minds for " + temp_lose_hp + " damage!")};
            : print {(opponent_hit)};
            }
         }
      
      : if (your_hp <= 0) {
         : set_integer var = "your_hp" value = "0";
         : set_true "demons_lost";
         : set_true "battle_lost";
         : refresh_status_bar;
         : print "With your vitality spent, you collapse to the ground, dead.";
         : add var = "battle_losses" value = "1";
         : press_any_key;
         : destroy "27_gold";
         : set_theme "main_theme";
         : goto "death_2";
         : create "battle_xyz" target = "clearing_2";
         : set_string var = "clearing_2_descr" {("The battle is over for now.  The MEI office is to the north, and the road past the farm is to the east.")};
         : redescribe;
         }
      : else_if (opponent_hp <= 1) {
         : set_integer var = "opponent_hp" value = "1";
         : refresh_status_bar;
         : gosub "demon_end";
         : press_any_key;
         : set_theme "main_theme";
         : goto "clearing_2";
         : redescribe;
         }
      : return;   
      }
      
   demon_end : subroutine {
      : set_true "defeated_demons";
      : set_true "demons_won";
      : set_true "battle_won";
      : add var = "score" value = "10";
      : set_string var = "clearing_2_descr" {("The battle is over for now.  The MEI office is to the north, and the road past the farm is to the east.")};
      : print "The demons collapse upon each other.  So much for a romantic date or whatever they wanted.  You can still smell a bit of sulfur as they groan in the twilight of consciousness.";
      : if (reputation == -1) {
         : add_choice "Kill them, just like you did for the warrior. You've had enough." {
            : print "You walk up to them and kick a little more firmly this time around.  Their reanimators start whirring and it feels kinda satisfying.  You should report your success to the office.\n(Your score has gone up by ten points.)";
            : add var = "reputation" value = "-1";
            : create "demon_bodies" target = "clearing_2";
            : set_true "opp_killed";
            : return;
            }
         : add_choice "Maybe try leaving them this time. It'll still count as a victory when you report back to the office." {
            : print "The demons make general sounds of exhaustion, but you let them be.  They get up and stumble away.  You'd better head to the MEI office to claim your victory before they're fully recovered.\n(Your score has gone up by ten points.";
            : add var = "reputation" value = "1";
            : create "battle_xyz" target = "clearing_2";
            : set_true "opp_spared";
            : return;
            }
         }
      : else {
         : add_choice "Maybe try killing them this time." {
            : print "You walk up to them and kind of kick them a bit just to see how they respond.  Apparently it's strong enough to kill them entirely.  You get a sour churn in your stomach, but it passes.  It feels good to finally get a definitive win.  You should report your success to the office!\n(Your score has gone up by ten points.)";
            : add var = "reputation" value = "-1";
            : create "demon_bodies" target = "clearing_2";
            : set_true "opp_killed";
            : return;
            }
         : add_choice "Let them be, just like you did for the warrior. You'll get your victory when you report back to the office." {
            : print "The demons make general sounds of exhaustion, and now that the heat of battle is dissipated, it makes you feel a little ill.  You reassure yourself that they'll be fine as their reanimators start whirring.  You'd better head to the MEI office to claim your victory before they're fully recovered.\n(Your score has gone up by ten points.)";
            : add var = "reputation" value = "1";
            : create "battle_xyz" target = "clearing_2";
            : set_true "opp_spared";
            : return;
            }
         }      
         
      : choose "What will you do?";
      }
      



   warrior_fight_2 : subroutine {
      : set_integer var = "defense_mod" {(0)};
      : if (is_club) {
         : add var = "club_count" value = "1";
         : store_random var = "temp_lose_hp";
         : set_integer var = "temp_lose_hp" {(random(1) + 1)} ;
         : if (temp_lose_hp > opponent_hp) {
            : set_integer var = "temp_lose_hp" {(opponent_hp - 1)};
            }
         : add var= "opponent_hp" {(0 - temp_lose_hp)};
         : add var = "total_warrior_damage" {(temp_lose_hp)};
         : set_string var = "opponent_hit" {("You vaguely swing your club for " + temp_lose_hp + " damage.")};
         : print {(opponent_hit)};
      }
      : if (is_wit) {
         : print "You try to think of something, but nothing comes.";
         }
      : if (is_stand) {
         : print "As in orcish thought you stand.";
         }
      : gosub "warrior_hit_2";
      : return;
      }

   warrior_parry_2 : subroutine {
      : if (is_arms) {
         : print "You wave your arms around randomly, trying to protect yourself.";
         : set_integer var = "defense_mod" {(random(2))};
      }
      : if (is_mitts) {
         : print "You raise your oven-mitted hands, ready to soften an incoming blow.";
         : set_integer var = "defense_mod" {(random(2) + 1)};
      }
      : if (is_wheel) {
         : print "You hold the wheel in front of your body, bracing for whatever comes.";
         : set_integer var = "defense_mod" {(random(3))};
      }

      : gosub "warrior_hit_2";
      : return;
   }

   warrior_spell_2 : subroutine {
      : if (is_wax) {
         : if (cast_wax) {
            : print "You cast WAX LIPS, but nothing else seems to happen.";
            }
         : else {
            : print "You mutter the spell WAX LIPS, and a red lump of wax condenses from the air and forms over the warrior's mouth!";
            : set_true "cast_wax";
            }
         : gosub "warrior_hit_2";
         }
      : else_if (is_robe) {
         : if (cast_robe) {
            : print "You cast ROYAL ROBE, but nothing else seems to happen.";
            }
         : else {
            : print "You say the spell ROYAL ROBE, and a purple sheet of energy seems to form from your arms.  It flies toward the warrior, wraps around her, and binds her tightly.  She struggles but fails to free herself.";
            : set_true "cast_robe";
            }
         : gosub "warrior_hit_2";
         }
      : else_if (is_whip) {
         : print "You fling a magical spray of water at the warrior when you chant WATER WHIP, but it doesn't seem to do anything other make her somewhat damp and angrier.";
         : gosub "warrior_hit_2";
         }
      : else_if (is_cabbage) {
         : print "You attempt to fill the warrior's mind with a green fog when you stammer CABBAGE CLOUD, but it doesn't appear to have any effect.";
         : gosub "warrior_hit_2";
         }      
      : else_if (is_walk) {
         : print "A beam of white energy travels from your feet toward the warrior's as you say SLOW WALK, but she jumps to the side and avoids it.";
         : gosub "warrior_hit_2";
         }
      : else {
         : print "error";
         }
      }

   warrior_hit_2 : subroutine {

      : if (random(10) > 3) {
         : if (!cast_robe && (opponent_hp > 1)) {
            : store_random var = "temp_lose_hp";
            : set_integer var = "temp_lose_hp" {(random(6) + 4 - defense_mod)} ;
            : add var= "your_hp" {(0 - temp_lose_hp)};
            : cycle key = "warrior_events" predictable_order = "false" skip_interval = "0" {
               : set_string var = "warrior_attack_descr" {("The warrior slashes her sword and slices you for ")};
               : set_string var = "warrior_attack_descr" {("The warrior slices her sword and slashes you for ")};
               : set_string var = "warrior_attack_descr" {("The warrior jabs her sword and cuts you for ")};
               : set_string var = "warrior_attack_descr" {("The warrior swings her sword and lacerates you for ")};               
               }
            : set_string var = "your_hit" {(warrior_attack_descr + temp_lose_hp + " damage!")};
            : print {(your_hit)};
            }
         : else_if (opponent_hp > 1) {
            : store_random var = "temp_lose_hp";
            : set_integer var = "temp_lose_hp" {(random(10) + 10)} ;
            : if (temp_lose_hp > opponent_hp) {
               : set_integer var = "temp_lose_hp" {(opponent_hp - 1)};
               }
            : add var= "opponent_hp" {(0 - temp_lose_hp)};
            : cycle key = "warrior_fails" predictable_order = "false" skip_interval = "0" {
               : set_string var = "opponent_hit" {("The warrior attempts to swing her sword at you.  But she can't escape her magical robe, and instead strains herself for " + temp_lose_hp + " damage!")};
               : set_string var = "opponent_hit" {("The warrior attempts to struggle free from her magical robe, but instead she constricts herself for " + temp_lose_hp + " damage!")};
               : set_string var = "opponent_hit" {("ROYAL ROBE binds the warrior.  She attempts to slice free, but instead cuts herself for " + temp_lose_hp + " damage!")};
               }            
            : print {(opponent_hit)};
            }
         }
      : else {
         : if (!cast_wax && (opponent_hp > 1)) {
            : store_random var = "temp_lose_hp";
            : set_integer var = "temp_lose_hp" {(random(4) + 4)} ;
            : add var= "your_hp" {(0 - temp_lose_hp)};      
            : set_string var = "your_hit" {("The warrior unleashes a battle cry and your ears burn for " + temp_lose_hp + " in damage!")};
            : print {(your_hit)};
            }
         : else_if (opponent_hp > 1) {
            : store_random var = "temp_lose_hp";
            : set_integer var = "temp_lose_hp" {(random(7) + 7)} ;
            : if (temp_lose_hp > opponent_hp) {
               : set_integer var = "temp_lose_hp" {(opponent_hp - 1)};
               }
            : add var= "opponent_hp" {(0 - temp_lose_hp)};
            : set_string var = "opponent_hit" {("The warrior attempts to scream in battle.  But her mouth is sealed with wax, and instead her cry hurts her for " + temp_lose_hp + " damage!")};
            : print {(opponent_hit)};
            }
         }
      
      : if (your_hp <= 0) {
         : set_integer var = "your_hp" value = "0";
         : set_true "battle_lost";
         : refresh_status_bar;
         : print "With your vitality spent, you collapse to the ground, dead.";
         : add var = "battle_losses" value = "1";
         : press_any_key;
         : destroy "13_gold";
         : set_theme "main_theme";
         : goto "death_2";
         : create "battle_xyz" target = "clearing_2";
         : set_string var = "clearing_2_descr" {("The battle is over for now.  The MEI office is to the north, and the road past the farm is to the east.")};
         : redescribe;
         }
      : else_if (opponent_hp <= 1) {
         : set_integer var = "opponent_hp" value = "1";
         : refresh_status_bar;
         : gosub "warrior_end_2";
         : press_any_key;
         : set_theme "main_theme";
         : goto "clearing_2";
         : redescribe;
         }
      : return;   
      }
      
   warrior_end_2 : subroutine {
      : set_true "defeated_warrior";
      : set_true "battle_won";
      : add var = "score" value = "10";
      : set_string var = "clearing_2_descr" {("The battle is over for now.  The MEI office is to the north, and the road past the farm is to the east.")};
      : print "The warrior collapses, heavily injured.  You hear an electric humming coming from her chest and you know it's her reanimator starting up.  She moans and attempts to get to her hands and knees, as if trying to crawl away.";
      : add_choice "Finish her. You'll finally win the battle!" {
            : print "You walk up to her and kind of kick her just to see how she responds.  Apparently your nudge was strong enough to kill her.  You get a sour churn in your stomach, but it passes.  After all these failures, it feels good to finally win.  You should report your success to the office!\n(Your score has gone up by ten points.)";
            : add var = "reputation" value = "-1";
            : set_true "opp_killed";
            : create "warrior_body" target = "clearing_2";
            : return;
            }
      : add_choice "Let her get away. You know her phone will record this as a victory for you." {
            : print "She moans and eventually manages to heft herself back into the woods.  Still, it's a win, and you should probably report it to MEI and get your next assignment.\n(Your score has gone up by ten points.)";
            : add var = "reputation" value = "1";
            : set_true "opp_spared";
            : create "battle_xyz" target = "clearing_2";
            : return;
            }
         : choose "What will you do?";
      }
      

   warrior_fight : subroutine {
      : set_integer var = "defense_mod" {(0)};
      : if (is_club) {
         : add var = "club_count" value = "1";
         : store_random var = "temp_lose_hp";
         : set_integer var = "temp_lose_hp" {(random(1) + 1)} ;
         : add var= "opponent_hp" {(0 - temp_lose_hp)};
         : add var = "total_warrior_damage" {(temp_lose_hp)};
         : set_string var = "opponent_hit" {("You vaguely swing your club for " + temp_lose_hp + " damage.")};
         : print {(opponent_hit)};
      }
      : if (is_wit) {
         : print "You mutter something inaudible.";
         }
      : if (is_stand) {
         : print "As in orcish thought you stand.";
         }
      : gosub "warrior_hit";
      : return;
      }

   warrior_parry : subroutine {
      : if (is_arms) {
         : print "You wave your arms around randomly, trying to protect yourself.";
         : set_integer var = "defense_mod" {(random(2))};
      }
      : if (is_mitts) {
         : print "You raise your oven-mitted hands, ready to soften an incoming blow.";
         : set_integer var = "defense_mod" {(random(2) + 1)};
      }
      : if (is_wheel) {
         : print "You hold the wheel in front of your body, bracing for whatever comes.";
         : set_integer var = "defense_mod" {(random(3))};
      }
      : gosub "warrior_hit";
      : return;
   }
   
   warrior_hit : subroutine {

      : if (random(10) > 3) {
      : store_random var = "temp_lose_hp";
      : set_integer var = "temp_lose_hp" {(random(6) + 4 - defense_mod)} ;
      : add var= "your_hp" {(0 - temp_lose_hp)};
            : cycle key = "warrior_init_events" predictable_order = "false" skip_interval = "0" {
               : set_string var = "warrior_attack_descr" {("The warrior slashes her sword and slices you for ")};
               : set_string var = "warrior_attack_descr" {("The warrior slices her sword and slashes you for ")};
               : set_string var = "warrior_attack_descr" {("The warrior jabs her sword and cuts you for ")};
               : set_string var = "warrior_attack_descr" {("The warrior swings her sword and lacerates you for ")};               
               }
            : set_string var = "your_hit" {(warrior_attack_descr + temp_lose_hp + " damage!")};
      //: set_string var = "your_hit" {("The warrior slashes her sword and slices you for " + temp_lose_hp + " damage!")};
      : print {(your_hit)};
      }
      : else {
      : store_random var = "temp_lose_hp";
      : set_integer var = "temp_lose_hp" {(random(4) + 4 - defense_mod)} ;
      : add var= "your_hp" {(0 - temp_lose_hp)};      
      : set_string var = "your_hit" {("The warrior unleashes a battle cry and your ears burn for " + temp_lose_hp + " in damage!")};
      : print {(your_hit)};
      }
      
      : if (your_hp <= 0) {
         : set_integer var = "your_hp" value = "0";
         : refresh_status_bar;
         : print "With your vitality spent, you collapse to the ground, dead.";
         : press_any_key;
         : destroy "13_gold";
         : set_theme "main_theme";
         : goto "death";
         : redescribe;
         
         }
      : return;   
      }
   
   jonathan_talk : subroutine {
      : set_true "is_jon_talked";
      : set_false "jon_1";
      : set_false "jon_2";
      : print "\"Dude, you look ... not great,\" Jonathan says in the laconic vowels of someone whose favorite hobby is a flavor of boarding--surf, snow, or skate.";
      : add_choice "Yeah, it was rough." {
         : set_true "jon_1";
         }
      : add_choice "You look not great yourself ... dude." {
         : set_true "jon_2";
         }
      : choose;
      : if (jon_1) {
         : print "\"Bummer, dude.  Yeah, it can be gnarly out there.  So, like, you need more gold,\" he says in a rising inflection so you can't tell if the final sentence is a statement or a question.";
         }
      : if (jon_2) {
         : print "He's either so laid back or so clueless that your sarcasm doesn't register. \"Yeah, I had a great night, man.  I'm only a few spells away now,\" he says, and temporarily seems to drift to someplace else.  \"Anyway, more gold, dude?\"";
         }
      : set_false "jon_1";
      : set_false "jon_2";
      : add_choice "Just one more time." {
         : set_true "jon_1";
         }
      : add_choice "Why else would I be here talking to you?" {
         : set_true "jon_2";
         }
      : choose;
      : if (jon_1) {
         : print "You look at him sheepishly.  \"No worries, my man.  Here are the forms,\" he says, handing a small stack of papers.";
         }
      : if (jon_2) {
         : print "\"A little unchill after the defeat, dude?  No worries.  You just gotta go with the flow, man.  You'll get there. Anyway, here are the forms,\" he says, handing you a stack of papers.";
         }
      : print "It takes you a while in the dim light with the sputtering pen he also gives you, but you complete the forms, return everything, and receive another bag of gold.";
      : create "13_gold" target = "inventory";
      : print "\"Awesome.  Boss said she wants to see you.  Good luck out there, man.  And in there, too,\" he says, pointing to the office behind him to the north.";
      : set_string var = "jonathan_descr" {("Jonathan works for MEI part-time, mostly because he gets a heavy discount on his Dreams.  He's working on becoming a Night Priest or a Night Knight or some such, always wearing that creepy hood.  He's working on something on his computer, but you could TALK TO him.")};
      : set_string var = "reception_descr" {("They sure keep the office dim.  All part of the atmosphere, you guess--\"there's danger around every corner!\".  You're in the reception area where the clients typically wait.  You, however, are supposed to go north to see the Boss.\nJonathan, the administrative assistant, casually regards you.")};
      : return;
   }
   
   jonathan_talk_2 : subroutine {
      : cycle key = "jonathan_2_events" predictable_order = "true" skip_interval = "0" max_loops = "1"  {
         : print "\"Good luck out there, dude,\" he says. \"Fight tight and lose loose!\"";
         : print  "\"Slice nice and fall tall!\" he says.";
         : print "\"Attack back and bleed speed!\" he says.";
         : print "\"Uh ... blow low and die high?  I'm kinda running out of these things, dude.\"";
         
         on_exhausted {
         : print "You're pretty sure Jonathan doesn't have any additional advice right now.  Maybe you could talk to him later.";
         }
         }
      : return;
      }
   
   boss_talk : subroutine {
      : print {("She begins without a greeting, her voice dripping saccharine. \"Henderson, Henderson.  Whatever will we do with you?\"  You hope it's a rhetorical question.  \"Of course, this is what happens when the regular monsters move back home or back to school and we're left to work with more local ... talent,\" she says.  She fiddles with the tablet she's holding, and you see a screen festering with numbers.  \"Let's see, your total damage from that last encounter was how many points?  Ah yes, " + total_warrior_damage +"!  What grace!  What a triumph!\" she says, then looks levelly at you.  \"Would you care to explain?\"")};
      : add_choice "Maybe if I had a better weapon ..." {
         : set_true "boss_1";
         }
      : add_choice "Maybe if I had some sort of armor ..." {
         : set_true "boss_2";
         }
      : add_choice "Maybe one of us is in the wrong line of work." {
         : set_true "boss_3";
         }
      : choose;
      : if (boss_1) {
         : print "\"Maybe we only give weapons to employees who won't hurt themselves with one, hmm?\" she says.  Her eyes sparkle blue in what others probably think is a beautiful way. \"Care to try again?\"";
         : add_choice "Maybe if I had some sort of armor ..." {
            : set_true "boss_2";
            : set_false "boss_1";
            }
         : add_choice "I'm serious." {
            : set_false "boss_1";
            : set_true "boss_5";
            }
         }
      : if (boss_2) {
         : print "\"Like what, gauntlets?  You know they don't make them big enough to fit your rather ungainly arms.  Maybe you could try oven mitts, hmm?\" she says.  Her eyes sparkle blue in what others probably think is a beautiful way. \"Care to offer a different explanation?\"";
         : add_choice "Maybe if I had a better weapon ..." {
            : set_true "boss_1";
            : set_false "boss_2";
            }
         : add_choice "I'm serious." {
            : set_false "boss_2";
            : set_true "boss_4";
            }
         }
      : if (boss_3) {
         : print "She taps on her tablet.  \"Indeed.  Your comment has been noted,\" she says through a tight, sparkling smile. \"Now try again.\"";
         : add_choice "Maybe if I had some sort of armor ..." {
            : set_true "boss_2";
            : set_false "boss_3";
            }
         : add_choice "Maybe if I had a better weapon ..." {
            : set_true "boss_1";
            : set_false "boss_2";
            }
         }
      : choose;
      : set_false "boss_3";
      : if (boss_1) {
         : print "\"Maybe we only give weapons to employees who won't hurt themselves with one, Henderson,\" she says, her voice still high and flitting.  \"Give me a real answer.\"";
         : add_choice "I don't ..." {
            : set_true "boss_3";
            }
         }
      : if (boss_2) {
         : print "\"Like what, gauntlets?  You know they don't make them big enough to fit your rather ungainly arms.  Maybe you could try oven mitts,\" she says, her voice still high and flitting. \"Give me a real answer, Henderson.\"";
         : add_choice "I don't ..." {
            : set_true "boss_3";
            }
         }
      : if (boss_1 || boss_2) {
         : choose;
         : set_false "boss_1";
         : set_false "boss_2";
         }
      : if (boss_5) {
         : print "\"Of course you are,\" she says, her voice still high and flitting.  \"Apparently a club or a tree branch or your arms aren't good enough, even though they are for every other orc.  Apparently special, precious you needs a bow or a broadsword.  Well, you don't.  I'm giving you one last try:  tell me the problem.\"";
         : add_choice "I ... I mean ...";
         : choose;
         }
      : if (boss_4) {
         : print "\"Of course you are,\" she says, her voice still high and flitting. \"Apparently your thick, green hide isn't good enough, even though it is for every other orc.  Apparently special, precious you needs chain mail or plate mail or at least an email address, since you didn't have one on your application.  Well, you don't. I'm giving you one last try:  tell me the problem.\"";
         : add_choice "I ... I mean ...";
         : choose;
         }
      : if (boss_3) {
         : print "\"You don't what?\" she says.  \"Spit it out, Henderson.\"";
         }
      : if (boss_4 || boss_5) {
         : print "\"Yes, whatever do you mean, dear Henderson?\" she says.  \"Spit it out.\"";
         }
      : add_choice "I don't want to hurt people, okay?";
      : choose;
      : set_false "boss_3";
      : print "For a moment, she looks like she flew into a bug zapper.  \"You ... understand the company, yes?  And the position?  It's always hard to tell with you orcs.  Tell me, Henderson, what do we do here at Monster Encounters Incorporated?\"";
      : add_choice "We let clients encounter monsters, ma'am." {
         : set_true "boss_1";
         }
      : add_choice "We incorporate DANGER! DUNGEONS! DREAMS! DARING! and a bunch of other D-words." {
         : set_true "boss_2";
         }
      : add_choice "We let clients beat monsters silly, blah blah blah." {
         : set_true "boss_3";
         }
      : choose;
      : if (boss_1) {
         : print "\"Very good.  And what do you think makes for a good monster encounter?\"";
         : set_false "boss_1";
         }
      : if (boss_2) {
         : print "She sighs.  \"Your references suggested you were familiar enough with D's.  Well, what would make a monster encounter daring and dangerous and degree-granting?\"";
         : set_false "boss_2";
         }
      : if (boss_3) {
         : print "\"Something you've abundantly proven, my dear,\" she says.  \"And what makes a silly-beating of a monster such as yourself so successful?  From the client's perspective, Henderson.\"";
         : set_false "boss_3";
         }
      : add_choice "When the monster puts up a fight?" {
         : set_true "boss_1";
         }
      : add_choice "Service with a smile?" {
         : set_true "boss_2";
         }
      : add_choice "Teamwork making the dream work?" {
         : set_true "boss_3";
         }
      : choose;
      : if (boss_1) {
         : print "\"Very good.  Could you then please explain why a monster, such as yourself, employed at a monster encounter company, such as ours, is unable to provide such a fight?";
         : set_false "boss_1";
         }
      : if (boss_2 || boss_3) {
         : print "\"Did you even watch the training videos?  Jonathan!\" she practically screams through the wall, her glittery wings straining. \"Did Henderson watch the training videos?\"";
         : print "\"Everyone does, Boss,\" Jonathan says, his voice muffled against the closed office door.";
         : print "\"And you're ... one of everyone,\" she says to you.  \"So you must certainly know a good encounter involves an actual fight.  The little problem we can't seem to solve is why you can't give one.\"";
         : set_false "boss_2";
         : set_false "boss_3";
         }
      : add_choice "... I don't want to talk about it." {
         }
      : add_choice "... you know why." {
         }
      : choose;
      : print "Her wings flap and eyes close as she breathes deeply.  Then she launches into the speech you knew was coming. \"If this is about your father, Henderson, we've already discussed it.  I told him he shouldn't act like he was a client.  I told him other adventurers might encounter _him_.  I told him it might not be the Dreamlike kind of danger we otherwise guarantee.  We tested his reanimator before he left; you know that. We just didn't expect an entire party of adventurers to arrive with ... a few things to discuss, shall we say.  MEI regrets the error.\"";
      : add_choice "Yeah." {
         }
      : add_choice "I know." {
         }
      : add_choice "Let's drop it." {
         }
      : choose;
      : print "\"Zildud,\" she says.  It's the only time she'll ever call you by your first name.  She flicks her fingers again on her tablet. \"You've died--seventeen times this week.  And you've always come back.  And the adventurers will always come back, too.  The reanimator will always, always work under the conditions for which it was designed.  As you know, peak season is already over. If we don't keep the adventurers coming this autumn, the Dream Factory might dry up.  People will lose their jobs--starting with you,\" she says, her voice like hollyhock perfume. \"And probably your mother.  You need the money, my dear.  The Dream of these adventurers is to have a fight.  So you best get out there and start giving them one.\"  Her wings fold neatly behind her back and she starts moving to some darker corner of her office, signaling her little lecture is now over.  You snort, then head back to the reception area.";
      : set_true "boss_over";
      : set_string var = "reception_descr" {("They sure keep the office dim.  All part of the atmosphere, you guess--\"there's danger around every corner!\".  You're in the reception area where the clients typically wait.  You can exit the office if you're done here.\nJonathan, the administrative assistant, casually regards you.")};
      : press_any_key;
      : goto "reception";
      : redescribe;
      : return;
   }
      
}
   
connections {

   ## Connects locations together (bidirectional)
   
   from, direction, to = [
      winter_house,west_oneway,winter_road,
      winter_road,north_oneway,winter_carriage,
      winter_carriage,west_oneway,winter_clearing,
      winter_clearing,north_oneway,d15,
      kitchen_4,east_oneway,bedroom_4,
      final_1,north_oneway,final_2,
      final_1,south_oneway,d15,
      final_1,east_oneway,d15,
      final_1,west_oneway,d15,
      final_2,north_oneway,final_3,
      final_2,south_oneway,d15,
      final_2,east_oneway,d15,
      final_2,west_oneway,d15,
      final_3,west_oneway,final_4,
      final_3,east_oneway,d15,
      final_3,north_oneway,d15,
      final_3,south_oneway,d15,
      final_4,south_oneway,final_5,
      final_4,north_oneway,d15,
      final_4,east_oneway,d15,
      final_4,west_oneway,d15,
      final_5,south_oneway,final_6,
      final_5,north_oneway,d15,
      final_5,east_oneway,d15,
      final_5,west_oneway,d15,
      final_6,west_oneway,clearing_3,
      final_6,east_oneway,d15,
      final_6,south_oneway,d15,
      final_6,north_oneway,d15,
      bedroom, west, kitchen,
      house, enter, kitchen,
      house, west, road,
      road, west_oneway, path_2,
      road, north_oneway, d15,
      road, south_oneway, d15,
      path_2,south_oneway,path_3,
      path_2,north_oneway,d15,
      path_2,west_oneway,d15,
      path_2,east_oneway,d15,
      path_3,east_oneway,path_4,
      path_3,west_oneway,d15,
      path_3,north_oneway,d15,
      path_3,south_oneway,d15,
      path_4,east_oneway,path_5,
      path_4,west_oneway,d15,
      path_4,south_oneway,d15,
      path_4,north_oneway,d15,
      path_5,south_oneway,path_6,
      path_5,north_oneway,d15,
      path_5,east_oneway,d15,
      path_5,west_oneway,d15,
      path_6,west_oneway,path_7,
      path_7,south_oneway,path_8,
      path_8,east_oneway,path_9,
      path_9,east_oneway,path_10,
      path_10,north_oneway,path_11,
      path_11,north_oneway,clearing,
      clearing_lose,north_oneway,office_ext,
      office_ext,enter,reception,
      reception,north,boss_office,
      office_ext_2,east_oneway,house_2,
      house_2,enter_oneway,kitchen_2,
      kitchen_2,east_oneway,bedroom_2,
      house_3, enter, kitchen_3,
      bedroom_3,west,kitchen_3,
      house_3,west,road_2,
      road_2,south,pond,
      road_2,north,carriage,
      road_2,west,southroad,
      southroad,north,farm,
      windmill_top,down_oneway,farm,
      southroad,west,clearing_2,
      clearing_2,north,office_2,
      office_2,enter,reception_2,
      office_2,east,northroad,
      northroad,east,carriage,
      carriage,north,truck,
      carriage,east,sewer,
      carriage,enter,carroll,
      truck,enter,in_truck,
      
   ]
}

######################################
#  Vocabulary                        #
######################################

vocabulary {
   : experimental_replace {
      text = go in
      with = in
   }
   : experimental_replace {
      text = go out
      with = out
   }
//   : noun / aliases = [jars, jar]
   : noun / aliases = [barrow, wheelbarrow]
   : noun / aliases = [cloak, hood]
   : noun / aliases = [cabinets,cupboards]
   : noun / aliases = [refrigerator, fridge, freezer]
   : noun / aliases = [pot, cauldron]
   : noun / aliases = [orchard, trees]
   : noun / aliases = [books, bookshelf, shelf]
   : noun / aliases = [mother, mom, ma]
   : noun / aliases = [photo,photograph,picture]
   : noun / aliases = [grating, grate]
   : noun / aliases = [thermos,soup,toadstool]
   : noun / aliases = [pipe, sewer]
   : noun / aliases = [carroll, uncle]
   : noun / aliases = [scroll, spell]
   : noun / aliases = [truck, bumpers]
   : noun / aliases = [tire, cracked, seat]
   : noun / aliases = [wax, ceiling, cieling, jar, sealing]
   : noun / aliases = [bottle, glass]
   : noun / aliases = [box, glove, glovebox]
   : noun / aliases = [book, history]
   : noun / aliases = [bodies, demon, demons, warrior, mage, angel, angels, psion, psions, gnome]
   : noun / aliases = [body, warrior]
   : noun / aliases = [boat, toy, ship]
   : noun / aliases = [lightning, bolt]
   : noun / aliases = [slippers, shoes, flats, ballet]
   : noun / aliases = [cabbage, head]
   : noun / aliases = [spices, spice, bowl, bowls]
   : noun / aliases = [skin, boar, boarskin]
   : noun / aliases = [mattress, bed, straw]
   : noun / aliases = [window, pane, windowpane]
   : noun / aliases = [gold, 13, pouch, 27, 35, 43, 56]
   : noun / aliases = [nametag, tag, badge, ID]
   : noun / aliases = [code, qr]
   : noun / aliases = [sign, MEI]
   : noun / aliases = [logo, MEI]
   : noun / aliases = [jonathan, johnathan, jonathon, jon, john, johnathon, assistant, secretary]
   : noun / aliases = [boss, wings, faerie, fairy]
   : noun / aliases = [office, reception, area]
   : noun / aliases = [computer, desk, screen]
   : noun / aliases = [gold, 16, pouch]
   : noun / aliases = [deck, card, cards, king, hearts]
   : noun / aliases = [boat, toy, ship]
   : noun / aliases = [seeds, seed, packet, pack, cabbage, envelope]
   : noun / aliases = [umbrella, propeller]
   : noun / aliases = [sink, edge, yellow, yellowish, faucet]
   : noun / aliases = [mitts, oven, mitt, pair]
   : noun / aliases = [reanimator, animator, reanimater, animater]
   : noun / aliases = [pond, water, pool]
   : noun / aliases = [path, stone, stones]
   : noun / aliases = [windmill, mill, blades, crosspiece]
   : noun / aliases = [dirt, patch, earth, ground]
   : noun / aliases = [brochure, map]
   : verb / aliases = [exit, out, leave]
   : verb / aliases = [enter, in]
   : verb / aliases = [wait, z]
   : verb / aliases = [get, pick]
   : verb / aliases = [purloin, purloing]
   : verb / aliases = [attack, atk, hit, kill, kick]
   : verb / aliases = [parry, par]
   : verb / aliases = [examine, search, check]
   : verb / aliases = [break, smash]
   : verb / aliases = [forward, f]
   : verb / aliases = [give, offer]
//   : verb / aliases = [left, l]
//   : verb / aliases = [right, r]
   : verb / aliases = [turn, t]
   : verb / aliases = [undo, rewind]
}


## Print the objective when the game starts

on_startup {
   : print "You galumph in the front door, then sigh.  \"Hey, Ma,\" you say.";
   : print "\"Dud!\" your mother cries.  (You have asked her many times not to call you Dud.)  \"How was it today?  Any better?\"";
   : print "\"It was a dwarf wizard.  A single dwarf wizard.  A single, stupid, level 1 dwarf wizard that I couldn’t bring myself to hurt,\" you say.    You wave your club around the small kitchen, demonstrating its pristine gleam.  \"So, no, not better.\"";
   : print "\"Oh,\" she says, and looks down for a moment.  Then she looks at the table.  \"I made you some boar.\"";
   : print "You know you should stay and talk longer.  It’s rare that you even see each other, given your work schedules.  But after the miserable week you’ve had in your new job, you just want to throw your club in a corner and crash into bed.  You grab both fried boar hocks on the way to your room.  \"Thanks, Ma,\" you say, and close the door behind you.";
   : print "Soon enough, it's another day.";
//   : print "You eat, collapse on your bed, have the same empty Dream, and soon enough it's another day.";
   : print "\n\n<(Press the Enter key to advance whenever you see the yellow cursor.  This story is best experienced on a computer with Chrome, Firefox, or Edge.)<#555>>";
   : press_any_key;
}

## Execute this every time a player moves or redescribes a location
on_pre_describe {
//   : if (is_at "clearing_lose" && !has_clearing_lose_points) {
//      : add var = "score" value = "1";
//      }
   : if (is_at "clearing" && !has_clearing_points) {
      : add var = "score" value = "2";
      }
   : if (is_at "sewer" && !is_first_entered()) {
      : set_string var = "sewer_descr" {("You're at the edge of the woods where there's a large sewer pipe that's cut into a small hillside.  You can go west to Uncle Carroll's house.")};
      }
   : if (is_at "sewer" && !is_first_entered() && has_been_in_sewer) {
      : set_string var = "sewer_descr" {("You're at the edge of the woods where there's a large sewer pipe that's cut into a small hillside.  You can go west to Uncle Carroll's house or you can enter the sewer again if you must.")};
      }
}

on_describe {

   : if (is_at "pond") {
      : add var = "pond_count" value = "1";
      : if ((pond_count >= 4) && (has_not_created "glass_bottle")) {
         : print "You catch a flash of light from something from underneath the bridge.";
      }
   }

   : if (is_at "kitchen_3") {
      : add var = "kitchen_count" value = "1";
      : if ((kitchen_count ==4) && (has_not_created "sponge" && has_not_created "full_sponge")) {
         : set_string var = "kitchen_sponge" {("Your kitchen is nice enough, you guess.  It's got a stove and a sink and a microwave where you heat up your frozen rat burritos.  Your bedroom is to the east, and you can exit your house.")};
         }
      : if ((kitchen_count >= 3) && (has_not_created "sponge" && has_not_created "full_sponge")) {
         : print "You notice something small and yellowish fall off the counter near the sink.";
         : create "sponge" target = "kitchen_3";
         : set_string var = "kitchen_sponge" {("Your kitchen is nice enough, you guess.  It's got a stove and a sink and a microwave where you heat up your frozen rat burritos.  Your bedroom is to the east, and you can exit your house.")};
         }
      }

   : if ((is_at "d4" || is_at "d6" || is_at "d9" || is_at "d14" || is_at "d5") && is_first_entered()) {
      : add var = "dungeon_commentary" value = "1";
      : if (dungeon_commentary == 1) {
         : print "That's weird.  There was never anything in this area before.";
         }
      : else_if (dungeon_commentary == 2) {
         : print "Here's something else that hasn't been in your Dream before.";
         }
      : else_if (dungeon_commentary == 3) {
         : print "More new stuff.  Weird.";
         }
      : else_if (dungeon_commentary == 4) {
         : print "It's not clear why all this stuff is popping up in your Dream now.  You're not sure what to think about that.";
         }
      }

   : if (is_at "death_2" && (battle_losses >= 3)) {
      : if (battle_number == 1) {
         : if (has_robe) {
            : print "Hmm ... you think you've got the right spell to defeat the warrior, but maybe you're not using it soon enough.  Maybe Uncle Carroll would have some advice.";
            }
         : else_if (!has_spells) {
            : print "Hmm ... you're not sure you've got anything that will be able to defeat the warrior.  Maybe you need to talk to Uncle Carroll again?";
            }
         : else {
            : print "Hmm ... you're not sure any of the spells you've got will be enough to defeat the warrior.  Maybe you should try finding something else from the song?";
            }
         }
      : else_if (battle_number == 2) {
         : if (has_whip) {
            : print "Hmm ... you think you've got the right spell to defeat the demons, but maybe you're not using it soon enough.  Maybe Uncle Carroll would have some advice.";
            }
         : else {
            : print "Hmm ... you're not sure any of the spells you've got will be enough to defeat the demons.  Maybe you should try finding something else from the song?";
            }
         }
      : else_if (battle_number == 3) {
         : if (has_wax) {
            : print "Hmm ... you think you've got the right spell to defeat the mage, but maybe you're not using it soon enough.  Maybe Uncle Carroll would have some advice.";
            }
         : else {
            : print "Hmm ... you're not sure any of the spells you've got will be enough to defeat the mage.  Maybe you should try finding something else from the song?";
            }
         }
      : else_if (battle_number == 4) {
         : if (has_cabbage) {
            : print "Hmm ... you think you've got the right spell to defeat the angels, but maybe you're not using it soon enough.  Maybe Uncle Carroll would have some advice.";
            }
         : else {
            : print "Hmm ... you're not sure any of the spells you've got will be enough to defeat the angels.  Maybe you should try finding something else from the song?";
            }
         }
      : else_if (battle_number == 5) {
         : if (has_walk) {
            : print "Hmm ... you think you've got the right spell to defeat this annoying clock gnome, but maybe you're not using it soon enough.  Maybe Uncle Carroll would have some advice.";
            }
         : else {
            : print "Hmm ... you're not sure any of the spells you've got will be enough to defeat this annoying clock gnome.  Maybe you should try finding something else from the song?  Or maybe you could just club him.";
            }
         }
      }

   : if (is_at "boss_talk_final") {
      : gosub "boss_talk_end";
      }

   : if (is_at "bedroom" && is_first_entered()) {
      : print "Pretty soon it'll be time for you to head to work.  You should probably try to remember everything this time.\n\n<Type HELP followed by Enter for some general information on how to play this game.<#555>>";
      }

   : if (is_at "road" && is_first_entered()) {
      : if (is_carried "club") {
         : print "\"Have a good day at work, Dud!\" your mother yells to you from the front door of the house.  You have asked her many times not to call you Dud.";
         }
      : else {
      : print "\"Have a good day at work, Dud!  Did you remember your club this time?\" your mother yells to you from the front door of the house.";
      }
   }
   
//   : if (is_at "clearing_lose" && !has_clearing_lose_points) {
//      : print "(Your score has gone up by one point.)";
//      : set_true "has_clearing_lose_points";
//      }
      
   : if (is_at "clearing" && !has_clearing_points) {
      : print "(Your score has gone up by two points.)";
      : set_true "has_clearing_points";
      }

   : if (is_at "road_2" && (battle_number == 5) && battle_won && !has_all_spells) {
      : print "Man, you're tired.  And you guess you've won all the battles you need for your promotion.  You suppose you could just go to sleep.  But you're pretty sure you haven't gotten all the spells from Uncle Carroll yet.";
      }

   : if (is_at "kitchen_3" && (battle_number >= 3) && !no_mother) {
      : print "You haven't seen your mother in a while.  That's kind of weird.  But she's probably just working.  Your schedules are often opposite each other.";
      : set_true "no_mother";
      }

}

## Test VERB NOUN that the player types and executes conditional actions

on_command {

   : match "take blood" {
      : if (is_present "blood") {
         : print "Even if you could clean the dirt off of it, it's unlikely you'd be able to put it back into your body.";
         }
      }

   : match "x jar" {
      : if (is_at "kitchen") {
         : set_sentence "x jars";
         }
      }

   : match "open scroll; unroll scroll" {
      : if (is_carried "spell_scroll") {
         : set_sentence "x scroll";
      }
   }

   : match "start umbrella" {
      : if (is_carried "umbrella") {
         : set_sentence "open umbrella";
      }
   }

   : match "wake _; awake _; awaken _" {
      : if (is_in_dungeon) {
         : print "It's not quite that simple. You'll have to find the exit of your Dream.";
         }
      : else {
         : print "You're already awake.";
         }
      }

   : match "sleep _" {
      : if (!is_at "bedroom" && !is_at "bedroom_2" && !is_at "bedroom_3" && !is_at "bedroom_4") {
         : print "The only place you like to sleep is in your bed.";
      }
   }

   : match "x burrito" {
      : if (is_at "kitchen" || is_at "kitchen_3") {
         : print "You ate the last one a few days ago. They're fine, you guess.";
      }
   }
   
   : match "eat burrito" {
      : if (is_at "kitchen_3") {
         : print "There are none left in the freezer. Besides, you're not hungry.";
         : done;
      }   
      
   }

   : match "x land" {
      : if (is_at "house" || is_at "house_3") {
         : print "You live in a typical clearing in the woods.";
      }
   }

   : match "smell *" {
      : if (is_present {(s1())}) {
         : print "Everything smells the way it should.";
      }
   }
   
   : match "taste *; lick *" {
      : if (is_present {(s1())}) {
         : print "Frankly, you'd rather not.";
      }      
   }

   : match "throw *" {
      : if (s1() != "unknown" && is_carried {(s1())}) {
         : print "Try dropping that instead.";
         }
      : else_if (s1() != "unknown") {
         : print "You don't have one of those!";

      }
   }

   : match "open seeds" {
      : if (is_present "seeds" && !is_at "farm") {
         : print "You'd hate for the seeds to spill out if you ripped open the packet. Maybe you can find a place to plant them.";
         : done;
         }
      : else_if (!is_present "seeds") {
         : print "There's no packet of seeds here.";
         }
   }

   : match "x rust" {
      : if ((is_at "farm") || (is_at "windmill_top")) {
         : print "The metal of the windmill is rough and pitted.";
      }
   }

   : match "x fangs; x fang" {
      : if (is_present "snake") {
         : print "Shiny, pointy, and likely venomous.";
         }
      }
   
   : match "take fangs; take fang" {
      : if (is_present "snake") {
         : print "You have interest in neither ophiology nor dentistry.";
         }
      }

   : match "take cloak; wear cloak" {
      : if (is_present "cloak") {
         : print "The cloak is clearly Jonathan's. He needs it for his Dream.";
         : done;
         }
   }

   : match "x farm; x farms; x farmstead" {
      : if (is_at "house" || is_at "house_3" || is_at "farm" || is_at "windmill_top") {
         : print "Most of the farms around here grow turnips.  Why does this area need so many turnips?";
         }
      : else_if (is_at "southroad") {
         : print "It's tough to see much from here.  You can go north to explore the old farm.";
      }
   }

   : match "x paths; x trails; x path; x trail" {
      : if (is_at "paths") {
         : print "The paths are mostly trampled dirt.  None really seem more traveled than the others.";
      }
   }

   : match "open jar" {
      : if (is_present "ceiling_wax") {
         : print "You open the jar and it's filled with some rainbow-colored goo that smells like rotting wood.  You close the jar again.";
      }
   }

   : match "fill jar" {
      : if (is_present "ceiling_wax") {
         : print "It appears to already be filled with ceiling wax, whatever that is.";
      }
   }
   
   : match "empty jar" {
      : if (is_present "ceiling_wax" && has_uncle_talked) {
         : print "It seems like Uncle Carroll wanted this for who knows what.  You should probably give it to him.";
      }
      : else_if (is_present "ceiling_wax") {
         : print "You'd much prefer to keep the foul-smelling wax in its jar.";
      }
   }

   : match "exits _" {
      : if (is_in_dungeon) {
         : print "Type LOOK to list the possible exits while in your Dream.";
      }
   }

   : match "close door" {
      : if (is_at "house" || is_at "house_2" || is_at "house_3" || is_at "kitchen_2" || is_at "bedroom_3" || is_at "kitchen_3" || is_at "carriage" || is_at "office_ext" || is_at "office_2" || is_at "reception" || is_at "reception_2" || is_at "carroll" ) {
         : print "You certainly don't know everything about the world, but you do know to open and close doors when necessary.  There's no need to specifically think about it.";
            }
         }

   : match "x door;open door" {
      : if (is_at "house_3" || is_at "reception_2" || is_at "carroll") {
         : print "You certainly don't know everything about the world, but you do know to open and close doors when necessary.  There's no need to specifically think about it.";
            }
         }

   : match "drop all" {
         : print "Name a specific thing to drop.";
   }
   
   : match "take all" {
         : print "Name a specific thing to take.";
   }

   : match "refresh _" {
      : redescribe;
      }
   : match "x house" {
      : if (is_at "house" || is_at "house_2" || is_at "house_3") {
         : print "Your house looks kinda nice against the yellow trees, actually.";
         }
         
      : else_if (is_at "winter_house") {
         : print "There's something cozy about your house in winter, you guess.";
         }
      }
      
   : match "put seeds" {
      : if (is_carried "seeds" && !is_at "farm") {
         : print "It seems like there's no good place to put them there.";
         }
      }

   : match "x field; x fields; x grass" {
      : if (is_at "farm" || is_at "windmill_top" || is_at "southroad" || is_at "northroad") {
         : print "The fields are filled with dying grass.";
         }
      }

   : match "x road" {
      : if (is_at "road_2" || is_at "road" || is_at "southroad" || is_at "northroad" || is_at "path_2") {
         : print "A typical uninteresting place used to travel between two slightly more interesting places.";
         }
      }

   : match "take leaves; take leaf" {
      : if (is_at "truck" || is_at "in_truck") {
         : print "You've got no use for them.";
         }
      : else_if (is_at "forest") {
         : print "You've got little interest in botany right now.";
         }
      : else {
         : print "There aren't any leaves to take here.";
      }
      : done;
      }

   : match "jump _" {
      : if (is_at "windmill_top") {
         : print "Things haven't been great, you guess, but they're certainly not _that_ bad.  You could fly down, though.";
      }
      : else {
         : print "For a moment you leave this planet, but then quickly return to it.";
         }
      }

   : match "open refrigerator" {
      : if (is_at "kitchen" || is_at "kitchen_3") {
         : print "You don't want anything to eat right now.";
         }
      }

   : match "put water" {
      : if (is_carried "glass_bottle" || is_carried "full_bottle" || is_carried "lightning_bottle") {
        : set_sentence "take water";
        }
      }

   : match "put *" {
      : if (noun2_is "refrigerator" && s1() != "unknown" && is_present {(s1())}) {
         : if (is_at "kitchen" || is_at "kitchen_3") {
            : print "There's no reason to keep that cold.";
            }
         }
      : else_if (s1() == "unknown") {
               : print {(sys(1740))};
               : done;
            }
      }

   : match "put *" {
      : if (noun2_is "sink" && s1() != "unknown" && is_present {(s1())} && !noun1_is "sponge") {
         : if (is_at "kitchen" || is_at "kitchen_3") {
            : print "There's no reason to put that in the sink.";
            }
         }
      : else_if (s1() == "unknown") {
               : print {(sys(1740))};
               : done;
            }
      }

   : match "put *" {
      : if (noun2_is "microwave" && s1() != "unknown" && is_present {(s1())}) {
         : if (is_at "kitchen" || is_at "kitchen_3") {
            : print "There's no reason to heat that up.";
            }
         }
      : else_if (s1() == "unknown") {
               : print {(sys(1740))};
               : done;
            }
      }

   : match "put *" {
      : if (noun2_is "oven" && s1() != "unknown" && is_present {(s1())}) {
         : if (is_at "kitchen" || is_at "kitchen_3") {
            : print "There's no reason to cook that.";
            }
         }
      : else_if (s1() == "unknown") {
               : print {(sys(1740))};
               : done;
            }
      }

   : match "put *" {
      : if (!noun1_is "sponge" && !noun1_is "bottle" && noun2_is "pond" && s1() != "unknown" && is_present {(s1())}) {
         : if (is_at "pond" || is_at "d4") {
            : print "There's no reason to get that wet.";
            }
         }
      : else_if (s1() == "unknown") {
               : print {(sys(1740))};
               : done;
            }
      }

   : match "take *" {
      : if (is_worn "oven_mitts" && !(noun1_is "cards") && !(noun1_is "lightning")) {
         : print "It's pretty tough to handle most things when you're wearing oven mitts.  Maybe take them off first.";
         : done;
         }
      }

   : match "sing _; x song" {
      : if (!has_uncle_talked) {
         : print "\"You have the angelic voice of an orc!\" is something no one has ever said to an aria singer, especially if that aria singer is you.";
         }
      : else_if (is_at "winter") {
         : print "Uncle Carroll finally found that Mimsy Borogove record and played it for you.  He was right--her voice really is transcendent.";
      }
      : else {
         : print "How did the song go?  Something <something<#r>> cabbages <and<#r>> kings.  You don't really remember, and you're pretty sure you're not getting the rainbows right, either.  Maybe Uncle Carroll could warble it for you again.";
         }
      }

   : match "x lcd;x numerals;x numbers;read numerals;read numbers; read lcd" {
      : if (is_at "kitchen" || is_at "kitchen_3") {
         : print "The numbers on the microwave read <25:72<12>>.  The clock has never worked right.";
         }
      }

   : match "x forest; x trees; x woods" {
      : if (is_at "forest") {
         : print "As far as you can tell, the surrounding forest has a completely average number of trees.";
         : done;
         }
      : else_if (is_at "winter") {
         : print "The trees are bare, but they're pretty against the winter sky.";
         }
      }

   : match "x leaves; x leaf" {
      : if (is_at "forest") {
         : print "You're in the precise moment of what the tourists call \"peak color\".  The forests are lit with green and yellow and orange and red and brown.";
         : done;
         }
      : else_if (is_at "farm") {
         : set_sentence "x vines";
      }
   }

   : match "x snow" {
      : if (is_at "winter") {
         : print "Fresh and cold.";
         }
      }

   : match "take snow" {
      : if (is_at "winter") {
         : print "You pack some snow into a ball, heft it directly upward, then artfully step to the side before it hits you on the head on its way back down.";
         }
      }

   : match "take water" {
      : if (is_at "d4" && is_carried "sponge") {
         : set_sentence "drop sponge";
         }
      }

   : match "bottle water" {
      : if (is_carried "glass_bottle" || is_carried "full_bottle" || is_carried "lightning_bottle") {
         : set_sentence "fill bottle";
         }
      }

   : match "read scroll" {
      : set_sentence "x scroll";
      }

   : match "read note" {
      : set_sentence "x note";
      }
      
   : match "read -" {
      : if (is_present "history_book") {
         : set_sentence "read book";
         }
      }

   : match "read papers;read proofs;read paper" {
      : if (is_at "carroll") {
         : print "There is just so much stuff here that it's hard to make sense out of any of it.";
         }
      }

   : match "plant seeds; sow seeds" {
      : if (!is_at "farm" && is_present "seeds") {
         : print "That's a good idea, but there doesn't seem to be a place to plant them here.";
         }
      }

   : match "cast _; spell _; cabbage cloud; water whip; wax lips; royal robe; slow walk" {
      : if (has_spells && !is_at "warriorbattle_2" && !is_at "demonbattle" && !is_at "magebattle" && !is_at "psionbattle" && !is_at "clockbattle") {
         : print "It seems that whatever spells you know will only work in battle.";
         }
      }

   : match "talk self; talk me" {
      : print "You're reminded yet again that you aren't a terribly interesting conversationalist.";
      : done;
      }

   : match "take barrow;push barrow;push handles;pull barrow;pull handles" {
      : if (is_present "barrow") {
         : print "It's basically an old and broken box, and you've got no use for it.";
         : done;
         }
      }

   : match "pull _; push _" {
      : if (is_present {(s1())}) {
         : print "There's no reason to do that.";
      }
   }

   : match "empty barrow" {
      : if (is_present "barrow") {
         : print "It's already empty.";
         : done;
         }
      }
         
   : match "fill barrow" {
      : if (is_present "barrow") {
         : print "There's no reason to fill the barrow with anything.  It's just a rotting and useless box.";
         : done;
         }
      }

   : match "take handles" {
      : if (is_present "handles") {
         : print "They're bolted to the barrow.  Probably better to get a handle on the rest of your life first.";
         : done;
         }
      }
   
   : match "put *" {
      : if (is_present "barrow" && noun2_is "barrow" && s1() != "unknown" && is_carried {(s1())}) {
         : print "There's no reason to do that.  It's just a rotting and useless box.";
         : done;
         }
      : else_if (s1() == "unknown") {
               : print {(sys(1740))};
               : done;
            }
      }
      
   : match "put *" {
      : if (noun2_is "lightning_bottle" && s1() != "unknown" && is_carried {(s1())}) {
         : print "You should probably empty the bottle of its lightning first.";
         : done;
         }
      : else_if (s1() == "unknown") {
               : print {(sys(1740))};
               : done;
            }
      }

   : match "put *" {
      : if (is_present "glass_bottle" && noun2_is "bottle" && s1() != "unknown" && is_present {(s1())}) {
         : print "That doesn't need to be bottled.";
         : done;
         }
      : else_if (s1() == "unknown") {
               : print {(sys(1740))};
               : done;
            }
      }
      
   : match "put *" {
      : if (is_present "full_bottle" && noun2_is "bottle" && s1() != "unknown" && is_present {(s1())} && !is_at "d14") {
         : print "That doesn't need to be bottled.  Besides, the bottle is already filled with water.";
         : done;
         }
      : else_if (s1() == "unknown") {
               : print {(sys(1740))};
               : done;
            }
      }
      
   : match "put *" {
      : if (is_present "lightning_bottle" && noun2_is "bottle" && s1() != "unknown" && is_present {(s1())} && !is_at "d14") {
         : print "The bottle is filled with lightning.  You should probably empty it before trying to put anything else inside it.";
         : done;
         }
      : else_if (s1() == "unknown") {
               : print {(sys(1740))};
               : done;
            }
      }
   
   : match "x floor; x ground" {
      : if (!is_at "farm" && !is_at "clearing_2") {
         : print "It's currently underneath your feet, which is the way you prefer it.";
         }
      }

   : match "drop photo; drop logo; drop code; take photo; take logo; take code" {
      : if (is_worn "nametag") {
         : print "It's printed directly onto the nametag; it can't come off.";
         }
      : else {
         : print "You can't do that.";
         }
      : done;
      }

   : match "open door;go door; x door" {
      : if (is_at "kitchen") {
         : print "To leave your house, type EXIT or OUT.";
         }
      }

   : match "cook _" {
      : if (is_at "kitchen" || is_at "kitchen_3") {
         : print "You've never been much of a chef, instead preferring to eat things that come precooked, prewrapped, or preprocessed (and ideally all three), so you're not really interested in improving your culinary skills at the moment.";
         }
      }

   : match "eat cabbage" {
      : if (is_present "cabbage") {
         : print "Maybe it's fine in a salad with fresh centipedes and dried slugs, but cabbage by itself?  Gross.";
         }
      }

   : match "stop computer" {
      : if (is_at "reception" || is_at "reception_2") {
         : print "Jonathan is using it and there doesn't seem to be a reason to stop him from doing so.";
         }
      }
   
   : match "say spell; cast spell; chant spell" {
      : if (has_spells) {
         : print "That doesn't seem to help here.  Your uncle made it sound like they were only good for battle.";
         }
      }

   : match "eat boar" {
      : if (is_at "bedroom" || is_at "bedroom_3") {
         : print "This is just the skin.  You'll have to wait for your mother to make more food.";
         }
      }

   : match "help verbs; help verb; verbs _; verb _" {
      : print "<SPOILERS AHEAD!<10>>  Type L to clear the screen if you don't wish to read further!";
      : print "Beyond the common verbs listed in the general help information, this game requires several specific ones to progress.  They are ATTACK, PARRY, SPELL (all in battle), TALK TO, WAIT, SLEEP, WEAR, REMOVE, PUT, FILL, EMPTY, and GIVE.";
      : print "Some very specific verbs that might help in a given circumstance include FLY, PLANT, WATER, CRAWL, ABSORB, and CATCH.";
      }

   : match "help _; hint _; info _; information _; help me; halp -" {
      : print "This game mostly uses two-word commands in the form of VERB NOUN, like TAKE CLUB or EXAMINE BOOK.  The most common verbs can usually be shortened to a single letter.";
      : print "Common one-word commands:  LOOK, INVENTORY, NORTH, SOUTH, EAST, WEST, UP, and DOWN, all of which can be shortened to their initial letter (L, I, etc.).  ENTER / IN and EXIT / OUT are also used.";
      : print "Common verbs for two-word commands:  EXAMINE (X), TAKE, DROP, OPEN.";
      : print "If you meet a character, you may wish to TALK TO them.  Occasionally, other three-word or four-word commands will work as well.";
      : print "At certain points in the game you will be presented a list of numbered responses.  To proceed, type the number of your choice, followed by the Enter key.";
      : print "Type SAVE or LOAD to save or load a game.  Type QUIT to restart the game.  Type SCORE to see your current score.";
      : print "Other verbs are possible and necessary!  Type HELP VERBS for a complete list of verbs needed to complete this game (contains spoilers).";
      : print "Type CREDITS or ABOUT for information about the resources used in the game.";
      }
      
   : match "about _;credits _" {
      : print "^c^<OFF-SEASON AT THE DREAM FACTORY<14>>";
      : print "If you'd like help about how to play this game, type HELP instead.";
      : print "<Development system:<5>>";
      : print "This game was created with Adventuron by Chris Ainsley: https://adventuron.io.";
      : print "<Font credits:<5>>";
      : print "Main font:  The FontStruction “Sierra AGI Font” (https://fontstruct.com/fontstructions/show/374097) by “Goatmeal” is licensed under a Creative Commons Attribution Non-commercial Share Alike license (http://creativecommons.org/licenses/by-nc-sa/3.0/).";
      : print "Battle font:  The FontStruction “Betrayal At Krondor - Chapter” (https://fontstruct.com/fontstructions/ show/332505) by “Goatmeal” is licensed under a Creative Commons Attribution Non-commercial No Derivatives license (http://creativecommons.org/licenses/by-nc-nd/3.0/).";
      : print "Dungeon font:  Envious is by Damien Guard, https://damieng.com/typography/zx-origins/envious.";
      : print "<Location graphic credits:<5>>"; 
      : print "The below images are licensed as CC0.";
      : print "Orc:  https://commons.wikimedia.org/wiki/File:Orc.svg";
      : print "Kitchen:  Photo via https://www.goodfreephotos.com";
      : print "MEI office:  Photo via https://www.goodfreephotos.com";
      : print "^n^Uncle Carroll:  https://commons.wikimedia.org/";
      : print "wiki/File:Lewis_Carroll_1863.jpg^m^";
      : print "The dungeon graphics were created with Dungeon Maker 3D by Master Pose, https://masterpose.itch.io/dungeon-maker-3d/";
      : print "The dungeon icons are from Urizen 1Bit Tilesets by Vurmux, https://vurmux.itch.io/urizen-onebit-tilesets.";
      : print "The dungeon map was created with Dungeon Scrawl, https://dungeonscrawl.com/.";
      : print "The shapes in the final dungeon were created with Context Free Art, https://www.contextfreeart.org/.";
      : print "All other location photos were taken with a beautiful iPhone 6.";
      : print "<Character graphic credits:<5>>";
      : print "All character images (excepting Uncle Carroll) are by QSimple, Memories for the Future Photography, and licensed as CC BY-NC-SA 2.0. https://www.flickr.com/photos/qsimple/albums.";
      : print "<Text credits:<5>>";
      : print "The descriptions of orcs in the history book are direct quotations from various official and third-party Dungeons & Dragons books.";
      : print "\"Jabberwocky\" and \"The Walrus and the Carpenter\" are by Lewis Carroll, of course.";
      : print "<Beta testers:<5>>";
      : print "Many thanks to Steev Baker, Henry Best, Dee Cooke, Rachel Eash-Scott, Errol Elumir, John Garrison, Christopher Hagge, Peter Hoppe, William Markwyn, Joel Matthys, Christopher Merriner, Julia Nelson, Phong Nguyen, Andrew Schultz, and Sarah Stock.  Thanks, too, to everyone on the Adventuron Discord server.";
      }

   : match "open microwave; start microwave" {
      : if (is_at "kitchen" || is_at "kitchen_3") {
         : print "You've got nothing to heat or reheat right now, nor are you hungry.";
         }
      }
   : match "open oven; open stove; start oven; start stove" {
      : if (is_at "kitchen" || is_at "kitchen_3") {
         : print "You're not interested in cooking right now or ever, really.";
         };
      }
      
   : match "close oven; close microwave" {
         : print "It's already closed.";
   }

   : if_examine "club" {
      : if (club_count < 5) {
         : print "With its gleaming spikes and mother-of-pearl inlay, it's the perfect weapon for clobbering adventurers.  And yet, in your hands, that never seems to happen.";
         }
      : else_if (club_count < 10) {
         : print "You guess you've been using it a bit, but its spikes and mother-of-pearl inlay are still pretty shiny.";
         }
      : else_if (club_count < 15) {
         : print "You've been using your club a fair amount in your battles.  It must be well-made, as its spikes and mother-of-pearl inlay still gleam.";
         }
      : else_if (club_count < 20) {
         : print "You've really taken to using this thing in battle.  But it shows no signs of wear, as its spikes and mother-of-pearl inlay still gleam.";
         }      
      : else {
         : print "You try your best to clobber adventurers with this thing, and by now it feels more natural.  You admire how it shows no signs of wear, its spikes and mother-of-pearl inlay still gleaming.";
         } 
      }

   : match "eat thermos;drink thermos;open thermos" {
      : if (is_present "thermos") {
         : print "You'll have the soup during your lunch break later.";
         }
      }

   : match "read sign" {
      : if (is_present "sign") {
         : print "It reads: \n^n^<M<9>><onster<5>>\n<E<9>><ncounters<5>>\n<I<9>><nc.<5>> ^m^\n in a hideous font, and then \"<A wholly owned subsidiary of the Dream Factory<6>>\" in a smaller but still hideous font.";
         }
      }

   : if (is_in_dungeon && !is_final) {
      : match "n _; e _; s _; w _; d _; u _; in _" {
         : print "You can only go FORWARD (F), LEFT (L), and RIGHT (R), or else you can TURN AROUND (T).  You can also LOOK to review your surroundings.";
         }
      }

   : match "drink _" {
      : if (is_at "pond" || is_at "kitchen" || is_at "kitchen_3" || is_at "d4" || is_carried "full_bottle") {
         : print "You're not thirsty.";
         }
      : else_if (is_present "thermos") {
         : done;
         }
      : else_if (noun1_is "lightning" && is_carried "lightning_bottle") {
         : print "Both common sense and a decade of sitting through science classes suggest that's a bad idea.";
         }
      : else {
         : print "There's nothing to drink here.  Besides, you're not thirsty.";
         }
      }

   : match "x shapes; x triangle; x square; x circle; x rectangle" {
      : if (is_final && !is_at "final_1") {
         : print "Weird, luminous shapes float before you.  They seem insubstantial, only half-existing.";
         }
      }

   : match "take shapes; take triangle; take square; take circle; take rectangle" {
      : if (is_final && !is_at "final_1") {
         : print "You attempt to touch one, and a sharp buzz rides up and down your spine before subsiding.  Whatever they are, you definitely don't want to do anything else with them.";
         : done;
         }
      }

   : match "catch shapes; catch triangle; catch square; catch circle; catch rectangle" {
      : if (is_final && !is_at "final_1") {
         : if (is_carried "glass_bottle" || is_carried "full_bottle") {
            : print "You try to capture one of the shapes in your bottle, but a strong shock of energy emanates from the shape, shattering the bottle.";
            : destroy "glass_bottle";
            : destroy "full_bottle";
            : done;
            }
         : else {
            : print "You attempt to catch one, and a sharp buzz rides up and down your spine before subsiding.  Whatever they are, you definitely don't want to do anything else with them.";
            : done;
            }
         }
      }

   : match "break mirror;attack mirror" {
      : if (is_at "bedroom" || is_at "bedroom_3") {
         : print "With your dad gone and the way your job has been going, you already have enough bad luck, thanks.";
         : done;
         }
      }
      
   : match "break window; attack window; break bed" {
      : if (is_at "bedroom" || is_at "bedroom_3") {
         : print "Things are kinda bad right now, you guess, but that doesn't mean you feel like wrecking your house.";
         : done;
         }
      }

   : if_examine "spell_scroll" {
      : print "It's a scroll made from jubjub hide, which you're pretty sure is an animal your uncle made up.  The material is supple and has an opalescent sheen.  It lists the spells you've learned:";
      : if (has_wax) {
         : print "^c^^n^<WAX LIPS<#r>>";
         }
      : if (has_robe) {
         : print "^c^^n^<ROYAL ROBE<#r>>";
         }     
      : if (has_whip) {
         : print "^c^^n^<WATER WHIP<#r>>";
         }
      : if (has_cabbage) {
         : print "^c^^n^<CABBAGE CLOUD<#r>>";
         }
      : if (has_walk) {
         : print "^c^^n^<SLOW WALK<#r>>";
         }
      : append "^l^^m^";
      : done;
      }

   : match "x wax; x lips" {
      : if (is_carried "spell_scroll" && has_wax) {
         : print "There's no description of what the spell does.  Guess you'll have to figure it out in battle.";
         }
      }

   : match "x robe; x royal" {
      : if (is_carried "spell_scroll" && has_robe) {
         : print "There's no description of what the spell does.  Guess you'll have to figure it out in battle.";
         }
      }

   : match "x whip" {
      : if (is_carried "spell_scroll" && has_whip) {
         : print "There's no description of what the spell does.  Guess you'll have to figure it out in battle.";
         }
      }

   : match "x cloud" {
      : if (is_carried "spell_scroll" && has_cabbage) {
         : print "There's no description of what the spell does.  Guess you'll have to figure it out in battle.";
         }
      }

   : match "x slow; x walk" {
      : if (is_carried "spell_scroll" && has_walk) {
         : print "There's no description of what the spell does.  Guess you'll have to figure it out in battle.";
         } 
      }

   : match "drop scroll" {
      : if (is_carried "spell_scroll") {
         : print "No, this seems pretty important to keep.";
         : done;
         }
      }

   : match "brillig _" {
      : if (!said_brillig) {
         : if (has_uncle_talked) {
            : print "\"Brillig?\" you mutter.  You suddenly hear your uncle's voice echo in your mind.  \"Indeed, 'twas!\" he says.  It's unnerving.";
         }
         : else {
            : print "\"Brillig?\" you mutter.  You suddenly hear your crazy Uncle Carroll's voice echo in your mind.  \"Indeed, 'twas!\" he says.  Where is he even coming from?  It's unnerving.";
            }
         : print "(Your score has gone up by one point.)";
         : add var = "score" value = "1";
         : set_true "said_brillig";
         }
      : else {
         : print "You say \"brillig\" again, and you're kinda relieved when nothing else seems to happen.";
         }
      }

   : match "again -; g -" {
      : if (!is_at "clearing" && !is_at "clearing_2" && !is_at "clearing_3") {
         : print "Try pressing the up arrow key to recall the last several commands.";
         }
      }

   : match "undo -" {
      : print "There's nothing that you've done in the past that can't be undone in the future.  The reanimator proves that.  Usually.";
      }

//// TESTING COMMANDS TO ELIMINATE IN FINAL VERSION

//   : match "c _; comment _" {
//      : ask_string {
//         var = "comment"
//         question = "Please enter your comment."
//         }
//      : print "Comment noted.";
//      }


//   : match "u0u0 -" {
//      : set_true "has_uncle_talked";
//      : print "Uncle chatted.";
//      }

//   : match "bup0 -" {
//      : add var = "battle_number" value = "1";
//      : print "battle number increased";
//      : print "{battle_number}";
//      }
      
//   : match "s0s0 -" {
//      : set_true "has_spells";
//      : set_true "has_wax";
//      : set_true "has_robe";
//      : set_true "has_whip";
//      : set_true "has_cabbage";
//      : set_true "has_walk";
//      : create "spell_scroll" target = "inventory";
//      : print "Empowered.";
//      }

//   : match "purloin *" {
//      : disambiguate_s1 "universal";
//      : pocket;
//      : print "Purloined.";
//      }

//   : match "spared -" {
//      : set_true "opp_spared";
//      }
   
//   : match "killed -" {
//      : set_true "opp_killed";
//      }

//   : match "blost -" {
//      : set_true "battle_lost";
//      }
      
//   : match "bwon0 -" {
//      : set_true "battle_won";
//      }
      
//   : match "bclear -" {
//      : set_false "battle_lost";
//      : set_false "battle_won";
//      }

//   : match "r0 -" {
//      : goto "reception_2";
//      }

//   : match "1 -" {
//      : set_true "has_spells";
//      : set_true "has_wax";
//      : set_true "has_robe";
//      : set_true "has_whip";
//      : set_true "has_cabbage";
//      : set_true "has_walk";
//      : set_true "has_uncle_talked";
//      : pocket "club";
//      : print "Empowered.";
//      : add var = "battle_number" value = "0";
//      : goto "clearing_2";
//      }

//   : match "c0 -" {
//      : goto "clearing_2";
//      }

//   : match "rdn -" {
//      : add var = "reputation" value = "-1";
//      : print "reputation decreased";
//      : print "{reputation}";
//      }
      
//   : match "rup -" {
//      : add var = "reputation" value = "1";
//      : print "reputation increased";
//      : print "{reputation}";
//      }


///// END TESTING COMMANDS

   : match "take body" {
      : if (is_present "warrior_body" || is_present "mage_body" || is_present "clock_body") {
         : print "No need.  The reanimator will take care of things.";
         : done;
         }
      }

   : match "take sword; take phone; take smartphone" {
      : if (is_present "warrior_body") {
         : print "Your MEI training was clear:  any adventurer's equipment must remain with that adventurer.";
         : done;
         }
      }

   : match "take staff; take phone; take smartphone" {
      : if (is_present "mage_body") {
         : print "Your MEI training was clear:  any adventurer's equipment must remain with that adventurer.";
         : done;
         }
      }

   : match "take watch;take pocket;take pocketwatch; take gears take phone; take smartphone" {
      : if (is_present "clock_body") {
         : print "Your MEI training was clear:  any adventurer's equipment must remain with that adventurer.";
         : done;
         }
      }

   : match "take bodies" {
      : if (is_present "demon_bodies" || is_present "psion_bodies") {
         : print "No need.  Their reanimators will take care of things.";
         : done;
         }
      }
      
   : match "take phone; take smartphone; take phones; take smartphones" {
      : if (is_present "psion_bodies" || is_present "demon_bodies") {
         : print "Your MEI training was clear:  any adventurer's equipment must remain with that adventurer.";
         }
      }

   : match "listen _" {
      : if (is_present "psion_bodies" || is_present "demon_bodies") {
         : print "You hear the reanimators whirring on the bodies.";
         }
      : else_if (is_present "warrior_body" || is_present "mage_body") {
         : print "You hear the reanimator whirring on the body.";
         }
      : else {
         : print "Everything sounds exactly the way it should.";
         }
      }

   : match "smell bodies" {
      : if (is_present "demon_bodies") {
         : print "Like rotten eggs or a newly burnt match.";
         }
      }

   : match "smell -;smell sewer;smell effluvia;x effluvia; smell pipe" {
      : if (is_at "sewer") {
         : print "It smells somewhat like burning plastic, somewhat like decomposing leaves, and somewhat like vanilla.";
         }
      }

   : match "wear slippers" {
      : if (is_present "slippers") {
         : print "They're far too small.  Besides, your style is more along the lines of barefoot hobo anyway.";
         }
      : else {
         : print "You don't have those!";
         }
      }

   : match "x lightning" {
      : if (is_carried "lightning_bottle") {
         : print "You have literally caught lightning in a bottle.  It's so weak it looks more like a dying match, though.";
         }
      }

   : match "untie slippers" {
      : if (is_present "slippers") {
         : print "It's probably better to keep them together as a set.";
         }
      }

   : match "open umbrella; fly _" {
      : if ((is_carried "umbrella" || is_beside "umbrella") && !is_at "farm") {
         : print "You open and close the umbrella, but it doesn't seem to do much.";
         }
      }

   : match "close umbrella" {
      : if (is_present "umbrella") {
         : print "It's already closed.";
         }
      }

   : match "turn _; switch _" {
      : if (!is_in_dungeon) {
         : print "If you're trying to turn something on or off, try START or STOP instead.";
         }
      }

   : match "xyzzy _" {
      : print "That's not any magic spell you've learned.";
      }

   : match "read books; open books; read book; open book" {
      : if (is_at "bedroom" || is_at "bedroom_3") {
         : print "You're not really in a reading mood.";
         }
      }

   : match "x book" {
      : if (is_at "bedroom" || is_at "bedroom_3") {
         : print "It's a whole bookshelf filled with typical fantasy literature:  humans eating lunch, humans arguing with their in-laws, humans vacationing in Seattle.  Typical.";
         : done;
         }
      }


   : match "close bottle" {
      : if (is_carried "full_bottle" || is_beside "full_bottle" || is_carried "glass_bottle" || is_beside "glass_bottle") {
         : print "The bottle is already stoppered with a cork.";
         }
      }

   : match "empty bottle;open bottle;empty water; pour bottle; dump bottle; pour water" {
      : if (is_carried "full_bottle" && !is_at "farm") {
         : print "You unceremoniously dump out the water, leaving you with slightly wet feet and an empty bottle.";
         : destroy "full_bottle";
         : create "glass_bottle" target = "inventory";
//         : create "cork" target = "glass_bottle";
         : done;
         }
      : else_if (is_beside "full_bottle") {
         : print "You'll have to take it first.";
         : done;
         }
      }


   : match "empty bottle" {
      : if (is_carried "glass_bottle" || is_beside "glass_bottle") {
         : print "The bottle is already empty.";
         : done;
         }
      }

   : match "break bottle" {
      : if (is_present "glass_bottle" || is_present "full_bottle" || is_present "lightning_bottle") {
         : print "There's no need to destroy it.  Try opening the bottle instead.";
         : done;
         }
      }

   : match "drop lightning;drop bottle;empty bottle;release lightning;free lightning;open bottle;empty lightning;open lightning" {
      : if (is_carried "lightning_bottle" && !is_in_dungeon) {
         : print "You open the bottle and release the lightning, where it flits away like a firefly.  You once again have an empty bottle.";
         : swap o1 = "lightning_bottle" o2 = "glass_bottle";
//         : create "cork" target = "glass_bottle";
         : done;
         }
      : else_if (is_carried "lightning_bottle" && is_in_dungeon) {
         : print "You had to catch the lightning in the dungeon in order to proceed.  It doesn't seem like you should let it back out here where it would bounce down the corridors or whatever.  Maybe once you're out of your Dream.";
         : done;
         }
      }

   : match "start sink" {
      : if (is_carried "glass_bottle" && is_at "kitchen_3") {
         : print "You open the bottle and turn on the faucet.  You hold the bottle under the faucet for a few moments, and soon enough it's full.  You replace the cork and now have a full bottle of water.";
         : destroy "glass_bottle";
         : create "full_bottle" target = "inventory";
//         : create "cork" target = "full_bottle";
         : done;
         }
      : else_if (is_at "kitchen" || is_at "kitchen_3") {
         : print "You turn on the water in the faucet for a moment, and then you turn it back off.";
         }
      }

   : match "fill bottle;open bottle;open sink;put bottle;take water" {
      : if (is_carried "glass_bottle" && is_at "pond") {
         : print "You open the bottle and dip it beneath the surface of the pond.  After a few glugs, it's full.  You replace the cork and now have a full bottle of water.";
         : destroy "glass_bottle";
         : create "full_bottle" target = "inventory";
//         : create "cork" target = "full_bottle";
         : done;
         }
      : else_if (is_carried "glass_bottle" && is_at "kitchen_3") {
         : print "You open the bottle and turn on the faucet.  You hold the bottle under the faucet for a few moments, and soon enough it's full.  You replace the cork and now have a full bottle of water.";
         : destroy "glass_bottle";
         : create "full_bottle" target = "inventory";
//         : create "cork" target = "full_bottle";
         : done;
         }
      : else_if (is_carried "glass_bottle" && is_at "d4" && is_carried "oven_mitts") {
         : print "The water is absolutely freezing, and you don't think the oven mitts you've got would help temper that much.  You have no interest in getting your hands wet or carrying around a full bottle of the stuff.  Maybe you could get water somewhere else, though.";
         : done;
         }
      : else_if (is_carried "glass_bottle" && is_at "d4") {
         : print "The water is absolutely freezing.  You have no interest in getting your hands wet or carrying around a full bottle of the stuff.  Maybe you could get water somewhere else, though.";
         : done;
         }
      : else_if (is_carried "lightning_bottle" && is_at "d4") {
         : print "It seems like loose lightning and icy water wouldn't mix well in a Dream.";
         : done;
         } 
      : else_if (is_carried "full_bottle") {
         : print "You've got a full bottle of water.  You can empty it if you'd like.";
         : done;
         }
      //: else_if (is_beside "glass_bottle") {
      //   : get "glass_bottle";
      //   }
      : else_if ((is_at "pond" || is_at "kitchen_3") && is_carried "lightning_bottle") {
         : print "You should probably empty the bottle of its lightning first.";
         : done;
         }
      : else_if (is_at "pond" && is_beside "glass_bottle") {
         : print "You'll need to take the bottle first.";
         : done;
         }
      : else_if (is_at "kitchen_3" && is_beside "glass_bottle") {
         : print "You'll need to take the bottle first.";
         : done;
         }
      : else_if (is_at "pond" || is_at "kitchen_3") {
         : print "You certainly can't carry the water in your hands.";
         : done;
         }
      : else_if (is_carried "glass_bottle") {
         : print "There doesn't seem to be any way to fill the bottle with anything here.";
         : done;
         }
      : else_if (!(is_carried "glass_bottle") && is_beside "glass_bottle") {
         : print "You'll need to take it first.";
         }
      : else_if (is_carried "lightning_bottle") {
         : print "You have a bottle of lightning.  Perhaps you should empty it first.";
         : done;
         }
      : else_if ((is_at "kitchen" || is_at "kitchen_3") && (noun1_is "sink")) {
         : print "You turn on the water in the faucet for a moment, and then you turn it back off.";
         }
      : else_if (!(is_carried "glass_bottle") && noun1_is "bottle") {
         : print "You don't have a bottle.";
         }
      : else_if ((!is_at "d4" && !is_at "pond" && !is_at "kitchen" && !is_at "kitchen_3") && noun1_is "water") {
         : print "There doesn't seem to be any water here.";
         : done;
         }
      : else_if (!is_at "d4") {
         : print "That doesn't work here.";
         }
      }

   : match "stop sink" {
      : if (is_at "kitchen_3" || is_at "kitchen") {
         : print "The faucet is currently off.";
         }
      }

   : match "drop sponge; put sponge; soak sponge; wet sponge; fill sponge; absorb _; sponge _; place sponge; soak _" {
      : if (is_carried "sponge" && is_at "d4") {
         : print "You drop the sponge into the icy water, and it instantly sucks it up.  The toy boat clatters to the floor, which is about ten feet beneath you.  It would be a damp but doable climb to fetch it.\n(Your score has gone up by two points.)";
         : add var = "score" value = "2";
         : destroy "sponge";
         : destroy "dungeon_water";
         : set_graphic graphic = "d3empty" target = "d3";
         : set_graphic graphic = "d2" target = "d2";
         : set_graphic graphic = "d4nowater" target = "d4";
         : set_graphic graphic = "d1" target = "d1";
         : update_graphic graphic = "d4nowater";
         : set_string var = "d4_descr" {("Exits: Turn around\nThe floor abruptly stops at a ten-foot drop where the pool of water used to be.")};
         : create "full_sponge" target = "d4";
         : create "puddle" target = "d4";
         : done;
         }
      : else_if (is_carried "sponge" && is_at "pond") {
         : if (!sponge_pond_once) {
            : print "You drop the sponge into the pond and it instantly begins absorbing water, almost as if someone pulled a plug to drain the pond.  The water recedes from the shoreline, revealing mud and several panicked frogs.  You quickly stomp on the sponge, releasing its water, and jerk it back out before it can suck the whole pond dry.  You pick the sponge back up, alarmed.";
            : set_true "sponge_pond_once";
            : done;
            }
         : else {
            : print "You already did that here, and have no desire to deal with that temporary calamity again.";
            : done;
            }
         }
      : else_if (is_present "sponge" && is_at "kitchen_3") {
         : print "Everything in the kitchen seems clean and dry enough.  You keep the sponge as it is.";
         : done;
         }
      }

   : match "take pond" {
      : if (is_carried "glass_bottle" && is_at "pond") {
         : print "You open the bottle and dip it beneath the surface of the pond.  After a few glugs, it's full.  You replace the cork and now have a full bottle of water.";
         : destroy "glass_bottle";
         : create "full_bottle" target = "inventory";
//         : create "cork" target = "full_bottle";
         : done;
         }
      : else_if (is_carried "sponge" && is_at "d4") {
         : print "You drop the sponge into the icy water, and it instantly sucks it up.  The toy boat clatters to the floor, which is about ten feet beneath you.  It would be a damp but doable climb to fetch it.\n(Your score has gone up by two points.)";
         : add var = "score" value = "2";
         : destroy "sponge";
         : destroy "dungeon_water";
         : set_graphic graphic = "d3empty" target = "d3";
         : set_graphic graphic = "d2" target = "d2";
         : set_graphic graphic = "d4nowater" target = "d4";
         : set_graphic graphic = "d1" target = "d1";
         : update_graphic graphic = "d4nowater";
         : set_string var = "d4_descr" {("Exits: Turn around\nThe floor abruptly stops at a ten-foot drop where the pool of water used to be.")};
         : create "full_sponge" target = "d4";
         : done;
         }
      : else_if (is_carried "glass_bottle" && is_at "d4") {
         : print "The water is absolutely freezing.  You have no interest in getting your hands wet or carrying around a full bottle of the stuff.  Maybe you could get some water elsewhere.";
         : done;
         }
      : else_if (is_at "d4" && is_beside "full_sponge") {
         : print "The water has been almost entirely absorbed by the sponge, leaving only a few cold puddles behind.";
         : done;
         }
      : else_if ((is_at "d4" && has_not_created "full_sponge") || is_at "pond") {
         : print "Yes, but how would you hold it?";
         : done;
         }
      }

   : match "take sponge" {
      : if (is_beside "full_sponge") {
         : print "You can't imagine how much an entire room's worth of water weighs.  You decide to leave it be.";
         : done;
         }
      }
      
   : match "empty sponge;squeeze sponge" {
      : if (is_beside "full_sponge") {
         : print "You have no interest in suddenly being awash in ten feet of freezing water.";
         }
      : else_if (is_beside "sponge" || is_carried "sponge") {
         : print "You give the sponge a gentle squeeze.  Nothing else happens.";
         }
      }
      
   : match "fill sponge" {
      : if (is_carried "sponge" || is_beside "sponge") {
         : print "Try dropping the sponge into a liquid.";
         }
      : else_if (is_beside "full_sponge") {
         : print "The sponge is already quite full.";
         }
      : else {
         : print "You don't have a sponge.";
         }
      }

   : match "x cork" {
      : if (is_present "glass_bottle" || is_present "full_bottle" || is_present "lightning_bottle") {
         : print "The cork looks like every other cork you've seen.";
         }
      }

   : match "remove cork;take cork;open cork" {
      : if (is_present "glass_bottle" || is_present "full_bottle") {
         : print "There's no need.  You'll remove the cork whenever it might be necessary.";
         }
      : else_if (is_present "lightning_bottle") {
         : print "Try EMPTY BOTTLE instead.";
         }
      }

   : match "remove reanimator;drop reanimator;stop reanimator; switch reanimator" {
      : print "No.  No no no.  Never.";
      : done;
      }

   : match "start reanimator" {
      : print "Without looking, you know it's already running.  There's a weird electric warmness over your heart.";
      }
   
   : match "remove tunic" {
      : print "Of your several perceived faults, immodesty is not one of them.";
      }
   
   : match "wear mitts" {
      : if (is_present "oven_mitts" && !is_holding "oven_mitts") {
         : print "You'll need to take them first.";
         }
      : else_if (!is_present "oven_mitts") {
         : print "You don't see those here.";
         }
      : else_if (is_holding "oven_mitts" && !is_worn "oven_mitts") {
         : print "You slide the mitts on your hands, and now you look vaguely like an orcish snowman.";
         : wear "oven_mitts" quiet = "true";
         }
      }
   
   : match "x me;x self; x tunic; x orc; x dud; x zildud; x henderson" {
      : if (is_in_dungeon) {
         : print "Everything else looks different, maybe even clarified, in your Dream.  But you look and feel exactly the same.";
         }
      : else_if (!is_at "clearing" && !is_at "death" && !is_at "clearing_2") {
         : print "I mean, you're a typical seventeen-year-old orc.  Green skin.  Brown hair.  Giant canines.  Dirty tunic.  That's what everyone sees, anyway.";
         }
      }

   : match "drop *" {

      : if (is_in_dungeon && s1() != "unknown" && is_present {(s1())}) {
         : print "Better not.  You've heard it's quite easy to lose things in Dreams.";
         : done;
         }
      : else_if (noun1_is "thermos" && is_present "thermos") {
         : print "No need--you'll want to have the soup for lunch later.";
         : done;
         }
      : else_if (s1() == "unknown") {
               : print {(sys(1740))};
               : done;
            }   
      }

   : match "x clearing; x forest; x trees; x ground" {
      : if (is_at "clearing_2") {
         : if (battle_won || battle_lost) {
            : print "This clearing is your assigned battle location.  It's a grassy area with a few trees and enough room for adventurers to make a fool of you.";
         }
      }      
   }

   : match "score *;score -" {
//      : if (!is_at "clearing" && !is_at "death" && !is_at "clearing_2" && !is_at "death_2") {
         : print {("Your score is a total of " + score + " points out of 100, using a total of " + turns() + " turns.")};
         : done;
         }
//      : else_if (is_at "clearing_2") {
//         : if (battle_won || battle_lost) {
//            : print {("Your score is a total of " + score + " points out of 100, using a total of " + turns() + " turns.")}
//         }
//      }
//      }

   : match "drop pouch" {
      : if (!is_at "clearing" && !is_at "death" && !is_at "clearing_2") {
         : if (is_carried "13_gold" || is_carried "27_gold" || is_carried "35_gold" || is_carried "43_gold" || is_carried "56_gold") {
            : print "Pass.  The gold is property of MEI, and you know you'd be required to reimburse the company should you lose it.";
            }
         }
      }

   : match "open pouch;empty pouch" {
      : if (!is_at "clearing" && !is_at "death" && !is_at "clearing_2") {
         : if (is_carried "13_gold" || is_carried "27_gold" || is_carried "35_gold" || is_carried "43_gold" || is_carried "56_gold") {
            : print "You open the pouch to make sure the gold is still there.  It is.  You close the pouch back up tightly.";
            }
         }
      }
      
   : match "close pouch" {
      : if (!is_at "clearing" && !is_at "death" && !is_at "clearing_2") {
         : if (is_carried "13_gold" || is_carried "27_gold" || is_carried "35_gold" || is_carried "43_gold" || is_carried "56_gold") {
            : print "It's already tightly closed.";
            }
         }
      }
      
   : match "fill pouch" {
      : if (!is_at "clearing" && !is_at "death" && !is_at "clearing_2") {
         : if (is_carried "13_gold" || is_carried "27_gold" || is_carried "35_gold" || is_carried "43_gold" || is_carried "56_gold") {
            : print "It's already filled with gold, and your MEI training has made it clear that nothing else should go inside it.";
            }
         }
      }

   : if_examine "history_book" {
      : print "It's a thick antique book with a cracked leather cover and gilded title: <AN ACCOUNT OF THE HISTORY OF THE SAVAGE ORC<#cb3>>.  You can READ it.";
      : set_true "has_read_history";
      }

   : match "read book; read history; read more; read again" {
      : if (is_present "history_book" && !is_at "bedroom_3") {
         : set_true "has_read_history";
         : print "You randomly flip through the book:";
         : cycle key = "book_events" predictable_order = "true" skip_interval = "0"  max_loops = "1" {
            : print  "Page 385: ... Orcs are naturally chaotic and unorganized, acting on their emotions and instincts rather than out of reason and logic ...  (And there's plenty more if you want to READ it.)" ;
            : print  "Page 74:  ... Young orcs must mature quickly in order to survive their perilous upbringing. Their early years are fraught with tests of strength, fierce competition and nothing in the way of maternal or paternal love ...";
            : print "Page 112:  ... Most orcs have been indoctrinated into a life of destruction and slaughter. ... No matter how domesticated an orc might seem, its bloodlust flows just beneath the surface ...";
            : print "Page 313:  ... Orcs prefer wearing vivid colors that many humans would consider unpleasant, such as blood red, mustard yellow, yellow-green, and deep purple. Their equipment is dirty and unkempt ...";
            : print "Page 37:  ... Orcs are aggressive. They believe other species are inferior to them and that bullying and slavery is part of the natural order ...";
            : print "Page 155:  ... Orcs have a reputation for cruelty that is deserved ...";
            : print "Page 236:  ... Orcs appear particularly disgusting because their coloration--brown or brownish green with a bluish sheen--highlights their pinkish snouts and ears ...";
            : print "Page 194: ... Orcs are the foot soldiers of evil, the creatures that make up the hordes of darkness that threaten to overwhelm the good peoples and turn the entire land into a region of little else than slaughter and depravity ...";
            : print "Page 18:  ... An orc's favourite sound is the noise a skull makes when crushed with a solid blow ...";
            : print "Page 401:  ... There is nothing redeeming about orcs.  They are vile in every way.  This is why civilized people feel justified in killing them all whenever the opportunity presents itself ...";
            : print "Page 268 : ... Orcs gather in tribes that exert their dominance and satisfy their bloodlust by plundering villages, devouring or driving off roaming herds, and slaying any humanoids that stand against them ...";
            : print "Page 270:  ... Appealing to their better nature is pointless, since they do not have one ...";

            on_exhausted {
            : print "On second thought, you've read more than plenty.";
            }
            }
         : if (!has_earned_history_points) {
            : print "(Your score has gone up by one point.)";
            : add var = "score" value = "1";
            : set_true "has_earned_history_points";
            }
            
            }
         }

   : if_examine "barrow" {
      : if (has_not_created "wheel") {
         : print "It's not even a metal wheelbarrow.  It's just an old wooden box with two handles, falling apart and useless, like something out of Dickens.  Its wheel has long been broken off its axle and leans against it.";
         }
      : else {
         : print "It's not even a metal wheelbarrow.  It's an old wooden box with two handles, falling apart and useless, like something out of Dickens.";
         }
      }

   : if_examine "brochure" {
      : print "The clients always leave trash around.  This particular MEI brochure reads:  <DREAMS!<9>>  <DUNGEONS!<6>>  <DANGER!<10>> and other colorful D-words, all promising clients the thrill of encountering monsters as part of their manufactured Dream.  There's also a map printed on it, one of the entry-level dungeons:";
      : print_graphic "map" width = "30" align = "center";
      : if (!has_examined_brochure) {
         : print "(Your score has gone up by one point.)";
         : add var = "score" value = "1";
         : set_true "has_examined_brochure";
       }
      }

   : match "read brochure" {
      : if (is_carried "brochure") {
      : print "The clients always leave trash around.  This particular MEI brochure reads:  <DREAMS!<9>>  <DUNGEONS!<8>>  <DANGER!<10>> and other colorful D-words, all promising clients the thrill of encountering monsters as part of their manufactured dream.  There's also a map printed on it, one of the entry-level dungeons:";
      : print_graphic "map" width = "30" align = "center";
      : if (!has_examined_brochure) {
         : print "(Your score has gone up by one point.)";
         : add var = "score" value = "1";
         : set_true "has_examined_brochure";
         }
       }
      }

   : match "examine -" {
      : print "You need to supply a noun.";
      }

   : match "drop code" {
      : print "It's printed directly on the tag; it won't come off.";
      }
      
   : match "remove code" {
      : print "You can't take just the code off; it's printed directly on the nametag.";
      }
      
   : if_examine "mattress" {
      : if (has_not_created "nametag") {
         : create "nametag";
         : get "nametag" quiet = "true";
         : wear "nametag" quiet = "true";
         : print "You shake the covers on your bed and find the nametag for your job lost in the tatters of your quilt.  You sigh and pin it to your tunic.\n(Your score has gone up by one point.)";
         : add var = "score" value = "1";
         }
      }
      

   : match "remove nametag" {
      : if (is_holding "new_nametag") {
         : print "Some things you couldn't change about the job, but at least this nametag looks a little nicer.  You'll have to keep it on.";
         }
   
      : else_if (is_holding "nametag") {
         : print "As much as you'd like to, you can't do your job without it, and the Boss isn't likely to print you another one.  May as well keep it on.";
         }
      : else {
         : print "You're not wearing your nametag.  You should probably find it.";
         }
      }
      
   : match "take skin" {
      : if (is_at "bedroom" || is_at "bedroom_3") {
         : print "Eh, it'll be fine for a bit longer where it is.";
         : done;
         }
      }

   : match "take books; take book" {
      : if (is_at "bedroom" || is_at "bedroom_3") {
         : print "You're not in a reading mood.";
         : done;
         }
      }
      
   : match "open window;close window" {
      : if (is_at "bedroom" || is_at "bedroom_3") {
         : print "Your windows are nailed shut to discourage any ... tourists.";
         }
      }

   : match "take cauldron" {
      : if (is_at "kitchen") {
         : print "It's fairly heavy and way too hot.";
         }
      }

   : match "ask _; tell _; say _; talk _"  {
      : if (is_present "boss") {
         : gosub "boss_talk";
         }
      : if (is_present "jonathan" && is_at "reception") {
         : if (boss_over) {
            : gosub "jonathan_talk_2";
            }
         : else_if (is_jon_talked) {
            : print "\"Dude, you really have to talk to the Boss now,\" Jonathan says.";
            }
         : else {
            : gosub "jonathan_talk";
            }
         }
      : if (is_present "mother") {
            : cycle key = "mother_events" predictable_order = "true" skip_interval = "0"  max_loops = "1" {
               : print  "\"We should eat eclairs, son,\" your mother says. \"We shouldn't eat eggplants, nor nectarines.\"  Ah, your mother, with her oddly alliterative nutritional advice.  You can talk to her again if you'd like to hear more." ;
               : print  "\"Whales sing elegant echolocations,\" your mother says.  \"Sing, whales!  Sing!  Echolocate every narwhal now!\"  Ah, your mother, with her oddly alliterative paeans to whales.";
               : print "\"Wind shocks earth's energy suddenly,\" your mother says.  \"We should energize electrons, not neutrons!\"  Ah, your mother, with her crackpot theories about free energy.";
               : print "\"I've always found the first letters of words to be deeply meaningful, haven't you?\" your mother says quizzically. \"Wind shocks earth's energy suddenly ...\" she repeats.";
               : print "\"But I suppose you think I'm starting to sound like my brother,\" she says, meaning your weird Uncle Carroll.  \"I was just trying to give you something to help you remember the directions in the forest once you get to the road.  I can explain it if you'd like.\"";
               : print "\"Here's how it works,\" she says.  \"Which one did I first say?  Yes, \'We should eat eclairs, son.  We shouldn't eat eggplants, nor nectarines.\'  So, the first direction from the road is west because \'we\' starts with a W.  Then the next word, 'should,' stands for south.  Then two easts, another south, then west, and so on.  Just remember the words.  You'll get there!\"";
               
               on_exhausted {
               : print "You think you've got it.  Starting from the road, the directions must be WSEESWSEENN.";
               }
            }
         }
      }
   
   : match "x code" {
      : set_sentence "scan code";
   }
   
   : match "scan code; read code" {
      : if (is_worn "nametag") {
         : if (!said_brillig) {
            : if (battle_number == 1) {
               : print_graphic "qr1" width = "20";
               }
            : else_if (battle_number == 2) {
               : print_graphic "qr2" width = "20";
               }
            : else_if (battle_number == 2) {
               : print_graphic "qr2" width = "20";
               }            
            : else_if (battle_number == 3) {
               : print_graphic "qr3" width = "20";
               }
            : else_if (battle_number == 4) {
               : print_graphic "qr4" width = "20";
               }
            : else_if (battle_number == 5) {
               : print_graphic "qr5" width = "20";
               }
            }
         : else {
            : if (battle_number == 1) {
               : print_graphic "qr1nob" width = "20";
               }
            : else_if (battle_number == 2) {
               : print_graphic "qr2nob" width = "20";
               }
            : else_if (battle_number == 2) {
               : print_graphic "qr2nob" width = "20";
               }            
            : else_if (battle_number == 3) {
               : print_graphic "qr3nob" width = "20";
               }
            : else_if (battle_number == 4) {
               : print_graphic "qr4nob" width = "20";
               }
            : else_if (battle_number == 5) {
               : print_graphic "qr5nob" width = "20";
               }
            }         
         }
      : else_if (is_worn "new_nametag") {
         : print "Getting rid of those stupid codes was one of the first things you did in your new position.";
         }
      : else {
         : print "There's no code here.";
         }
      }
   
   : match "x photo; read photo" {
      : if (is_worn "nametag") {
         : print "\"I _am_ smiling,\" you said to the chirpy assistant who took your company photo.";
         }
      : else_if (is_worn "new_nametag") {
         : print "You think you actually look pretty good in this photo.";
         }
      : else {
         : print "There's no photo here.";
         }
      }

   : match "x logo; read logo" {
      : if (is_worn "nametag") {
         : print "The three letters are crammed together in a hideous font.";
         }
      : else_if (is_worn "new_nametag") {
         : print "You got rid of the ugly MEI logo as part of the nametag redesign.";
         }
      : else {
         : print "There's no logo here.";
         } 
      }
      
   : if_examine "mirror" {
      : print_graphic "orcpixelsm" width = "20" align = "center";
      : print "As orc-looking as ever.";
      : if (!has_examined_mirror) {
         : print "(Your score has gone up by one point.)";
         : add var = "score" value = "1";
         : set_true "has_examined_mirror";
       }
      }

   : if_examine "mirror_3" {
      : print_graphic "orcpixelsm" width = "20" align = "center";
      : print "As orc-looking as ever.";
      : if (!has_examined_mirror) {
         : print "(Your score has gone up by one point.)";
         : add var = "score" value = "1";
         : set_true "has_examined_mirror";
       }
      }
      
   : if_examine "spices" {
      : print "There's not much to do with them; they're just here for flavor.";
      }

   : match "take spices" {
      : if (is_at "kitchen") {
         : print "There's not much to do with them; they're just here for flavor.";
         }
      }

   : match "wait _ ; fight _ ; battle _ ; attack _ ; break _" {
      : if (is_at "clearing") {
         : print "Eventually a battle-scarred human warrior approaches.  She walks up to you and scans your nametag with her smartphone.  She snickers a bit at the result.  Then she taps something on her phone, and it starts blaring death metal by Frumious Bandersnatch, one of your least-loved bands.  She sets her phone on the ground and draws her sword, ready for battle.";
         : press_any_key;
         : goto "warriorbattle";
         : set_theme "battle_theme";
         : set_integer var = "opponent_hp" value = "50";
         : set_integer var = "your_hp" value = "20";
         : redescribe;
         }

      : else_if (is_present "warrior_body" || is_present "battle_xyz" || is_present "demon_bodies" || is_present "mage_body" || is_present "psion_bodies" || is_present "clock_body") {
            : print "You've already fought a battle.  It's time to report back to MEI.";
            }
      : else_if (!(is_at "clearing_2") && (verb_is "battle" || verb_is "attack" || verb_is "break")) {
         : print "You don't like being violent in your job, and you certainly don't like being violent outside of it.";
         }
      : else {
         : if (!is_at "warriorbattle" && !is_at "bedroom_2" && !is_at "clearing_2") {
         :  print "Time passes.";
            }
         }
      }

   : if (is_at "clearing_2" && !is_just_entered() && !is_present "warrior_body" && !is_present "battle_xyz" && !is_present "demon_bodies" && !is_present "mage_body" && !is_present "psion_bodies"&& !is_present "clock_body") {
      : if (verb_is "east") {
         : goto "southroad";
         : redescribe;
         }
      : else_if (verb_is "north") {
         : goto "office_2";
         : redescribe;
         }
      : else_if (verb_is "wait" || verb_is "fight" || verb_is "battle" || verb_is "attack" || verb_is "parry" || verb_is "spell") {
         
         : if (battle_number == 1 && !has_uncle_talked) {
            : print "Right now there's no reason to expect that your eighteenth battle would end any differently than your first seventeen.  You wish your dad were still around for stuff like this.  Maybe you could talk to your Uncle Carroll, weird as he is.  He'd certainly have a different perspective, anyway.";
            }
         : else_if (battle_number == 1 && has_uncle_talked && !has_spells) {
            : print "Well, you've talked with your uncle, and you guess he made things about your job a bit clearer in his own weird way.  But it's not like you've got anything practical to make your next fight easier.  And now that dumb song by Mimsy Whats-her-name is stuck in your head.  The time has come, the walrus said, uh ... to, um, walk ... Hmm. How did the rest of that go?";
            }
         
         : else_if (battle_number == 1) {
            : if (warrior_battle_once) {
               : print "The warrior returns again, and by now it's almost like seeing a co-worker with the same routine:  scan, music, fight.";
               }
            : else {
               : print "Soon enough the same human warrior arrives.  Sometimes some of the clients like to return and defeat the same easy kills (like you) for more gold and experience.  She again walks up to you and with a disdainful snort scans your nametag with her smartphone.  \"I heard orcs like to keep dying,\" she says.  She taps her phone, and then the death metal starts, and then she's upon you.";
               : set_true "warrior_battle_once";
               }
            : press_any_key;
            : goto "warriorbattle_2";
            : set_theme "battle_theme";
            : set_integer var = "opponent_hp" value = "50";
            : set_integer var = "your_hp" value = "20";
            : gosub "new_battle";
            : if (has_spells) {
               : set_string var = "warrior_battle_descr" {("\nThe warrior readies her sword. \nYou can ATTACK, PARRY, or cast a SPELL (A, P, or S).")};
               : set_string var = "you_can_only" {("You can only ATTACK, PARRY, or cast a SPELL (A, P, or S).")};
               }
            : redescribe;
            }
         : else_if (battle_number == 2) {
            : if (demon_battle_once) {
               : print "Ugh.  The demon couple again.  How romantic.";
               }
            : else {
               : print "Soon enough arrives a demon couple that looks like they just came from a cocktail party.  \"Well met, orc!\" the male one says affably, like he's in a play or something.  Ugh.  The Boss said something about how MEI had to diversify, how it had to expand to new target demographics.  So now there's this whole push to sell monster encounters as the path to true love.  They take out their phones, and as they scan your QR code, you get a strong hit of sulfur wafting from their hands.";
               : set_true "demon_battle_once";
               }
            : press_any_key;
            : goto "demonbattle";
            : set_theme "battle_theme";
            : set_string var = "opponent_name" {("Demon")};
            : set_string var = "opponent_hp_max" {("70")};
            : set_string var = "your_hp_max" {("30")};
            : set_integer var = "opponent_hp" value = "70";
            : set_integer var = "your_hp" value = "30";
            : gosub "new_battle";
            : redescribe;
            }
         : else_if (battle_number == 3) {
            : if (mage_battle_once) {
               : print "The elven mage returns with the same noncommittal air about her.";
               }
            : else {
               : print "This time it's an elven mage and her staff.  She remains silent and seems a little indifferent as she scans the QR code on your nametag with her phone.  She shrugs upon seeing the readout, then pulls her staff close to her.";
               : set_true "mage_battle_once";
               }
            : press_any_key;
            : goto "magebattle";
            : set_theme "battle_theme";
            : set_string var = "opponent_name" {("Mage")};
            : set_string var = "opponent_hp_max" {("90")};
            : set_string var = "your_hp_max" {("50")};
            : set_integer var = "opponent_hp" value = "90";
            : set_integer var = "your_hp" value = "50";
            : gosub "new_battle";
            : redescribe;
            }
         : else_if (battle_number == 4) {
            : if (psion_battle_once) {
               : print "The angels flap into the clearing again, eager to convolute your mind.";
               }
            : else {
               : print "Joy of joys, another couple, this one apparently rejected from some goth cosplay convention.  They've got black hair, black eyes, black clothes, and their black wings make them probably Angels of Death or something equally pompous.  Who cares.  It almost seems like they're snickering at your nihilistic thoughts as they flap their wings twice in synchrony, ready for battle.";
               : set_true "psion_battle_once";
               }
            : press_any_key;
            : goto "psionbattle";
            : set_theme "battle_theme";
            : set_string var = "opponent_name" {("Angel")};
            : set_string var = "opponent_hp_max" {("120")};
            : set_string var = "your_hp_max" {("70")};
            : set_integer var = "opponent_hp" value = "120";
            : set_integer var = "your_hp" value = "70";
            : gosub "new_battle";
            : redescribe;
            }
         : else_if (battle_number == 5) {
            : if (clock_battle_once) {
               : print "You can't believe you lost to this pint-sized timepiece, but here he is again.";
               }
            : else {
               : print "So ... steampunk.  You guess that's a thing that MEI is doing now.  A three-foot-high gnome comes barreling into the clearing.  He's got a silk top hat and various brass gears and valves and whatever glued to his face.  He's got a hefty-looking pocket watch on a long chain.  In a shrill voice, he keeps yelling things like, \"It's TIME to WATCH me clean your CLOCK!\" What a moron.";
               : set_true "clock_battle_once";
               }
            : press_any_key;
            : goto "clockbattle";
            : set_theme "battle_theme";
            : set_string var = "opponent_name" {("Gnome")};
            : set_string var = "opponent_hp_max" {("30")};
            : set_string var = "your_hp_max" {("100")};
            : set_integer var = "opponent_hp" value = "30";
            : set_integer var = "your_hp" value = "100";
            : gosub "new_battle";
            : redescribe;
            }
         }
      : else_if (verb_is "look") {
         : redescribe;
         }
      : else {
         : print "You've got no interest in doing anything else here.  You can either wait for another battle, or go north or east.";
         }
      }

   : if (is_at "clearing" && !is_just_entered()) {
      : cycle key = "wait_events" predictable_order = "true" skip_interval = "0"  {
         : print "Right now, there's not much to do besides wait.";
         : print "Yeah, just kind of waiting around right now.";
         : print "Still waiting.";
         : print "If only there was some sort of command to actually make you wait!";
         : print "Like a command you could type in.";
         : print "Like a command you could type in that begins with a W.";
         : print "Like a command you could type in that begins with a W and then has two vowels and then ends with a T.";
         : print "The fact that you haven't typed such a command yet doesn't bode well for your future.";
         : print "Maybe you'd like it better if it were presented as a Hangman-type puzzle: W _ _ T";
         : print "And the middle two letters are both vowels.";
         : print "And one of them is an A!";
         : print "And so the puzzle would now look like this:  W A _ T";
         : print "No, it's not WANT.  N isn't a vowel.";
         : print "Are you sure you're typing in actual words?";
         : print "Ugh.  Forget it.  So bored.";
         }
      }
   
}

######################################
#  Barriers                          #
######################################

barriers {
      boss_block : block {
      block_when_not = is_jon_talked
      location       = boss_office
      message        = You know by now you shouldn't walk directly into the Boss's office.  You should probably talk to Jonathan first.
      }
   
      boss_block_2 : block {
      block_when = boss_over
      location = boss_office
      message = There's no reason why you would want to go back into her office.
      }

      d5_block : block {
      block_when_exists = lightning
      location = d5
      message = It's impossible to get past the lightning without being atomized into orcium, which is a real element as far as you know.  There has to be some way to get rid of it.
      }

}

######################################
#  Game Information                  #
######################################

game_information {

   game_name        = Off-Season at the Dream Factory
   game_shortname   = Dream Factory
   written_by       = B.J. Best
   year_of_original = 2021
   year_of_release  = 2021
   uuid             = a6936cc6-0951-11eb-adc1-0242ac120002
   short_synopsis   = Stand in orcish thought, maybe win the battle
   game_version     = 1.0.0
   
}

######################################
#  Booleans                          #
######################################

booleans {
   song_finished : boolean "false";
   jon_unicorn : boolean "false";
   sponge_pond_once : boolean "false";
   has_had_wheel : boolean "false";
   has_earned_history_points : boolean "false";
   lost_twice : boolean "false";
   boss_can_talk : boolean "true";
   boss_spell_comment : boolean "false";
   boss_enraged : boolean "false";
   boss_done_talking : boolean "false";
   boss_whip : boolean "false";
   boss_cabbage : boolean "false";
   boss_wax : boolean "false";
   boss_walk : boolean "false";
   boss_robe : boolean "false";
   boss_is_hit : boolean "false";
   destroyed_lightning : boolean "false";
   is_final : boolean "false";
   uncle_seeds : boolean "false";
   no_mother : boolean "false";
   said_brillig : boolean "false";
   has_visited_sewer : boolean "false";
   has_all_spells : boolean "false";
   is_object_plural : boolean "false";
   has_been_in_sewer : boolean "false";
   uncle_1 : boolean "false";
   uncle_2 : boolean "false";
   uncle_3 : boolean "false";
   uncle_4 : boolean "false";
   uncle_5 : boolean "false";
   uncle_6 : boolean "false";
   uncle_7 : boolean "false";
   uncle_8 : boolean "false";
   has_read_history : boolean "false";
   history_done : boolean "false";
   sewer_done : boolean "false";
   what_do_you_do : boolean "false";
   jon_1_chat : boolean "false";
   jon_2_chat : boolean "false";
   jon_3_chat : boolean "false";
   jon_4_chat : boolean "false";
   jon_racism : boolean "false";
   knows_racism : boolean "false";
   jon_promotion : boolean "false";
   knows_promotion : boolean "false";
   jon_dream : boolean "false";
   jon_boss : boolean "false";
   jon_work : boolean "false";
   whats_next : boolean "false";
   can_sleep : boolean "false";
   boss_out : boolean "false";
   has_uncle_talked : boolean "false";
   has_examined_mirror : boolean "false";
   has_examined_spices : boolean "false";
   has_lost_spice_points : boolean "false";
   has_taken_wheel : boolean "false";
   is_demand : boolean "false";
   is_wit : boolean "false";
   is_stand : boolean "false";
   is_club : boolean "false";
   is_arms : boolean "false";
   is_wheel : boolean "false";
   is_mitts : boolean "false";
   jon_1 : boolean "false";
   jon_2 : boolean "false";
   jon_3 : boolean "false";
   jon_4 : boolean "false";
   jon_5 : boolean "false";
   is_jon_talked : boolean "false";
   has_clearing_points : boolean "false";
   has_clearing_lose_points : boolean "false";
   boss_1 : boolean "false";
   boss_2 : boolean "false";
   boss_3 : boolean "false";
   boss_4 : boolean "false";
   boss_5 : boolean "false";
   boss_over : boolean "false";
   has_examined_brochure : boolean "false";
   is_in_dungeon : boolean "false";
   has_flown_once : boolean "false";
   nametag_warn : boolean "false";
   from_pipe : boolean "false";
   has_spells : boolean "false";
   has_wax : boolean "false";
   has_robe : boolean "false";
   has_whip : boolean "false";
   has_cabbage : boolean "false";
   has_walk : boolean "false";
   is_wax : boolean "false";
   is_robe : boolean "false";
   is_whip : boolean "false";
   is_cabbage : boolean "false";
   is_walk : boolean "false";
   is_spell : boolean "false";
   cast_wax : boolean "false";
   cast_robe : boolean "false";
   cast_whip : boolean "false";
   cast_cabbage : boolean "false";
   cast_walk : boolean "false";
   defeated_warrior : boolean "false";
   warrior_won : boolean "false";
   warrior_lost : boolean "false";
   warrior_battle_once : boolean "false";
   defeated_demons : boolean "false";
   demons_won : boolean "false";
   demons_lost : boolean "false";
   demon_battle_once : boolean "false";
   mage_won : boolean "false";
   mage_lost : boolean "false";
   defeated_mage : boolean "false";
   mage_battle_once : boolean "false";
   psion_won : boolean "false";
   psion_lost : boolean "false";
   defeated_psion : boolean "false";
   psion_battle_once : boolean "false";
   clock_battle_once : boolean "false";
   clock_won : boolean "false";
   clock_lost : boolean "false";
   defeated_clock : boolean "false";
   battle_won : boolean "false";
   battle_lost : boolean "false";
   opp_spared : boolean "false";
   opp_killed : boolean "false";
   is_go_left : dynamic_boolean {(
      original "verb" == "l" ||
      (verb_is "left")  ||
     (original "verb" == "go" && noun1_is "left")
   )}
   
   is_go_right : dynamic_boolean {(
      original "verb" == "r" ||
      (verb_is "right") ||
      (original "verb" == "go" && noun1_is "right")
   )}
   is_attack : dynamic_boolean {(
      (sentence_raw() == "a")|| (sentence_raw() == "a ")  || (verb_is "attack"))}
}

######################################
#  Integers                          #
######################################

integers {
   wrong_way_count : integer "0";
   pond_count : integer "0";
   carroll_visits : integer "0";
   house_visits : integer "0";
   final_sleep_count : integer "0";
   road_visits : integer "0";
   carriage_visits : integer "0";
   dungeon_commentary : integer "0";
   spell_count : integer "0";
   song_count : integer "0";
   score : integer "0";
   opponent_hp : integer "0";
   your_hp : integer "0";
   temp_lose_hp : integer "0";
   defense_mod : integer "0";
   total_warrior_damage : integer "0";
   battle_number : integer "1";
   reputation : integer "0";
   minor_reputation : integer "0";
   lost_count : integer "0";
   club_count : integer "0";
   random_boss : integer "0";
   boss_taunt_count : integer "0";
   inventory_limit : integer "20";
   battle_losses : integer "0";
   kitchen_count : integer "0";
}


######################################
#  Strings                           #
######################################

strings {

   carroll_descr : string "Man, this place is fantastic, in the \"made of fantasy\" sense of the word.  Books and manuscripts tumble out of strained bookshelves.  Metal baubles and gizmos are everywhere--some on the floor, some hung with twine from the ceiling.  There appear to be an antique camera and photo backdrop in one corner.  But mostly your uncle's massive desk dominates the room, covered with mathematical proofs, flasks with colored liquids in them, bones and feathers from unknown animals, and more and more and more.  It's a jumbled wonderland of detritus.\nYour Uncle Carroll stares out a window, seemingly lost in thought.";
   house_descr : string "Your house could pass for quaintly suburban, save for the fact that you live on land bordered by farms and forest, five miles away from the nearest village, far enough away that the cosmopolitan elves and gnomes never have to think about you.  You can enter your house, while the road that leads into the forest is to the west.";
   temp : string "";
   road_descr : string "This road leads to places other than a clearing where adventurers repeatedly pummel you, of course.  Uncle Carroll's house is to the north, and a small pond you sometimes visit is south.  Your house is back east, and, if you must take it, there is a slightly longer but fortunately much straighter path to the clearing to the west.";
   carriage_descr : string "Your Uncle Carroll is strange, even for an orc.  He's insisted on living inside this carriage house that wasn't built in the current century and possibly not built in the previous one, either.  There's a back woods north of his house, and paths lead in other directions, too.  You can also go in and visit him if you must.";
   reception_descr : string "They sure keep the office dim.  All part of the atmosphere, you guess--\"there's danger around every corner!\".  You're in the reception area where the clients typically wait.  You can exit the office if you're done here.\nJonathan, the administrative assistant, casually regards you.";
   comment : string "";
   boss_theme : string "";
   bossbattle_descr : string "The Boss glances as her tablet one more time. \"I've been waiting for this, Henderson!  Killing you is going to be such fun!\" she says gleefully.\nYou can ATTACK, PARRY, or cast a SPELL (A, P, or S).";
   bed_4_descr : string "Yes. Sleep.";
   d1_descr : string "Exits: Forward, turn around\nYou're back in the dungeon of your Dream.  The first time you visited, you learned regular directions don't make sense here.  You can only go FORWARD (F), LEFT (L), and RIGHT (R), or else you can TURN AROUND (T).  You can also LOOK to review your surroundings.";
   dungeon_header : string "Dungeon";
   spell_object : string;
   spell_name : string;
   sewer_descr : string "That's weird.  There's a large sewer pipe here that's cut into a small hillside.  You don't remember it from when you were younger and playing in these woods near Uncle Carroll's house.  You can go back west.";
   poem : string;
   shoes : string "<shoes<#r>>";
   ships : string "<ships<#r>>";
   sealing_wax : string "<sealing-wax<#r>>";
   cabbages : string "<cabbages<#r>>";
   kings : string "<kings<#r>>";
   jonathan_descr : string "Jonathan works for MEI part-time, mostly because he gets a heavy discount on his Dreams.  He's working on becoming a Night Priest or a Night Knight or some such, always wearing that creepy hood.  Anyway, you'd better TALK TO him.";
   mage_attack_descr : string "";
   psion_attack_descr : string "";
   clock_attack_descr : string "";
   demon_attack_descr : string "";
   warrior_attack_descr : string "";
   opponent_name : string "Warrior";
   opponent_hp_max : string "50";
   your_hp_max : string "20";
   score_topright : dynamic_string {(score + " / 100")};
   opponent_topleft : dynamic_string {(opponent_name +" health: " + opponent_hp + " / " + opponent_hp_max)};
   your_topright : dynamic_string {("Your health: " + your_hp + " / " + your_hp_max)};
   opponent_hit : string "0";
   your_hit : string "0";
   kitchen_sponge : string "Your kitchen is nice enough, you guess.  It's got a stove and a sink and a microwave where you heat up your frozen rat burritos.  There's something small and yellowish on the edge of the sink.  Your bedroom is to the east, and you can exit your house.";
   d4_descr : string "Exits: Turn around\nThe floor abruptly stops at a pool of dark water that stretches the length of the room.";
   windmill_descr : string "The windmill blooms with rust, and its wooden blades have presumably rotted and fallen away.  Thick vines with orange leaves clot at the top.  You think you see something else hanging from a metal crosspiece near the top, but it's impossible to make it out from the ground.";
   farm_descr : string "Whatever farm was here has been lost to time.  The only structure that remains is a broken windmill overrun with vines--though there maybe seems to be something else at its top.  Some scraggly weeds are at the base of it, next to a bare patch of dirt.  The main road is back to the south.";
   dirt_descr : string "A small area of bare, dry earth.";
   pond_descr : string "You're at a pleasant little pond beside a much larger swamp.  There's a stone path that leads to a small bridge, an odd light occasionally glinting beneath the bridge.  Sometimes you like to come here and just be, away from other monsters and other adventurers and those who overlap in those categories.";
   small_pond_descr : string "The pond is small and dotted with fallen leaves.  An occasional glint of light comes from the water under the bridge.";
   d14_descr : string "Exits: Turn around\nYour path forward is blocked by a sizzling bolt of lightning!";
   warrior_battle_descr : string "\nThe warrior readies her sword. \nYou can ATTACK or PARRY (A or P).";
   clearing_2_descr : string "Here's the same clearing, you guess.  You can try to do your job better this time by waiting around for another battle.  Otherwise, the MEI office is still to the north, and the road past the farm is to the east.";
   you_can_only : string "You can only ATTACK or PARRY (A or P).";
}

game_settings {
   enable_standard_all_behaviour = false
   precache_strategy = precache_all
   image_load_strategy = synchronous
   on_examine_non_known_entity = you_see_nothing_special_2
   add_standard_prepositions = true
   inventory_items_limit_var = inventory_limit
   //on_examine_non_known_entity = you_see_nothing_special | you_see_nothing_special_2 | cant_see_one_of_those
   }

themes {

   final_theme : theme {
      theme_settings {
         // SB = status bar
         layout                = SB G LOCK X D O
         header_capitalization = original
         //font = userfont_envious
         font = userfont_sierra_agi_font
         //shader = scanlines
         
      }
      screen {
         experimental_spacer_pre_text = 1
         padding_horz             = 0
         status_bar_padding_horz  = 4
         paragraph_spacing_multiplier = 1.5
         status_bar_padding_top = 1
         status_bar_padding_bottom = 1
         widescreen_horz_ratio = 0.5
         snap_mode = free
      }
      status_bar {
         : header_text;
         : dynamic_text "score_topright";
         
      }
      colors {
         pen = #222
         paper = #eee
         status_bar_pen   = #222
         status_bar_paper = #bbd
      }
      lister_exits {
         exit_list_capitalization = first_camel_then_lower
         experimental_enable_direction_arrows = false
         exit_list_style = concise
         is_list_enter = true
      }
      lister_inventory {
         oxford_comma = true
         }
         
      lister_objects {
         oxford_comma = true
         }
         
      system_messages {
         on_put_non_container = There's no reason to do that.      
         ask_new_game                                   = Would you like to start a new game?
         ask_quit                                       = Do you wish to quit the game?
         be_more_specific                               = Be more specific ...\s
         cant_see_one_of_those                          = You can't see one of those.
         cant_take                                      = You can't take that.
         dont_have_one_of_those                         = You don't have one of those!
         exit_list_additional_exits_are_located_verbose = Additional exits are located\s
         exit_list_end_text                             = 
         exit_list_end_text_verbose                     = .
         exit_list_from_here_you_can_go_verbose         = You can go\s
         exit_list_header_concise                       = Exits:\s
         exit_list_last_sep_verbose                     = \sand\s
         exit_list_sep_verbose                          = ,\s
         exit_list_there_are_no_obvious_exits           = There are no obvious exits.
         exit_list_to_the_verbose                       = to the
         exit_list_you_can_also_go_verbose              = You can also go\s
         gamebook_question                              = Select An Option ...
         i_cant_do_that                                 = That doesn't work here.
         invalid_choice                                 = Please enter the number of your choice.
         inventory_list_empty                           = Nothing
         inventory_list_end_text                        = .
         inventory_list_final_separator                 = \sand\s
         inventory_list_header                          = You are carrying:\s
         inventory_list_header_verbose                  = You are carrying\s
         inventory_list_separator                       = ,\s
         must_remove_first                              = Try taking it off first.
         not_carried                                    = You can't ${verb} something you are not carrying.
         not_present                                    = ${entity} is not here.
         nothing_here                                   = There is nothing here.
         nothing_to_get                                 = The word \"${noun}\" isn't something you can take here.
         object_list_empty                              = Nothing
         object_list_end_text                           = \shere.
         object_list_final_separator                    = \sand\s
         object_list_header                             = You see :\s
         object_list_header_verbose                     = You can see\s
         object_list_separator                          = ,\s
         ok                                             = OK
         on_drop                                        = You drop ${entity}.
         on_get                                         = You take ${entity}.
         on_put                                         = You put ${entity} inside ${entity2}.
         on_remove                                      = You take off ${entity}.
         on_wear                                        = You wear ${entity}.
         post_quit                                      = You have quit the game.

         prompt                                         = >>
         question_prompt_char                           = ?
         there_is_nothing_you_can                       = There is nothing you can ${verb} at the moment.
         unknown_noun                                   = The word "${noun}" isn't recognized as a noun.
         unknown_verb                                   = The word "${verb}" isn't recognized as a verb.
         worn_suffix                                    = \s(worn)
         you_already_wear                               = You are already wearing that.
         you_are_already_carrying                       = You already have ${entity}.
         you_are_not_holding                            = You are not holding ${entity}.
         you_cant_go_that_direction                     = You can't go that way.  Type EXITS for a list of available exits.
         you_cant_wear                                  = You can't wear that.
         you_cant_wear_anything_else                    = You can't wear anything else without removing something first.
         you_dont_wear                                  = You are not wearing that.
         you_see_nothing_special                        = You could spend hours examining the ${noun}, but instead you don't.
         you_see_nothing_special_2 = The word \"${noun}\" isn't recognized as a noun here. 
      }
   }

   dungeon_theme : theme {
      theme_settings {
         layout = SB G LOCK X D O
         header_capitalization = original
         //font = daad
         //font = delta_10
         font = userfont_envious
      }

      screen {
         experimental_spacer_pre_text = 0
         padding_horz             = 0
         status_bar_padding_horz  = 4
         paragraph_spacing_multiplier = 1.25
         status_bar_padding_top = 2
         status_bar_padding_bottom = 1
         widescreen_horz_ratio = 0.5
         snap_mode = free
      }
      
      colors {
         paper = #002
         pen = #ddd
         status_bar_paper = #224
         status_bar_pen = #fff
         }

      lister_exits {
         exit_list_capitalization = first_camel_then_lower
         experimental_enable_direction_arrows = false
         exit_list_style = concise
         is_list_enter = true
      }
      lister_inventory {
         oxford_comma = true
         }
         
      lister_objects {
         oxford_comma = true
         }         
         
      status_bar {
         : dynamic_text "dungeon_header";
         : dynamic_text "score_topright";
      }
      
      system_messages {
         on_put_non_container = There's no reason to do that.      
         ask_new_game                                   = Would you like to start a new game?
         ask_quit                                       = Do you wish to quit the game?
         be_more_specific                               = Be more specific ...\s
         cant_see_one_of_those                          = You can't see one of those.
         cant_take                                      = You can't take that.
         dont_have_one_of_those                         = You don't have one of those!
         exit_list_additional_exits_are_located_verbose = Additional exits are located\s
         exit_list_end_text                             = 
         exit_list_end_text_verbose                     = .
         exit_list_from_here_you_can_go_verbose         = You can go\s
         exit_list_header_concise                       = Exits:\s
         exit_list_last_sep_verbose                     = \sand\s
         exit_list_sep_verbose                          = ,\s
         exit_list_there_are_no_obvious_exits           = There are no obvious exits.
         exit_list_to_the_verbose                       = to the
         exit_list_you_can_also_go_verbose              = You can also go\s
         gamebook_question                              = Select An Option ...
         i_cant_do_that                                 = That doesn't work here.
         invalid_choice                                 = Please enter the number of your choice.
         inventory_list_empty                           = Nothing
         inventory_list_end_text                        = .
         inventory_list_final_separator                 = \sand\s
         inventory_list_header                          = You are carrying:\s
         inventory_list_header_verbose                  = You are carrying\s
         inventory_list_separator                       = ,\s
         must_remove_first                              = Try taking it off first.
         not_carried                                    = You can't ${verb} something you are not carrying.
         not_present                                    = ${entity} is not here.
         nothing_here                                   = There is nothing here.
         nothing_to_get                                 = The word \"${noun}\" isn't something you can take here.
         object_list_empty                              = Nothing
         object_list_end_text                           = \shere.
         object_list_final_separator                    = \sand\s
         object_list_header                             = You see :\s
         object_list_header_verbose                     = You can see\s
         object_list_separator                          = ,\s
         ok                                             = OK
         on_drop                                        = You drop ${entity}.
         on_get                                         = You take ${entity}.
         on_put                                         = You put ${entity} inside ${entity2}.
         on_remove                                      = You take off ${entity}.
         on_wear                                        = You wear ${entity}.
         post_quit                                      = You have quit the game.

         prompt                                         = >>
         question_prompt_char                           = ?
         there_is_nothing_you_can                       = There is nothing you can ${verb} at the moment.
         unknown_noun                                   = The word "${noun}" isn't recognized as a noun.
         unknown_verb                                   = The word "${verb}" isn't recognized as a verb.
         worn_suffix                                    = \s(worn)
         you_already_wear                               = You are already wearing that.
         you_are_already_carrying                       = You already have ${entity}.
         you_are_not_holding                            = You are not holding ${entity}.
         you_cant_go_that_direction                     = You can't go that way.  Type LOOK while in your Dream to list the possible exits.
         you_cant_wear                                  = You can't wear that.
         you_cant_wear_anything_else                    = You can't wear anything else without removing something first.
         you_dont_wear                                  = You are not wearing that.
         you_see_nothing_special                        = You could spend hours examining the ${noun}, but instead you don't.
         you_see_nothing_special_2 = The word \"${noun}\" isn't recognized as a noun here. 
      }
      
      
   }

   battle_theme : theme {
      theme_settings {
         layout = SB G LOCK X D O
         header_capitalization = original
         //font = userfont_dead_forest
         //font = delta_10
         font = userfont_betrayal_at_krondor
      }

      screen {
         experimental_spacer_pre_text = 1
         padding_horz             = 0
         status_bar_padding_horz  = 4
         paragraph_spacing_multiplier = 1
         status_bar_padding_top = 2
         status_bar_padding_bottom = 2
         widescreen_horz_ratio = 0.5
         snap_mode = free
      }
      
      colors {
         paper = 7
         pen = 0
         status_bar_paper = 13
         status_bar_pen = 0
         //choice_paper = ["#ccc"]
         //choice_pen = ["#000"]
         //choice_selected_paper = ["#ddd"]
         //choice_selected_pen = ["#222"]
         }

      status_bar {
         : dynamic_text "opponent_topleft";
         : dynamic_text "your_topright";
         }
      lister_inventory {
         oxford_comma = true
         } 
         
      lister_objects {
         oxford_comma = true
         }         
         
         
      system_messages {
         on_put_non_container = There's no reason to do that.      
         ask_new_game                                   = Would you like to start a new game?
         ask_quit                                       = Do you wish to quit the game?
         be_more_specific                               = Be more specific ...\s
         cant_see_one_of_those                          = You can't see one of those.
         cant_take                                      = You can't take that.
         dont_have_one_of_those                         = You don't have one of those!
         exit_list_additional_exits_are_located_verbose = Additional exits are located\s
         exit_list_end_text                             = 
         exit_list_end_text_verbose                     = .
         exit_list_from_here_you_can_go_verbose         = You can go\s
         exit_list_header_concise                       = Exits:\s
         exit_list_last_sep_verbose                     = \sand\s
         exit_list_sep_verbose                          = ,\s
         exit_list_there_are_no_obvious_exits           = There are no obvious exits.
         exit_list_to_the_verbose                       = to the
         exit_list_you_can_also_go_verbose              = You can also go\s
         gamebook_question                              = Select An Option ...
         i_cant_do_that                                 = That doesn't work here.
         invalid_choice                                 = Please enter the number of your choice.
         inventory_list_empty                           = Nothing
         inventory_list_end_text                        = .
         inventory_list_final_separator                 = \sand\s
         inventory_list_header                          = You are carrying:\s
         inventory_list_header_verbose                  = You are carrying\s
         inventory_list_separator                       = ,\s
         must_remove_first                              = Try taking it off first.
         not_carried                                    = You can't ${verb} something you are not carrying.
         not_present                                    = ${entity} is not here.
         nothing_here                                   = There is nothing here.
         nothing_to_get                                 = The word \"${noun}\" isn't something you can take here.
         object_list_empty                              = Nothing
         object_list_end_text                           = \shere.
         object_list_final_separator                    = \sand\s
         object_list_header                             = You see :\s
         object_list_header_verbose                     = You can see\s
         object_list_separator                          = ,\s
         ok                                             = OK
         on_drop                                        = You drop ${entity}.
         on_get                                         = You take ${entity}.
         on_put                                         = You put ${entity} inside ${entity2}.
         on_remove                                      = You take off ${entity}.
         on_wear                                        = You wear ${entity}.
         post_quit                                      = You have quit the game.

         prompt                                         = >>
         question_prompt_char                           = ?
         there_is_nothing_you_can                       = There is nothing you can ${verb} at the moment.
         unknown_noun                                   = The word "${noun}" isn't recognized as a noun.
         unknown_verb                                   = The word "${verb}" isn't recognized as a verb.
         worn_suffix                                    = \s(worn)
         you_already_wear                               = You are already wearing that.
         you_are_already_carrying                       = You already have ${entity}.
         you_are_not_holding                            = You are not holding ${entity}.
         you_cant_go_that_direction                     = You can't go that way.
         you_cant_wear                                  = You can't wear that.
         you_cant_wear_anything_else                    = You can't wear anything else without removing something first.
         you_dont_wear                                  = You are not wearing that.
         you_see_nothing_special                        = You could spend hours examining the ${noun}, but instead you don't.
         you_see_nothing_special_2 = The word \"${noun}\" isn't recognized as a noun here.
      }
   }      

   battle_theme_blue : theme {
      theme_settings {
         layout = SB G LOCK X D O
         header_capitalization = original
         //font = userfont_dead_forest
         //font = delta_10
         font = userfont_betrayal_at_krondor
      }

      screen {
         experimental_spacer_pre_text = 1
         padding_horz             = 0
         status_bar_padding_horz  = 4
         paragraph_spacing_multiplier = 1
         status_bar_padding_top = 2
         status_bar_padding_bottom = 1
         widescreen_horz_ratio = 0.5
         snap_mode = free
      }
      
      colors {
         paper = #7be
         pen = 0
         //status_bar_paper = #e47
         //status_bar_paper = #b14;
         status_bar_paper = #d8f
         status_bar_pen = 0
         //choice_paper = ["#7be"]
         //choice_pen = ["<#r>"]
         //choice_selected_paper = ["#8cf"]
         //choice_selected_pen = ["#222"]
         }

      status_bar {
         : dynamic_text "opponent_topleft";
         : dynamic_text "your_topright";
         }
      lister_inventory {
         oxford_comma = true
         }
         
      lister_objects {
         oxford_comma = true
         }
         
      system_messages {
         on_put_non_container = There's no reason to do that.      
         ask_new_game                                   = Would you like to start a new game?
         ask_quit                                       = Do you wish to quit the game?
         be_more_specific                               = Be more specific ...\s
         cant_see_one_of_those                          = You can't see one of those.
         cant_take                                      = You can't take that.
         dont_have_one_of_those                         = You don't have one of those!
         exit_list_additional_exits_are_located_verbose = Additional exits are located\s
         exit_list_end_text                             = 
         exit_list_end_text_verbose                     = .
         exit_list_from_here_you_can_go_verbose         = You can go\s
         exit_list_header_concise                       = Exits:\s
         exit_list_last_sep_verbose                     = \sand\s
         exit_list_sep_verbose                          = ,\s
         exit_list_there_are_no_obvious_exits           = There are no obvious exits.
         exit_list_to_the_verbose                       = to the
         exit_list_you_can_also_go_verbose              = You can also go\s
         gamebook_question                              = Select An Option ...
         i_cant_do_that                                 = That doesn't work here.
         invalid_choice                                 = Please enter the number of your choice.
         inventory_list_empty                           = Nothing
         inventory_list_end_text                        = .
         inventory_list_final_separator                 = \sand\s
         inventory_list_header                          = You are carrying:\s
         inventory_list_header_verbose                  = You are carrying\s
         inventory_list_separator                       = ,\s
         must_remove_first                              = Try taking it off first.
         not_carried                                    = You can't ${verb} something you are not carrying.
         not_present                                    = ${entity} is not here.
         nothing_here                                   = There is nothing here.
         nothing_to_get                                 = The word \"${noun}\" isn't something you can take here.
         object_list_empty                              = Nothing
         object_list_end_text                           = \shere.
         object_list_final_separator                    = \sand\s
         object_list_header                             = You see :\s
         object_list_header_verbose                     = You can see\s
         object_list_separator                          = ,\s
         ok                                             = OK
         on_drop                                        = You drop ${entity}.
         on_get                                         = You take ${entity}.
         on_put                                         = You put ${entity} inside ${entity2}.
         on_remove                                      = You take off ${entity}.
         on_wear                                        = You wear ${entity}.
         post_quit                                      = You have quit the game.

         prompt                                         = >>
         question_prompt_char                           = ?
         there_is_nothing_you_can                       = There is nothing you can ${verb} at the moment.
         unknown_noun                                   = The word "${noun}" isn't recognized as a noun.
         unknown_verb                                   = The word "${verb}" isn't recognized as a verb.
         worn_suffix                                    = \s(worn)
         you_already_wear                               = You are already wearing that.
         you_are_already_carrying                       = You already have ${entity}.
         you_are_not_holding                            = You are not holding ${entity}.
         you_cant_go_that_direction                     = You can't go that way.
         you_cant_wear                                  = You can't wear that.
         you_cant_wear_anything_else                    = You can't wear anything else without removing something first.
         you_dont_wear                                  = You are not wearing that.
         you_see_nothing_special                        = You could spend hours examining the ${noun}, but instead you don't.
         you_see_nothing_special_2 = The word \"${noun}\" isn't recognized as a noun here.
      }

   } 


   battle_theme_final_enraged : theme {
      theme_settings {
         layout = SB G LOCK X D O
         header_capitalization = original
         //font = userfont_dead_forest
         //font = delta_10
         font = userfont_betrayal_at_krondor
      }

      screen {
         experimental_spacer_pre_text = 1
         padding_horz             = 0
         status_bar_padding_horz  = 4
         paragraph_spacing_multiplier = 1
         status_bar_padding_top = 2
         status_bar_padding_bottom = 1
         widescreen_horz_ratio = 0.5
         snap_mode = free
      }
      
      colors {
         paper = 0
         pen = #eee
         //status_bar_paper = #e47
         status_bar_paper = #f00;
         status_bar_pen = 0
         //choice_paper = ["#000"]
         //choice_pen = ["#eee"]
         //choice_selected_paper = ["#fff"]
         //choice_selected_pen = ["#222"]
         }

      status_bar {
         : dynamic_text "opponent_topleft";
         : dynamic_text "your_topright";
         }

      lister_inventory {
         oxford_comma = true
         }
         
      lister_objects {
         oxford_comma = true
         }

      system_messages {
         on_put_non_container = There's no reason to do that.      
         ask_new_game                                   = Would you like to start a new game?
         ask_quit                                       = Do you wish to quit the game?
         be_more_specific                               = Be more specific ...\s
         cant_see_one_of_those                          = You can't see one of those.
         cant_take                                      = You can't take that.
         dont_have_one_of_those                         = You don't have one of those!
         exit_list_additional_exits_are_located_verbose = Additional exits are located\s
         exit_list_end_text                             = 
         exit_list_end_text_verbose                     = .
         exit_list_from_here_you_can_go_verbose         = You can go\s
         exit_list_header_concise                       = Exits:\s
         exit_list_last_sep_verbose                     = \sand\s
         exit_list_sep_verbose                          = ,\s
         exit_list_there_are_no_obvious_exits           = There are no obvious exits.
         exit_list_to_the_verbose                       = to the
         exit_list_you_can_also_go_verbose              = You can also go\s
         gamebook_question                              = Select An Option ...
         i_cant_do_that                                 = That doesn't work here.
         invalid_choice                                 = Please enter the number of your choice.
         inventory_list_empty                           = Nothing
         inventory_list_end_text                        = .
         inventory_list_final_separator                 = \sand\s
         inventory_list_header                          = You are carrying:\s
         inventory_list_header_verbose                  = You are carrying\s
         inventory_list_separator                       = ,\s
         must_remove_first                              = Try taking it off first.
         not_carried                                    = You can't ${verb} something you are not carrying.
         not_present                                    = ${entity} is not here.
         nothing_here                                   = There is nothing here.
         nothing_to_get                                 = The word \"${noun}\" isn't something you can take here.
         object_list_empty                              = Nothing
         object_list_end_text                           = \shere.
         object_list_final_separator                    = \sand\s
         object_list_header                             = You see :\s
         object_list_header_verbose                     = You can see\s
         object_list_separator                          = ,\s
         ok                                             = OK
         on_drop                                        = You drop ${entity}.
         on_get                                         = You take ${entity}.
         on_put                                         = You put ${entity} inside ${entity2}.
         on_remove                                      = You take off ${entity}.
         on_wear                                        = You wear ${entity}.
         post_quit                                      = You have quit the game.

         prompt                                         = >>
         question_prompt_char                           = ?
         there_is_nothing_you_can                       = There is nothing you can ${verb} at the moment.
         unknown_noun                                   = The word "${noun}" isn't recognized as a noun.
         unknown_verb                                   = The word "${verb}" isn't recognized as a verb.
         worn_suffix                                    = \s(worn)
         you_already_wear                               = You are already wearing that.
         you_are_already_carrying                       = You already have ${entity}.
         you_are_not_holding                            = You are not holding ${entity}.
         you_cant_go_that_direction                     = You can't go that way.
         you_cant_wear                                  = You can't wear that.
         you_cant_wear_anything_else                    = You can't wear anything else without removing something first.
         you_dont_wear                                  = You are not wearing that.
         you_see_nothing_special                        = You could spend hours examining the ${noun}, but instead you don't.
         you_see_nothing_special_2 = The word \"${noun}\" isn't recognized as a noun here.
      }


   } 
   
   main_theme : theme {
      theme_settings {
         // SB = status bar
         //experimental_wait_graphic = qr1    
         layout                = SB G LOCK X D O
         header_capitalization = original
         //font = userfont_envious
         font = userfont_sierra_agi_font
         //shader = scanlines
         
      }
      screen {
         experimental_spacer_pre_text = 1
         padding_horz             = 0
         status_bar_padding_horz  = 4
         paragraph_spacing_multiplier = 1.5
         status_bar_padding_top = 1
         status_bar_padding_bottom = 1
         widescreen_horz_ratio = 0.5
         snap_mode = free
         //border_mode_vertical_percent = 1
      }
      status_bar {
         : header_text;
         : dynamic_text "score_topright";
         
      }
      colors {
         //was pen #bbb paper #000
         pen = #bbb
         paper = #111
         status_bar_pen   = #111
         status_bar_paper = #fff
         //choice_paper = ["#f00"]
         //choice_pen = ["#bbb"]
         //choice_selected_paper = ["#f00"]
         //choice_selected_pen = ["#ddd"]
         //border = #111
      }
      lister_exits {
         exit_list_capitalization = first_camel_then_lower
         experimental_enable_direction_arrows = false
         exit_list_style = concise
         is_list_enter = true
      }

      lister_inventory {
         oxford_comma = true
         }
         
      lister_objects {
         oxford_comma = true
         }

      system_messages {
        // on_put_non_surface = That doesn't work.
         on_put_non_container = There's no reason to do that.
         ask_new_game                                   = Would you like to start a new game?
         ask_quit                                       = Do you wish to quit the game?
         be_more_specific                               = Be more specific ...\s
         cant_see_one_of_those                          = You can't see one of those.
         cant_take                                      = You can't take that.
         dont_have_one_of_those                         = You don't have one of those!
         exit_list_additional_exits_are_located_verbose = Additional exits are located\s
         exit_list_end_text                             = 
         exit_list_end_text_verbose                     = .
         exit_list_from_here_you_can_go_verbose         = You can go\s
         exit_list_header_concise                       = Exits:\s
         exit_list_last_sep_verbose                     = \sand\s
         exit_list_sep_verbose                          = ,\s
         exit_list_there_are_no_obvious_exits           = There are no obvious exits.
         exit_list_to_the_verbose                       = to the
         exit_list_you_can_also_go_verbose              = You can also go\s
         gamebook_question                              = Select An Option ...
         i_cant_do_that                                 = That doesn't work here.
         invalid_choice                                 = Please enter the number of your choice.
         inventory_list_empty                           = Nothing
         inventory_list_end_text                        = .
         inventory_list_final_separator                 = \sand\s
         inventory_list_header                          = You are carrying:\s
         inventory_list_header_verbose                  = You are carrying\s
         inventory_list_separator                       = ,\s
         must_remove_first                              = Try taking it off first.
         not_carried                                    = You can't ${verb} something you are not carrying.
         not_present                                    = ${entity} is not here.
         nothing_here                                   = There is nothing here.
         nothing_to_get                                 = The word \"${noun}\" isn't something you can take here.
         object_list_empty                              = Nothing
         object_list_end_text                           = \shere.
         object_list_final_separator                    = \sand\s
         object_list_header                             = You see :\s
         object_list_header_verbose                     = You can see\s
         object_list_separator                          = ,\s
         ok                                             = OK
         on_drop                                        = You drop ${entity}.
         on_get                                         = You take ${entity}.
         on_put                                         = You put ${entity} inside ${entity2}.
         on_remove                                      = You take off ${entity}.
         on_wear                                        = You wear ${entity}.
         post_quit                                      = You have quit the game.

         prompt                                         = >>
         question_prompt_char                           = ?
         there_is_nothing_you_can                       = There is nothing you can ${verb} at the moment.
         unknown_noun                                   = The word "${noun}" isn't recognized as a noun.
         unknown_verb                                   = The word "${verb}" isn't recognized as a verb.
         worn_suffix                                    = \s(worn)
         you_already_wear                               = You are already wearing that.
         you_are_already_carrying                       = You already have ${entity}.
         you_are_not_holding                            = You are not holding ${entity}.
         you_cant_go_that_direction                     = You can't go that way.  Type EXITS for a list of available exits.
         you_cant_wear                                  = You can't wear that.
         you_cant_wear_anything_else                    = You can't wear anything else without removing something first.
         you_dont_wear                                  = You are not wearing that.
         you_see_nothing_special                        = You could spend hours examining the ${noun}, but instead you don't.
         you_see_nothing_special_2 = The word \"${noun}\" isn't recognized as a noun here. 
      }
   }
}


assets {

   graphics {
      //waittwocolor : gif "https://bjbest60.neocities.org/orcish/twocolor.gif";
      
      off_season : png "images/offseason.png";
//      winter_truck : png "https://bjbest60.neocities.org/orcish/wintertruck.png";
      winter_clearing : png "images/winterclearing.png";
      winter_carriage : png "images/wintercarriage.png";
      winter_road : png "images/winterroad.png";
      winter_house : png "images/winterhouse.png";
      boss_float : png "images/bossenraged.png";
      boss_alter_2 : png "images/bossalter2color.png";
      boss_alter : png "images/bossalter.png";
      clearing_alter : png "images/clearingalter.png";
      final1 : png "images/probleminit.png";
      final2 : png "images/problem1new.png";
      final3 : png "images/problem2new.png";
      final4 : png "images/problem3new.png";
      final5 : png "images/problem4new.png";
      final6 : png "images/problem5new.png";
      bed_small : png "images/bed.png";
      kitchen : png "images/kitchen3.png";
      house : png "images/house.png";
      road : png "images/road.png";
      path_2 : png "images/path2.png";
      path_3 : png "images/path3.png";      
      path_4 : png "images/path4.png";
      path_5 : png "images/path5.png";
      path_7 : png "images/path7.png";
      path_8 : png "images/path8.png";
      path_9 : png "images/path9.png";
      path_10 : png "images/path10.png";
      path_11 : png "images/path11.png";
      path_13 : png "images/path13.png";
      clearing : png "images/clearing.png";
      orcpixelsm : png "images/orcpixelsmgray.png";
      warrior : png "images/warrior.png";
      demons : png "images/demons.png";
      mage : png "images/mage.png";
      psions : png "images/psions.png";
      clock : png "images/clock.png";
      qr1 : png "images/qr1.png";
      qr1nob : png "images/qr1nob.png";
      qr2 : png "images/qr2.png";
      qr2nob : png "images/qr2nob.png";
      qr3 : png "images/qr3.png";
      qr3nob : png "images/qr3nob.png";
      qr4 : png "images/qr4.png";
      qr4nob : png "images/qr4nob.png";
      qr5 : png "images/qr5.png";
      qr5nob : png "images/qr5nob.png";      
      death : png "images/death.png";
      office : png "images/office.png";
      john : png "images/darkdudegray.png";
      boss : png "images/bossgray.png";
      d1 : png "images/1.png";
      d1water : png "images/1water.png";
      d2 : png "images/2.png";
      d2water : png "images/2water.png";
      d3 : png "images/3.png";
      d3water : png "images/3water.png";
      d3empty : png "images/3empty.png";
      d4 : png "images/4.png";
      d4water : png "images/4water.png";
      d4nowater : png "images/4nowater.png";
      d4empty : png "images/4empty.png";
      d5 : png "images/5edit.png";
      d5empty : png "images/5orig.png";
      d6 : png "images/6edit.png";
      d6empty : png "images/6orig.png";
      d7 : png "images/7.png";
      d8 : png "images/8.png";
      d9 : png "images/9.png";
      d9orig : png "images/9orig.png";
      d10 : png "images/10.png";
      d11 : png "images/11.png";
      d12 : png "images/12.png";
      d13 : png "images/13.png";
      d14 : png "images/14.png";
      d14orig : png "images/14orig.png";
      map : png "images/map2gray.png";
      carriage : png "images/carriage.png";
      uncle_carroll : png "images/carroll.png";
      northroad : png "images/northroad.png";
      southroad : png "images/southroad.png";
      pond : png "images/pond.png";
      farm : png "images/farm.png";
      windmill : png "images/windmillup.png";
      sewer : png "images/sewer.png";
      truck : png "images/truck.png";
      in_truck : png "images/in_truck.png";
      carroll : png "images/carroll.png";
      }



   fonts {
      userfont_sierra_agi_font : base64_ttf horz_pixels = "8" vert_pixels = "8" font_scale_multiplier = "1.0" experimental_line_height_ratio = "1.35" snap_vert = "true" "";
      
      userfont_envious : base64_ttf horz_pixels = "8" vert_pixels = "8" font_scale_multiplier = "1.0" experimental_line_height_ratio = "1.25" snap_vert = "true" "";
   
      userfont_parchment : base64_ttf horz_pixels = "8" vert_pixels = "8" font_scale_multiplier = "0.9" experimental_line_height_ratio = "1.1" snap_vert = "true" "";
      userfont_betrayal_at_krondor : base64_ttf horz_pixels = "8" vert_pixels = "11" font_scale_multiplier = "1" experimental_line_height_ratio = ".85" snap_vert = "true" "";
   }
}